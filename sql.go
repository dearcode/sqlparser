// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnOption      columnOption
	columnOptions     []columnOption
	TableOption       TableOption
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	ForeignOptionList []ForeignOption
	ForeignOption     ForeignOption
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const BIT_LITERAL = 57403
const NULL = 57404
const TRUE = 57405
const FALSE = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const BINARY = 57429
const UNDERSCORE_BINARY = 57430
const COLLATE = 57431
const INTERVAL = 57432
const JSON_EXTRACT_OP = 57433
const JSON_UNQUOTE_EXTRACT_OP = 57434
const CREATE = 57435
const ALTER = 57436
const DROP = 57437
const RENAME = 57438
const ANALYZE = 57439
const ADD = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const COLUMN = 57449
const CONSTRAINT = 57450
const SPATIAL = 57451
const FULLTEXT = 57452
const FOREIGN = 57453
const REFERENCES = 57454
const CASCADE = 57455
const RESTRICT = 57456
const NO = 57457
const ACTION = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const ENGINE = 57476
const STATUS = 57477
const VARIABLES = 57478
const BEGIN = 57479
const START = 57480
const TRANSACTION = 57481
const COMMIT = 57482
const ROLLBACK = 57483
const BIT = 57484
const TINYINT = 57485
const SMALLINT = 57486
const MEDIUMINT = 57487
const INT = 57488
const INTEGER = 57489
const BIGINT = 57490
const INTNUM = 57491
const REAL = 57492
const DOUBLE = 57493
const FLOAT_TYPE = 57494
const DECIMAL = 57495
const NUMERIC = 57496
const TIME = 57497
const TIMESTAMP = 57498
const DATETIME = 57499
const YEAR = 57500
const CHAR = 57501
const VARCHAR = 57502
const BOOL = 57503
const CHARACTER = 57504
const VARBINARY = 57505
const NCHAR = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const NULLX = 57517
const AUTO_INCREMENT = 57518
const APPROXNUM = 57519
const SIGNED = 57520
const UNSIGNED = 57521
const ZEROFILL = 57522
const DATABASES = 57523
const TABLES = 57524
const VITESS_KEYSPACES = 57525
const VITESS_SHARDS = 57526
const VITESS_TABLETS = 57527
const VSCHEMA_TABLES = 57528
const NAMES = 57529
const CHARSET = 57530
const GLOBAL = 57531
const SESSION = 57532
const CURRENT_TIMESTAMP = 57533
const DATABASE = 57534
const CURRENT_DATE = 57535
const NOW = 57536
const CURRENT_TIME = 57537
const LOCALTIME = 57538
const LOCALTIMESTAMP = 57539
const UTC_DATE = 57540
const UTC_TIME = 57541
const UTC_TIMESTAMP = 57542
const REPLACE = 57543
const CONVERT = 57544
const CAST = 57545
const GROUP_CONCAT = 57546
const SEPARATOR = 57547
const MATCH = 57548
const AGAINST = 57549
const BOOLEAN = 57550
const LANGUAGE = 57551
const WITH = 57552
const QUERY = 57553
const EXPANSION = 57554
const UNUSED = 57555
const ID = 57556

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"BINARY",
	"UNDERSCORE_BINARY",
	"COLLATE",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"REFERENCES",
	"CASCADE",
	"RESTRICT",
	"NO",
	"ACTION",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"ENGINE",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ID",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 223,
	78, 738,
	-2, 44,
	-1, 224,
	78, 711,
	-2, 45,
	-1, 229,
	78, 698,
	-2, 560,
	-1, 231,
	78, 725,
	-2, 562,
	-1, 327,
	107, 597,
	-2, 593,
	-1, 328,
	107, 598,
	-2, 594,
	-1, 738,
	107, 600,
	-2, 596,
	-1, 752,
	17, 584,
	26, 584,
	31, 584,
	33, 584,
	36, 584,
	37, 584,
	63, 584,
	118, 584,
	123, 584,
	126, 584,
	127, 584,
	128, 584,
	133, 584,
	137, 584,
	139, 584,
	140, 584,
	141, 584,
	143, 584,
	144, 584,
	145, 584,
	146, 584,
	147, 584,
	148, 584,
	149, 584,
	150, 584,
	151, 584,
	152, 584,
	153, 584,
	154, 584,
	155, 584,
	156, 584,
	157, 584,
	158, 584,
	159, 584,
	160, 584,
	161, 584,
	162, 584,
	163, 584,
	164, 584,
	165, 584,
	167, 584,
	168, 584,
	169, 584,
	170, 584,
	171, 584,
	172, 584,
	173, 584,
	174, 584,
	175, 584,
	176, 584,
	177, 584,
	178, 584,
	179, 584,
	180, 584,
	181, 584,
	182, 584,
	183, 584,
	184, 584,
	185, 584,
	186, 584,
	187, 584,
	188, 584,
	189, 584,
	190, 584,
	191, 584,
	195, 584,
	196, 584,
	197, 584,
	200, 584,
	201, 584,
	202, 584,
	203, 584,
	204, 584,
	205, 584,
	206, 584,
	207, 584,
	224, 584,
	226, 584,
	227, 584,
	228, 584,
	229, 584,
	230, 584,
	231, 584,
	-2, 666,
	-1, 756,
	1, 575,
	232, 575,
	-2, 605,
	-1, 757,
	1, 576,
	232, 576,
	-2, 697,
	-1, 759,
	1, 145,
	232, 145,
	-2, 619,
	-1, 760,
	1, 579,
	232, 579,
	-2, 663,
	-1, 761,
	1, 580,
	232, 580,
	-2, 611,
	-1, 762,
	1, 581,
	232, 581,
	-2, 730,
	-1, 763,
	1, 582,
	232, 582,
	-2, 758,
	-1, 847,
	5, 25,
	-2, 536,
	-1, 863,
	5, 26,
	-2, 411,
	-1, 1120,
	5, 26,
	-2, 537,
	-1, 1184,
	5, 25,
	-2, 539,
	-1, 1235,
	5, 26,
	-2, 540,
}

const yyPrivate = 57344

const yyLast = 10498

var yyAct = [...]int{

	328, 1266, 1227, 602, 1257, 744, 527, 1011, 907, 1012,
	1042, 664, 644, 1041, 733, 380, 741, 939, 694, 458,
	3, 1058, 1008, 228, 457, 1096, 811, 850, 804, 72,
	702, 982, 814, 165, 974, 737, 165, 645, 679, 406,
	1126, 828, 460, 781, 855, 867, 430, 928, 51, 378,
	369, 195, 678, 813, 436, 943, 222, 216, 641, 165,
	165, 72, 323, 446, 211, 194, 165, 210, 72, 204,
	462, 50, 1049, 1135, 686, 1039, 711, 728, 324, 1048,
	707, 1047, 1046, 209, 352, 719, 354, 886, 1032, 806,
	162, 951, 900, 571, 1036, 382, 873, 1038, 502, 889,
	890, 873, 897, 807, 747, 535, 524, 729, 522, 885,
	347, 718, 342, 1274, 1252, 351, 353, 219, 872, 1265,
	1245, 1260, 1040, 332, 1230, 567, 566, 577, 578, 569,
	570, 572, 573, 574, 575, 576, 568, 1210, 745, 1251,
	1244, 579, 1109, 874, 1177, 220, 333, 1061, 920, 710,
	1172, 1170, 367, 339, 214, 165, 188, 165, 189, 361,
	362, 676, 165, 1277, 1259, 1254, 1228, 964, 642, 165,
	706, 719, 490, 72, 72, 72, 72, 349, 72, 72,
	1198, 950, 951, 340, 614, 72, 955, 952, 945, 946,
	953, 948, 947, 157, 159, 160, 330, 718, 155, 350,
	190, 191, 192, 193, 1051, 1050, 503, 954, 683, 165,
	1052, 532, 337, 957, 338, 707, 165, 165, 165, 344,
	433, 154, 72, 155, 526, 1269, 346, 72, 508, 509,
	510, 511, 512, 513, 514, 719, 516, 517, 518, 519,
	520, 504, 505, 506, 507, 488, 489, 432, 1134, 491,
	1037, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 718, 884, 1231, 805, 55, 441, 866, 865, 1035,
	864, 871, 950, 331, 888, 466, 871, 955, 952, 945,
	946, 953, 948, 947, 896, 730, 158, 916, 912, 57,
	58, 59, 60, 336, 515, 949, 168, 816, 954, 1054,
	1055, 1056, 665, 667, 944, 706, 156, 1060, 1057, 961,
	913, 214, 341, 1220, 343, 963, 591, 592, 1243, 1162,
	1123, 986, 165, 918, 934, 910, 1268, 1267, 1270, 571,
	911, 601, 521, 72, 345, 676, 165, 165, 72, 1097,
	165, 571, 788, 553, 165, 554, 165, 748, 72, 72,
	72, 72, 72, 72, 72, 72, 786, 787, 785, 556,
	1078, 556, 72, 72, 877, 676, 165, 472, 853, 540,
	473, 1111, 568, 1099, 666, 407, 45, 579, 829, 479,
	998, 538, 917, 915, 829, 878, 949, 684, 523, 579,
	1053, 558, 742, 529, 530, 918, 992, 533, 991, 555,
	554, 537, 555, 554, 918, 962, 1101, 960, 1105, 1113,
	1100, 329, 1098, 555, 554, 1276, 556, 1103, 438, 556,
	153, 45, 1201, 551, 48, 1200, 1102, 557, 1153, 200,
	556, 1104, 1106, 784, 215, 1152, 72, 630, 631, 719,
	1034, 165, 555, 554, 165, 165, 165, 165, 165, 933,
	931, 1061, 1275, 914, 1059, 993, 165, 921, 646, 556,
	165, 774, 776, 777, 165, 718, 775, 434, 165, 165,
	368, 1213, 72, 589, 967, 968, 969, 1150, 208, 663,
	335, 72, 555, 554, 632, 1065, 375, 929, 1137, 1253,
	1240, 368, 671, 1224, 372, 431, 1205, 324, 643, 556,
	1188, 1225, 555, 554, 634, 1137, 1197, 1188, 368, 648,
	649, 647, 651, 1204, 650, 1188, 1189, 1199, 659, 556,
	1137, 1142, 1066, 72, 677, 670, 672, 165, 673, 1137,
	1136, 72, 851, 165, 669, 735, 72, 165, 72, 214,
	214, 214, 214, 214, 696, 738, 1030, 368, 356, 356,
	356, 356, 819, 356, 356, 214, 1122, 368, 980, 368,
	356, 1074, 1073, 214, 1118, 713, 714, 715, 716, 753,
	1070, 1071, 1070, 1069, 52, 739, 45, 819, 368, 571,
	1007, 725, 726, 727, 743, 469, 633, 443, 368, 443,
	766, 459, 481, 480, 768, 731, 732, 571, 1077, 1072,
	72, 782, 616, 617, 618, 619, 620, 621, 622, 623,
	661, 662, 852, 980, 72, 569, 570, 572, 573, 574,
	575, 576, 568, 980, 663, 738, 470, 579, 468, 567,
	566, 577, 578, 569, 570, 572, 573, 574, 575, 576,
	568, 808, 809, 852, 22, 579, 395, 394, 397, 398,
	399, 400, 833, 442, 443, 396, 401, 783, 980, 821,
	822, 847, 20, 825, 22, 826, 471, 845, 22, 72,
	846, 1009, 559, 628, 851, 836, 201, 443, 832, 72,
	834, 835, 72, 837, 528, 851, 72, 72, 742, 891,
	48, 1139, 1140, 843, 1183, 860, 48, 1237, 869, 870,
	712, 717, 720, 721, 722, 603, 734, 1159, 356, 1147,
	48, 1146, 612, 356, 48, 892, 199, 875, 1044, 1024,
	712, 729, 48, 356, 356, 356, 356, 356, 356, 356,
	356, 893, 895, 724, 898, 899, 723, 356, 356, 62,
	72, 856, 857, 72, 72, 742, 72, 1258, 1009, 165,
	935, 859, 588, 590, 536, 820, 879, 365, 656, 72,
	882, 883, 654, 657, 640, 862, 861, 655, 831, 72,
	653, 674, 930, 658, 652, 452, 453, 1255, 875, 1250,
	600, 205, 206, 604, 605, 606, 607, 608, 609, 610,
	966, 613, 615, 615, 615, 615, 615, 615, 615, 615,
	615, 624, 625, 626, 627, 770, 941, 956, 932, 1249,
	437, 842, 841, 887, 370, 478, 863, 72, 348, 215,
	215, 215, 215, 215, 435, 782, 371, 1181, 1145, 970,
	1143, 1064, 1063, 882, 894, 459, 1116, 668, 1160, 165,
	740, 534, 456, 215, 202, 203, 437, 196, 1216, 72,
	72, 840, 771, 772, 197, 778, 779, 1215, 1010, 839,
	52, 646, 675, 1180, 404, 852, 979, 646, 1015, 997,
	593, 594, 595, 596, 597, 598, 599, 72, 1263, 1262,
	995, 783, 1217, 1062, 552, 54, 1013, 56, 467, 1020,
	49, 880, 72, 70, 72, 1018, 1005, 1, 746, 1019,
	571, 938, 603, 754, 1226, 823, 824, 1045, 942, 1256,
	699, 356, 698, 356, 708, 1033, 901, 908, 1031, 322,
	61, 697, 922, 923, 906, 227, 431, 325, 905, 902,
	919, 709, 334, 904, 903, 72, 165, 484, 572, 573,
	574, 575, 576, 568, 485, 72, 483, 487, 579, 486,
	357, 482, 176, 221, 455, 474, 981, 64, 72, 165,
	977, 571, 959, 958, 978, 72, 45, 749, 880, 587,
	838, 226, 1016, 629, 989, 990, 429, 1214, 994, 1179,
	604, 996, 611, 1000, 72, 1001, 1002, 1003, 1004, 827,
	381, 773, 393, 1076, 566, 577, 578, 569, 570, 572,
	573, 574, 575, 576, 568, 390, 1086, 392, 165, 579,
	738, 225, 391, 1091, 1095, 1092, 1083, 848, 849, 1108,
	1029, 1107, 1094, 635, 844, 72, 560, 72, 72, 72,
	165, 72, 1115, 1117, 1114, 379, 373, 227, 227, 227,
	227, 213, 227, 227, 1110, 72, 439, 780, 447, 227,
	789, 790, 791, 792, 793, 794, 795, 796, 1141, 797,
	798, 799, 800, 801, 802, 803, 445, 1128, 1129, 1130,
	881, 1125, 1131, 444, 218, 858, 854, 72, 72, 72,
	212, 1006, 1144, 1133, 1148, 1176, 227, 1229, 639, 23,
	53, 475, 207, 18, 17, 1155, 909, 1156, 16, 19,
	15, 14, 1079, 214, 13, 924, 27, 12, 925, 926,
	927, 11, 10, 9, 8, 1081, 1168, 988, 1084, 356,
	1138, 7, 6, 72, 72, 5, 4, 999, 1182, 198,
	21, 2, 1090, 448, 451, 452, 453, 449, 72, 450,
	454, 1184, 0, 1193, 356, 1194, 0, 881, 1196, 0,
	1021, 1022, 0, 1195, 1023, 0, 0, 1025, 1013, 0,
	72, 0, 0, 72, 0, 0, 0, 1119, 1120, 1121,
	0, 1124, 225, 0, 1165, 1166, 0, 1167, 0, 0,
	1169, 0, 1171, 0, 0, 174, 0, 0, 0, 72,
	0, 1218, 0, 0, 987, 0, 0, 227, 0, 165,
	1206, 0, 227, 0, 1222, 1219, 0, 0, 0, 0,
	0, 0, 227, 227, 227, 227, 227, 227, 227, 227,
	1233, 72, 1014, 1013, 45, 0, 227, 227, 0, 72,
	1234, 355, 1238, 646, 0, 0, 0, 0, 72, 0,
	1026, 1027, 1028, 1248, 1247, 0, 0, 0, 1163, 1164,
	0, 1246, 0, 0, 0, 0, 1223, 169, 0, 0,
	1173, 1174, 1261, 0, 171, 1271, 0, 0, 0, 0,
	177, 173, 0, 971, 972, 973, 0, 0, 1149, 0,
	1151, 1190, 1191, 1192, 571, 0, 0, 448, 451, 452,
	453, 449, 0, 450, 454, 0, 1112, 856, 857, 0,
	636, 175, 0, 0, 179, 0, 0, 325, 0, 0,
	1067, 1068, 603, 0, 0, 0, 567, 566, 577, 578,
	569, 570, 572, 573, 574, 575, 576, 568, 0, 1212,
	0, 0, 579, 170, 0, 0, 227, 0, 405, 0,
	0, 0, 0, 0, 0, 227, 325, 0, 0, 0,
	0, 0, 172, 178, 180, 181, 182, 183, 0, 0,
	186, 185, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 163, 1235, 0, 187, 1209, 0, 0, 0, 1239,
	0, 0, 1242, 215, 0, 184, 227, 227, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 163, 163, 0,
	227, 326, 227, 571, 163, 358, 359, 360, 0, 363,
	364, 1178, 0, 0, 0, 1087, 366, 0, 0, 0,
	0, 0, 225, 0, 0, 1278, 1279, 0, 0, 0,
	0, 695, 0, 0, 0, 567, 566, 577, 578, 569,
	570, 572, 573, 574, 575, 576, 568, 0, 0, 0,
	0, 579, 356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 1089, 810, 0, 227, 0, 0, 0,
	0, 0, 736, 695, 0, 0, 0, 0, 830, 0,
	368, 695, 0, 571, 0, 1175, 0, 0, 0, 0,
	0, 0, 0, 163, 1014, 163, 0, 1185, 0, 0,
	163, 0, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 0, 0, 1232, 603, 567, 566, 577, 578, 569,
	570, 572, 573, 574, 575, 576, 568, 0, 0, 0,
	0, 579, 0, 868, 0, 0, 1207, 1202, 0, 1203,
	0, 0, 0, 227, 0, 0, 227, 163, 0, 0,
	227, 227, 818, 0, 163, 464, 163, 0, 0, 1014,
	0, 45, 0, 0, 525, 0, 0, 0, 0, 531,
	0, 0, 0, 0, 1161, 0, 0, 0, 0, 541,
	542, 543, 544, 545, 546, 547, 548, 0, 0, 0,
	0, 0, 0, 549, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 571, 936, 227, 0,
	227, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 695,
	0, 0, 695, 227, 0, 1264, 695, 695, 567, 566,
	577, 578, 569, 570, 572, 573, 574, 575, 576, 568,
	0, 0, 0, 0, 579, 0, 0, 0, 0, 0,
	163, 0, 1211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 163, 0, 0, 163, 0,
	0, 984, 163, 571, 539, 0, 0, 0, 0, 0,
	695, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 0, 695,
	325, 0, 0, 1017, 868, 0, 325, 577, 578, 569,
	570, 572, 573, 574, 575, 576, 568, 0, 0, 0,
	0, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 1043, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 767, 0, 769,
	0, 0, 22, 46, 24, 25, 0, 0, 0, 163,
	0, 326, 163, 163, 163, 163, 163, 0, 0, 0,
	40, 0, 0, 0, 660, 26, 0, 0, 163, 227,
	0, 0, 464, 0, 0, 0, 163, 163, 0, 1080,
	0, 0, 0, 0, 35, 0, 0, 0, 48, 0,
	326, 0, 1082, 0, 0, 0, 0, 695, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 0, 0, 0, 0, 163, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 163, 28, 29, 31, 30,
	33, 0, 0, 0, 0, 1075, 0, 0, 0, 1127,
	0, 1127, 1127, 1127, 0, 1132, 0, 0, 0, 0,
	34, 41, 42, 0, 0, 43, 44, 32, 0, 1043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 37, 0, 38, 39, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 817,
	539, 227, 227, 227, 817, 817, 0, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 817, 817, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 817, 0,
	0, 0, 0, 0, 47, 0, 0, 1186, 1187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1127, 571, 0, 227, 940, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 0,
	565, 0, 0, 0, 0, 0, 580, 581, 582, 583,
	584, 585, 586, 1221, 563, 564, 561, 567, 566, 577,
	578, 569, 570, 572, 573, 574, 575, 576, 568, 0,
	0, 0, 0, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 1236, 0, 163, 0, 0,
	0, 0, 111, 1241, 0, 812, 0, 377, 0, 0,
	0, 88, 1043, 376, 0, 0, 98, 415, 100, 0,
	0, 122, 107, 1075, 0, 0, 0, 408, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	395, 394, 397, 398, 399, 400, 0, 0, 82, 396,
	401, 402, 403, 0, 0, 374, 388, 0, 414, 0,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 385, 386,
	815, 0, 0, 0, 427, 0, 387, 163, 383, 384,
	0, 389, 0, 0, 326, 0, 0, 0, 0, 0,
	326, 0, 0, 166, 0, 0, 425, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 163, 146, 147, 148, 149, 108,
	81, 94, 121, 416, 426, 423, 421, 424, 420, 422,
	419, 418, 417, 428, 410, 411, 413, 163, 412, 73,
	0, 99, 150, 116, 90, 141, 327, 0, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 539, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 300, 273, 312, 251, 265, 320, 266, 267,
	294, 239, 281, 111, 263, 0, 254, 234, 260, 235,
	252, 275, 88, 278, 682, 302, 284, 98, 318, 100,
	289, 0, 122, 107, 0, 0, 277, 304, 279, 299,
	272, 295, 244, 288, 313, 264, 292, 314, 0, 876,
	0, 0, 692, 693, 0, 0, 0, 0, 0, 685,
	0, 291, 309, 262, 293, 233, 290, 0, 237, 240,
	319, 307, 257, 258, 690, 0, 0, 0, 0, 0,
	0, 276, 280, 296, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 287, 0, 0, 0, 238,
	0, 689, 274, 0, 0, 0, 243, 163, 256, 297,
	0, 232, 305, 271, 166, 308, 269, 268, 311, 114,
	0, 0, 125, 93, 92, 0, 326, 0, 0, 129,
	303, 253, 261, 84, 259, 119, 112, 139, 286, 113,
	118, 101, 131, 115, 138, 167, 145, 681, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 688, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 680,
	0, 123, 140, 152, 249, 306, 146, 147, 148, 149,
	108, 687, 94, 121, 247, 248, 245, 0, 246, 282,
	283, 315, 316, 317, 298, 242, 0, 0, 301, 285,
	73, 0, 99, 150, 116, 90, 141, 691, 310, 300,
	273, 312, 251, 265, 320, 266, 267, 760, 239, 281,
	111, 263, 0, 254, 234, 260, 235, 252, 275, 88,
	278, 759, 302, 284, 98, 318, 100, 289, 0, 122,
	107, 0, 0, 277, 304, 279, 299, 272, 295, 244,
	288, 313, 264, 292, 314, 0, 0, 0, 0, 692,
	693, 0, 0, 0, 0, 0, 758, 0, 291, 309,
	262, 293, 233, 290, 0, 237, 240, 319, 307, 257,
	258, 690, 0, 0, 0, 0, 0, 0, 276, 280,
	296, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 287, 0, 0, 0, 238, 0, 689, 274,
	0, 0, 0, 243, 755, 751, 752, 0, 750, 305,
	271, 166, 308, 269, 268, 311, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 303, 253, 261,
	84, 259, 119, 112, 139, 286, 762, 765, 101, 131,
	115, 138, 167, 145, 681, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 757, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 0, 756, 0, 123, 140,
	152, 249, 306, 146, 147, 148, 149, 108, 687, 94,
	121, 247, 248, 245, 0, 246, 282, 283, 315, 316,
	317, 298, 761, 0, 0, 301, 285, 73, 0, 99,
	150, 116, 90, 763, 764, 310, 300, 273, 312, 251,
	265, 320, 266, 267, 294, 239, 281, 111, 263, 0,
	254, 234, 260, 235, 252, 275, 88, 278, 682, 302,
	284, 98, 318, 100, 289, 0, 122, 107, 0, 0,
	277, 304, 279, 299, 272, 295, 244, 288, 313, 264,
	292, 314, 0, 0, 0, 0, 692, 693, 0, 0,
	0, 0, 0, 685, 0, 291, 309, 262, 293, 233,
	290, 0, 237, 240, 319, 307, 257, 258, 690, 0,
	0, 0, 0, 0, 0, 276, 280, 296, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 287,
	0, 0, 0, 238, 0, 689, 274, 0, 0, 0,
	243, 0, 256, 297, 0, 232, 305, 271, 166, 308,
	269, 268, 311, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 303, 253, 261, 84, 259, 119,
	112, 139, 286, 113, 118, 101, 131, 115, 138, 167,
	145, 681, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 688,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 680, 0, 123, 140, 152, 249, 306,
	146, 147, 148, 149, 108, 687, 94, 121, 247, 248,
	245, 0, 246, 282, 283, 315, 316, 317, 298, 242,
	0, 0, 301, 285, 73, 0, 99, 150, 116, 90,
	141, 691, 310, 300, 273, 312, 251, 265, 320, 266,
	267, 294, 239, 281, 111, 263, 0, 254, 234, 260,
	235, 252, 275, 88, 278, 250, 302, 284, 98, 318,
	100, 289, 0, 122, 107, 0, 0, 277, 304, 279,
	299, 272, 295, 244, 288, 313, 264, 292, 314, 0,
	0, 0, 0, 692, 693, 0, 0, 0, 0, 0,
	82, 0, 291, 309, 262, 293, 233, 290, 0, 237,
	240, 319, 307, 257, 258, 690, 0, 0, 0, 0,
	0, 0, 276, 280, 296, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 287, 0, 0, 0,
	238, 0, 241, 274, 0, 0, 0, 243, 0, 256,
	297, 0, 232, 305, 271, 166, 308, 269, 268, 311,
	114, 0, 0, 125, 93, 92, 0, 0, 0, 0,
	129, 303, 253, 261, 84, 259, 119, 112, 139, 286,
	113, 118, 101, 131, 115, 138, 167, 145, 127, 128,
	144, 74, 126, 137, 83, 120, 76, 135, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 132,
	133, 85, 151, 79, 143, 78, 80, 142, 109, 130,
	136, 106, 103, 77, 134, 104, 102, 97, 89, 0,
	236, 0, 123, 140, 152, 249, 306, 146, 147, 148,
	149, 108, 81, 94, 121, 247, 248, 245, 0, 246,
	282, 283, 315, 316, 317, 298, 242, 0, 0, 301,
	285, 73, 0, 99, 150, 116, 90, 141, 691, 310,
	300, 273, 312, 251, 265, 320, 266, 267, 294, 239,
	281, 111, 263, 0, 254, 234, 260, 235, 252, 275,
	88, 278, 250, 302, 284, 98, 318, 100, 289, 0,
	122, 107, 0, 0, 277, 304, 279, 299, 272, 295,
	244, 288, 313, 264, 292, 314, 0, 0, 0, 0,
	1157, 1158, 0, 0, 0, 0, 0, 82, 0, 291,
	309, 262, 293, 233, 290, 0, 237, 240, 319, 307,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 276,
	280, 296, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 287, 0, 0, 0, 238, 0, 241,
	274, 0, 0, 0, 243, 0, 256, 297, 0, 232,
	305, 271, 166, 308, 269, 268, 311, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 303, 253,
	261, 84, 259, 119, 112, 139, 286, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 236, 0, 123,
	140, 152, 249, 306, 146, 147, 148, 149, 108, 81,
	94, 121, 247, 248, 245, 0, 246, 282, 283, 315,
	316, 317, 298, 242, 0, 0, 301, 285, 73, 0,
	99, 150, 116, 90, 141, 71, 310, 300, 273, 312,
	251, 265, 320, 266, 267, 294, 239, 281, 111, 263,
	0, 254, 234, 260, 235, 252, 275, 88, 278, 250,
	302, 284, 98, 318, 100, 289, 0, 122, 107, 0,
	0, 277, 304, 279, 299, 272, 295, 244, 288, 313,
	264, 292, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 291, 309, 262, 293,
	233, 290, 0, 237, 240, 319, 307, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 276, 280, 296, 270,
	0, 0, 0, 0, 0, 0, 1208, 0, 255, 0,
	287, 0, 0, 0, 238, 0, 241, 274, 0, 0,
	0, 243, 0, 256, 297, 0, 232, 305, 271, 166,
	308, 269, 268, 311, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 303, 253, 261, 84, 259,
	119, 112, 139, 286, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 236, 0, 123, 140, 152, 249,
	306, 146, 147, 148, 149, 108, 81, 94, 121, 247,
	248, 245, 0, 246, 282, 283, 315, 316, 317, 298,
	242, 0, 0, 301, 285, 73, 0, 99, 150, 116,
	90, 141, 71, 310, 300, 273, 312, 251, 265, 320,
	266, 267, 294, 239, 281, 111, 263, 0, 254, 234,
	260, 235, 252, 275, 88, 278, 250, 302, 284, 98,
	318, 100, 289, 0, 122, 107, 0, 0, 277, 304,
	279, 299, 272, 295, 244, 288, 313, 264, 292, 314,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 291, 309, 262, 293, 233, 290, 0,
	237, 240, 319, 307, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 276, 280, 296, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 287, 0, 0,
	0, 238, 0, 241, 274, 0, 0, 0, 243, 0,
	256, 297, 0, 232, 305, 271, 166, 308, 269, 268,
	311, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 303, 253, 261, 84, 259, 119, 112, 139,
	286, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 80, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 236, 0, 123, 140, 152, 249, 306, 146, 147,
	148, 149, 108, 81, 94, 121, 247, 248, 245, 0,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 73, 0, 99, 150, 116, 90, 141, 71,
	310, 300, 273, 312, 251, 265, 320, 266, 267, 294,
	239, 281, 111, 263, 0, 254, 234, 260, 235, 252,
	275, 88, 278, 250, 302, 284, 98, 318, 100, 289,
	0, 122, 107, 0, 0, 277, 304, 279, 299, 272,
	295, 244, 288, 313, 264, 292, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	1093, 0, 255, 0, 287, 0, 0, 0, 238, 0,
	241, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	232, 305, 271, 166, 308, 269, 268, 311, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 303,
	253, 261, 84, 259, 119, 112, 139, 286, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 236, 0,
	123, 140, 152, 249, 306, 146, 147, 148, 149, 108,
	81, 94, 121, 247, 248, 245, 0, 246, 282, 283,
	315, 316, 317, 298, 242, 0, 0, 301, 285, 73,
	0, 99, 150, 116, 90, 141, 327, 310, 300, 273,
	312, 251, 265, 320, 266, 267, 294, 239, 281, 111,
	263, 0, 254, 234, 260, 235, 252, 275, 88, 278,
	250, 302, 284, 98, 318, 100, 289, 0, 122, 107,
	0, 0, 277, 304, 279, 299, 272, 295, 244, 288,
	313, 264, 292, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 291, 309, 262,
	293, 233, 290, 0, 237, 240, 319, 307, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 276, 280, 296,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 287, 0, 0, 0, 238, 0, 241, 274, 0,
	0, 0, 243, 0, 256, 297, 0, 232, 305, 271,
	166, 308, 269, 268, 311, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 303, 253, 261, 84,
	259, 119, 112, 139, 286, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 236, 0, 123, 140, 152,
	249, 306, 146, 147, 148, 149, 108, 81, 94, 121,
	247, 248, 245, 0, 246, 282, 283, 315, 316, 317,
	298, 242, 0, 0, 301, 285, 73, 0, 99, 150,
	116, 90, 141, 71, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 294, 239, 281, 111, 263, 0, 254,
	234, 260, 235, 252, 275, 88, 278, 250, 302, 284,
	98, 318, 100, 289, 0, 122, 107, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 291, 309, 262, 293, 233, 290,
	0, 237, 240, 319, 307, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 276, 280, 296, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 287, 0,
	0, 0, 238, 0, 241, 274, 0, 0, 0, 243,
	0, 256, 297, 0, 232, 305, 271, 166, 308, 269,
	268, 311, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 303, 253, 261, 84, 259, 119, 112,
	139, 286, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 236, 0, 123, 140, 152, 249, 306, 146,
	147, 148, 149, 108, 81, 94, 121, 247, 248, 245,
	0, 246, 282, 283, 315, 316, 317, 298, 242, 0,
	0, 301, 285, 73, 0, 99, 150, 116, 90, 141,
	327, 310, 300, 273, 312, 251, 265, 320, 266, 267,
	294, 239, 281, 111, 263, 0, 254, 234, 260, 235,
	252, 275, 88, 278, 250, 302, 284, 98, 318, 100,
	289, 0, 122, 107, 0, 0, 277, 304, 279, 299,
	272, 295, 244, 288, 313, 264, 292, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 291, 309, 262, 293, 233, 290, 0, 237, 240,
	319, 307, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 276, 280, 296, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 287, 0, 0, 0, 238,
	0, 241, 274, 0, 0, 0, 243, 0, 256, 297,
	0, 232, 305, 271, 166, 308, 269, 268, 311, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	303, 253, 261, 84, 259, 119, 112, 139, 286, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 230, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 236,
	0, 123, 140, 152, 249, 306, 146, 147, 148, 149,
	231, 229, 94, 121, 247, 248, 245, 0, 246, 282,
	283, 315, 316, 317, 298, 242, 0, 0, 301, 285,
	73, 0, 99, 150, 116, 90, 141, 71, 310, 300,
	273, 312, 251, 265, 320, 266, 267, 294, 239, 281,
	111, 263, 0, 254, 234, 260, 235, 252, 275, 88,
	278, 250, 302, 284, 98, 318, 100, 289, 0, 122,
	107, 0, 0, 277, 304, 279, 299, 272, 295, 244,
	288, 313, 264, 292, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 291, 309,
	262, 293, 233, 290, 0, 237, 240, 319, 307, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 276, 280,
	296, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 287, 0, 0, 0, 238, 0, 241, 274,
	0, 0, 0, 243, 0, 256, 297, 0, 232, 305,
	271, 166, 308, 269, 268, 311, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 303, 253, 261,
	84, 259, 119, 112, 139, 286, 113, 118, 101, 131,
	115, 138, 167, 145, 127, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 80, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 0, 236, 0, 123, 140,
	152, 249, 306, 146, 147, 148, 149, 108, 81, 94,
	121, 247, 248, 245, 0, 246, 282, 283, 315, 316,
	317, 298, 242, 0, 0, 301, 285, 73, 0, 99,
	150, 116, 90, 141, 164, 310, 300, 273, 312, 251,
	265, 320, 266, 267, 294, 239, 281, 111, 263, 0,
	254, 234, 260, 235, 252, 275, 88, 278, 250, 302,
	284, 98, 318, 100, 289, 0, 122, 107, 0, 0,
	277, 304, 279, 299, 272, 295, 244, 288, 313, 264,
	292, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 291, 309, 262, 293, 233,
	290, 0, 237, 240, 319, 307, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 276, 280, 296, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 287,
	0, 0, 0, 238, 0, 241, 274, 0, 0, 0,
	243, 0, 256, 297, 0, 232, 305, 271, 166, 308,
	269, 268, 311, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 303, 253, 261, 84, 259, 119,
	112, 139, 286, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 230,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 236, 0, 123, 140, 152, 249, 306,
	146, 147, 148, 149, 231, 229, 224, 223, 247, 248,
	245, 0, 246, 282, 283, 315, 316, 317, 298, 242,
	0, 0, 301, 285, 73, 0, 99, 150, 116, 90,
	141, 71, 111, 0, 0, 0, 0, 377, 0, 0,
	0, 88, 0, 376, 0, 0, 98, 415, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 408, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 368,
	395, 394, 397, 398, 399, 400, 0, 0, 82, 396,
	401, 402, 403, 0, 0, 374, 388, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	0, 0, 0, 0, 427, 0, 387, 0, 383, 384,
	0, 389, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 425, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 0, 146, 147, 148, 149, 108,
	81, 94, 121, 416, 426, 423, 421, 424, 420, 422,
	419, 418, 417, 428, 410, 411, 413, 0, 412, 73,
	0, 99, 150, 116, 90, 141, 327, 111, 0, 0,
	0, 0, 377, 0, 0, 0, 88, 0, 376, 0,
	0, 98, 415, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 408, 409, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 395, 394, 397, 398, 399,
	400, 0, 0, 82, 396, 401, 402, 403, 0, 0,
	374, 388, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 815, 0, 0, 0, 427,
	0, 387, 0, 383, 384, 0, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 425, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 0, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 0,
	146, 147, 148, 149, 108, 81, 94, 121, 416, 426,
	423, 421, 424, 420, 422, 419, 418, 417, 428, 410,
	411, 413, 22, 412, 73, 0, 99, 150, 116, 90,
	141, 327, 0, 111, 0, 0, 0, 0, 377, 0,
	0, 0, 88, 0, 376, 0, 0, 98, 415, 100,
	0, 0, 122, 107, 0, 0, 0, 0, 408, 409,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 0,
	0, 395, 394, 397, 398, 399, 400, 0, 0, 82,
	396, 401, 402, 403, 0, 0, 374, 388, 0, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	386, 0, 0, 0, 0, 427, 0, 387, 0, 383,
	384, 0, 389, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 425, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 0, 146, 147, 148, 149,
	108, 81, 94, 121, 416, 426, 423, 421, 424, 420,
	422, 419, 418, 417, 428, 410, 411, 413, 0, 412,
	73, 0, 99, 150, 116, 90, 141, 327, 111, 0,
	0, 0, 0, 377, 0, 0, 0, 88, 0, 376,
	0, 0, 98, 415, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 408, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 395, 394, 397, 398,
	399, 400, 0, 0, 82, 396, 401, 402, 403, 0,
	0, 374, 388, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 386, 0, 0, 0, 0,
	427, 0, 387, 0, 383, 384, 0, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 425, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 0, 0, 0, 84, 0,
	119, 112, 139, 0, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 0, 0, 123, 140, 152, 0,
	0, 146, 147, 148, 149, 108, 81, 94, 121, 416,
	426, 423, 421, 424, 420, 422, 419, 418, 417, 428,
	410, 411, 413, 0, 412, 73, 111, 99, 150, 116,
	90, 141, 327, 0, 0, 88, 0, 0, 0, 0,
	98, 415, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 408, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 395, 394, 397, 398, 399, 400,
	0, 0, 82, 396, 401, 402, 403, 0, 0, 0,
	388, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 0, 0, 0, 0, 427, 0,
	387, 0, 383, 384, 0, 389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	425, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 1273, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 0, 146,
	147, 148, 149, 108, 81, 94, 121, 416, 426, 423,
	421, 424, 420, 422, 419, 418, 417, 428, 410, 411,
	413, 0, 412, 73, 111, 99, 150, 116, 90, 141,
	327, 0, 0, 88, 0, 0, 0, 0, 98, 415,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 408,
	409, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 395, 394, 397, 398, 399, 400, 0, 0,
	82, 396, 401, 402, 403, 0, 0, 0, 388, 0,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 0, 0, 0, 0, 427, 0, 387, 0,
	383, 384, 0, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 425, 0,
	114, 0, 0, 125, 93, 92, 0, 0, 0, 0,
	129, 0, 0, 0, 84, 0, 119, 112, 139, 0,
	113, 118, 101, 131, 115, 138, 167, 145, 127, 128,
	144, 74, 126, 137, 83, 120, 76, 135, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 132,
	133, 85, 151, 79, 143, 78, 80, 142, 109, 130,
	136, 106, 103, 77, 134, 104, 102, 97, 89, 0,
	0, 0, 123, 140, 152, 0, 0, 146, 147, 148,
	149, 108, 81, 94, 121, 416, 426, 423, 421, 424,
	420, 422, 419, 418, 417, 428, 410, 411, 413, 0,
	412, 73, 111, 99, 150, 116, 90, 141, 327, 0,
	0, 88, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 567, 566, 577, 578, 569, 570,
	572, 573, 574, 575, 576, 568, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 0, 146, 147, 148, 149, 108,
	81, 94, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 99, 150, 116, 90, 141, 71, 111, 0, 0,
	0, 983, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 0, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 111,
	146, 147, 148, 149, 108, 81, 94, 121, 88, 707,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 73, 0, 99, 150, 116, 90,
	141, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 706,
	166, 0, 0, 0, 701, 700, 0, 705, 704, 703,
	92, 0, 0, 0, 0, 129, 0, 0, 0, 84,
	0, 119, 112, 139, 0, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 0, 0, 123, 140, 152,
	0, 111, 146, 147, 148, 149, 108, 81, 94, 121,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 73, 0, 99, 150,
	116, 90, 141, 327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 65, 0, 0, 0, 69, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 0, 113, 118, 101,
	131, 115, 138, 67, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 0, 146, 147, 148, 149, 108, 81,
	94, 121, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	99, 150, 116, 90, 141, 71, 111, 0, 0, 0,
	463, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 0, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 0, 146,
	147, 148, 149, 108, 81, 94, 121, 0, 0, 0,
	0, 22, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 73, 0, 99, 150, 116, 90, 141,
	164, 88, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 0, 146, 147, 148, 149, 108,
	81, 94, 121, 0, 0, 0, 0, 22, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 73,
	0, 99, 150, 116, 90, 141, 71, 88, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 0, 0, 0, 84, 0,
	119, 112, 139, 0, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 0, 0, 123, 140, 152, 0,
	111, 146, 147, 148, 149, 108, 81, 94, 121, 88,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 73, 0, 99, 150, 116,
	90, 141, 164, 0, 0, 0, 0, 0, 0, 0,
	637, 0, 0, 638, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 0, 0, 0,
	84, 0, 119, 112, 139, 0, 113, 118, 101, 131,
	115, 138, 167, 145, 127, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 80, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 0, 0, 0, 123, 140,
	152, 0, 111, 146, 147, 148, 149, 108, 81, 94,
	121, 88, 0, 477, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 73, 0, 99,
	150, 116, 90, 141, 71, 0, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 0, 146, 147, 148, 149, 108,
	81, 94, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 99, 150, 116, 90, 141, 71, 111, 0, 0,
	0, 463, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 465, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 0, 461, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 111,
	146, 147, 148, 149, 108, 81, 94, 121, 88, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 73, 0, 99, 150, 116, 90,
	141, 164, 0, 0, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 0, 0, 0, 84,
	0, 119, 112, 139, 0, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 0, 0, 123, 140, 152,
	0, 111, 146, 147, 148, 149, 108, 81, 94, 121,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 73, 0, 99, 150,
	116, 90, 141, 164, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 0, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 111, 146, 147, 148, 149, 108, 81,
	94, 121, 88, 0, 0, 0, 0, 98, 0, 100,
	0, 0, 122, 107, 0, 0, 0, 0, 73, 0,
	99, 150, 116, 90, 141, 71, 0, 0, 0, 0,
	0, 0, 465, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 0, 146, 147, 148, 149,
	108, 81, 94, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 111, 99, 150, 116, 90, 141, 164, 0, 440,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 0, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 111, 146, 147, 148, 149, 108, 81,
	94, 121, 88, 0, 0, 0, 0, 98, 0, 100,
	0, 0, 122, 107, 0, 0, 0, 0, 73, 0,
	99, 150, 116, 90, 141, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 217, 0,
	0, 123, 140, 152, 0, 111, 146, 147, 148, 149,
	108, 81, 94, 121, 88, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	73, 0, 99, 150, 116, 90, 141, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 0, 0, 0, 84, 0, 119, 112, 139,
	0, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 80, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 0, 0, 123, 140, 152, 0, 111, 146, 147,
	148, 149, 108, 81, 94, 121, 88, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 73, 0, 99, 150, 116, 90, 141, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 166, 0,
	0, 0, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 0, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 111,
	146, 147, 148, 149, 108, 81, 94, 121, 88, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 73, 0, 99, 150, 116, 90,
	141, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 0, 0, 0, 84,
	0, 119, 112, 139, 0, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 0, 0, 123, 140, 152,
	0, 111, 146, 147, 148, 149, 108, 81, 94, 121,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 73, 0, 99, 150,
	116, 90, 141, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 0, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 111, 146, 147, 148, 149, 108, 81,
	94, 121, 88, 0, 0, 0, 0, 98, 0, 100,
	0, 0, 122, 107, 0, 0, 0, 0, 73, 0,
	99, 150, 116, 90, 141, 327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 0, 146, 147, 148, 149,
	108, 81, 94, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 99, 150, 116, 90, 141, 164,
}
var yyPact = [...]int{

	1766, -1000, -161, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	846, 880, -1000, -1000, -1000, -1000, -1000, 687, 7214, 103,
	190, 77, 9720, 180, 1154, 10266, -1000, 0, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 658, -1000, -1000, -1000, -1000,
	-1000, 831, 839, 670, 825, 743, -1000, 78, 8602, 9538,
	5150, -1000, 9356, 75, 156, 10266, -72, 9902, 75, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 177, 10266, -1000, 10266, 62, 62, -119,
	62, 10266, -1000, 227, -1000, -1000, -1000, -1000, 10266, -121,
	789, -32, 3788, 3788, 3788, 3788, 7, 3788, 3788, 707,
	-1000, -1000, -1000, -1000, 3788, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 416, 796, 6011, 6011, 846, -1000,
	658, -1000, -1000, -1000, 790, -1000, -1000, 356, 9174, 624,
	1093, -1000, -1000, -1000, 821, 7841, 8420, 10266, 575, -1000,
	613, 4696, -1000, -1000, -1000, 292, 8205, -1000, -1000, -1000,
	786, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10266, 539, -1000, 69, -1000, 225, -1000, -1000, -123,
	318, -125, 3788, 106, 633, 10266, 10266, 3788, 92, 10266,
	819, -126, 704, 10266, -1000, 4923, -1000, 3788, 3788, 3788,
	3788, 3788, 3788, 3788, 3788, -1000, -1000, -1000, -1000, -1000,
	-1000, 3788, 3788, -1000, -1000, 10266, -1000, -1000, -1000, -1000,
	876, 255, 374, -1000, 6011, 1968, 644, 644, -1000, -1000,
	208, -1000, -1000, 6427, 6427, 6427, 6427, 6427, 6427, 6427,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 644, 224, -1000, 5796, 644, 644,
	644, 644, 644, 644, 6011, 644, 644, 644, 644, 644,
	644, 644, 644, 644, 644, 644, 644, 644, 644, 620,
	-1000, 414, 831, 416, 743, 8023, 723, -1000, -1000, 25,
	10266, -1000, 10084, 8602, 8602, 8602, 8602, 8602, -1000, 734,
	730, -1000, 722, 718, 733, 10266, -1000, 534, 416, 7841,
	254, 644, -1000, 8966, -1000, -1000, 25, 8602, 10266, -1000,
	-1000, 4696, 613, 6011, 230, -1000, -1000, -1000, -1000, 470,
	2880, 7032, -1000, -47, -1000, -1000, 648, -1000, 648, 648,
	648, 648, -8, -8, -8, -8, -1000, -1000, -1000, -1000,
	-1000, 684, 681, -1000, 648, 648, 648, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 669, 55, 669, 654,
	654, 4469, 2880, 818, 694, -1000, 10266, -89, -127, 261,
	2653, -1000, 10266, -1000, -1000, 3788, 10266, 3788, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 769, 6011, 6011, 396, 6011, 6011, 274,
	6427, 372, 270, 6427, 6427, 6427, 6427, 6427, 6427, 6427,
	6427, -1000, 6427, 6427, 6427, 6427, 6427, 6427, 6427, 33,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -128, -1000,
	658, 591, 591, 284, 284, 284, 284, 284, 284, 6635,
	2075, 4469, 524, 331, 5796, 5580, 5580, 6011, 6011, 5580,
	826, 310, 331, 9902, -1000, 416, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5580, 5580, 5580, 5580, 6011, -1000,
	-1000, -1000, 796, -1000, 826, 841, -1000, 780, 779, 5580,
	-1000, 638, 644, -1000, 632, -1000, 290, 1093, 691, 701,
	1247, -1000, -1000, -1000, -1000, 726, -1000, 725, -1000, -1000,
	-1000, -1000, -1000, 416, -1000, 153, 151, 150, 9902, -1000,
	854, 601, -1000, -1000, 331, -1000, 40, -1000, 2426, -1000,
	307, 3107, 56, -1000, -1000, 3107, 3107, 31, 784, 45,
	43, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 637, 679,
	807, 53, -129, 188, 188, -139, -1000, -1000, 260, -49,
	-1000, -1000, 400, -8, -8, -1000, -1000, 230, 31, 784,
	230, 230, 230, 431, 431, -1000, -1000, -1000, -1000, 393,
	669, -1000, -1000, -1000, 392, -1000, -1000, 217, -1000, 2426,
	-1000, 700, 9902, 3788, -1000, 4242, -1000, -1000, 10266, -1000,
	155, 64, 288, -1000, -1000, -1000, 307, 784, 3107, 56,
	-1000, -1000, -1000, -1000, -1000, 24, -1000, -1000, 3788, -1000,
	753, 274, 276, -1000, -1000, 409, -1000, -1000, 331, 331,
	540, -1000, -1000, -1000, -1000, 372, 6427, 6427, 6427, 1227,
	540, 1549, 1626, 904, 284, 843, 843, 272, 272, 272,
	272, 272, 522, 522, -1000, -1000, -1000, 416, -1000, -1000,
	-1000, 416, 5580, 605, -1000, -1000, 6850, 214, 644, 6011,
	-1000, 505, 505, 345, 434, 505, 5580, 304, -1000, 6011,
	416, -1000, 505, 416, 505, 505, -1000, -1000, 10266, -1000,
	-1000, -1000, -1000, 570, 698, 10084, 644, -1000, 7635, 9902,
	846, 10084, 6011, 6011, -1000, -1000, 6011, 667, -1000, 6011,
	-1000, -1000, -1000, -1000, 644, 644, 644, 493, -1000, 846,
	-1000, -1000, -143, -1000, -1000, -1000, 2880, -1000, 383, -1000,
	-1000, -1000, -1000, -1000, -1000, 38, -1000, 19, -1000, -1000,
	-1000, 9902, 666, 9902, -149, -150, -1000, -1000, -152, -159,
	82, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 325, 243, 875, -1000, 805, -1000, 804, 429, -1000,
	-1000, 468, 230, 230, -1000, -1000, -1000, -1000, 519, -1000,
	517, 546, -1000, 508, 4242, 10266, -1000, -1000, 545, -1000,
	282, -1000, -1000, -1000, 9902, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 9902, 10266, -1000,
	-1000, -1000, -1000, -1000, 9902, -1000, -1000, -1000, -1000, -1000,
	-1000, 1227, 540, 1346, -1000, 6427, 6427, -1000, -1000, 505,
	5580, -1000, -1000, 8784, -1000, -1000, 4015, 5580, 331, -1000,
	-1000, 236, 33, 236, -82, 560, 294, -1000, 6011, 334,
	-1000, -1000, -1000, -1000, -1000, -1000, 854, 8602, -1000, 810,
	621, 511, -1000, -1000, 5365, 416, 503, 213, 493, 831,
	-1000, 331, 331, 331, 9902, 331, 9902, 9902, 9902, 7429,
	9902, 831, -1000, -1000, -1000, -1000, -1000, -1000, 17, -1000,
	-1000, 476, -1000, 668, 9902, 467, -1000, -1000, -1000, -1000,
	803, 188, 801, -1000, -1000, -1000, -1000, -1000, -1000, 659,
	-1000, 657, -61, -1000, -1000, -1000, -1000, -1000, -1000, -8,
	421, -8, 378, -1000, 371, -1000, 3788, 4242, 3334, -1000,
	655, -1000, -1000, -1000, -1000, 813, -1000, 6427, 540, 540,
	-1000, -1000, -1000, -1000, 212, 416, 416, 648, 648, -1000,
	648, 654, -1000, 648, -13, 648, -14, 416, 416, 644,
	-78, -1000, 331, 6011, 851, 536, 800, -1000, 644, -1000,
	-1000, 662, 9902, 9902, -1000, -1000, 462, -1000, 454, 454,
	454, 254, -1000, -1000, -1000, -1000, 341, 9902, -1000, -1000,
	-1000, 452, 51, -1000, -1000, -1000, 463, 368, -1000, 230,
	-1000, 230, 459, 442, -1000, -1000, -1000, -1000, -1000, 9902,
	644, 540, 3561, -1000, -1000, -1000, -94, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6427, 416, 415, 331, 844,
	833, 874, -1000, 644, -1000, 658, 206, -1000, 9902, -1000,
	-1000, -1000, -1000, -1000, -1000, 332, -1000, -1000, 10266, -1000,
	439, -1000, -1000, -1000, -1000, -1000, 447, 23, -1000, -1000,
	-1000, 36, -1000, -1000, -1000, 6011, 6011, 10084, 511, 416,
	9902, -1000, -1000, 645, -1000, 633, 437, -1000, 9902, 416,
	93, -108, 331, 499, 479, -1000, -1000, 9902, -89, -1000,
	23, 777, -1000, 742, -87, -115, 435, -1000, -1000, 20,
	-1000, 740, -1000, 697, 18, -106, -1000, 697, 870, 644,
	-109, -1000, 196, 196, 6219, -116, -1000, -1000, -1000, 387,
	30, -1000, 1426, 416, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1131, 19, 662, 1130, 1129, 1126, 1125, 1122, 1121,
	1114, 1113, 1112, 1111, 1107, 1106, 1104, 1101, 1100, 1099,
	1098, 1094, 1093, 265, 1092, 1090, 1089, 54, 1088, 69,
	1087, 1085, 34, 53, 26, 32, 297, 1081, 24, 67,
	64, 1080, 44, 1076, 1075, 1074, 1073, 63, 1066, 1048,
	57, 1046, 1041, 11, 27, 1036, 1035, 1026, 1024, 49,
	486, 1023, 1012, 1007, 1005, 992, 991, 43, 3, 7,
	39, 9, 990, 95, 15, 989, 41, 982, 981, 979,
	977, 48, 976, 46, 973, 51, 50, 972, 40, 58,
	45, 22, 12, 145, 971, 37, 56, 970, 420, 969,
	153, 411, 967, 963, 962, 957, 23, 0, 864, 950,
	31, 956, 16, 955, 1338, 35, 70, 42, 954, 158,
	1231, 28, 953, 952, 25, 951, 949, 947, 946, 944,
	937, 76, 934, 8, 933, 21, 208, 387, 931, 930,
	77, 14, 929, 928, 924, 47, 62, 921, 30, 920,
	919, 916, 914, 18, 38, 52, 912, 910, 909, 4,
	10, 13, 904, 2, 903, 17, 901, 5, 898, 6,
	55, 74, 1, 897, 890, 375, 152, 888, 887, 184,
}
var yyR1 = [...]int{

	0, 173, 174, 174, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 3, 4, 4, 5, 5, 6,
	6, 26, 26, 7, 8, 8, 177, 177, 45, 45,
	89, 89, 9, 9, 122, 122, 10, 10, 10, 10,
	10, 10, 10, 169, 169, 168, 167, 167, 166, 166,
	165, 15, 15, 149, 150, 150, 150, 146, 152, 152,
	151, 151, 151, 151, 151, 151, 151, 151, 125, 125,
	125, 128, 128, 126, 126, 126, 126, 126, 126, 126,
	126, 127, 127, 127, 127, 127, 127, 129, 129, 129,
	129, 129, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 145, 145, 131,
	131, 140, 140, 141, 141, 141, 138, 138, 139, 139,
	142, 142, 132, 132, 132, 132, 132, 132, 132, 132,
	135, 135, 135, 134, 143, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	144, 144, 144, 144, 133, 147, 147, 147, 147, 147,
	147, 147, 157, 157, 157, 157, 158, 158, 159, 159,
	172, 172, 172, 172, 172, 156, 156, 156, 156, 156,
	156, 156, 148, 148, 161, 161, 160, 160, 160, 155,
	155, 155, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 171, 171, 171, 171, 171, 171, 171, 153,
	153, 153, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 164, 162, 162, 163, 163, 12, 13,
	13, 13, 13, 14, 14, 16, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 123,
	123, 123, 18, 18, 20, 20, 21, 22, 19, 19,
	19, 19, 19, 178, 23, 24, 24, 25, 25, 25,
	29, 29, 29, 27, 27, 28, 28, 34, 34, 33,
	33, 35, 35, 35, 35, 111, 111, 111, 110, 110,
	37, 37, 38, 38, 39, 39, 40, 40, 40, 52,
	52, 88, 88, 90, 90, 41, 41, 41, 41, 42,
	42, 43, 43, 44, 44, 118, 118, 117, 117, 117,
	116, 116, 46, 46, 46, 48, 47, 47, 47, 47,
	49, 49, 51, 51, 50, 50, 53, 53, 53, 53,
	54, 54, 36, 36, 36, 36, 36, 36, 36, 99,
	99, 56, 56, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 66, 66, 66, 66, 66, 66, 57,
	57, 57, 57, 57, 57, 57, 32, 32, 67, 67,
	67, 73, 68, 68, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 64, 64, 64, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 179, 179, 65,
	65, 65, 65, 30, 30, 30, 30, 30, 121, 121,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 77, 77, 31, 31, 75, 75, 76,
	78, 78, 74, 74, 74, 59, 59, 59, 59, 59,
	59, 59, 59, 61, 61, 61, 79, 79, 80, 80,
	81, 81, 82, 82, 83, 84, 84, 84, 85, 85,
	85, 85, 86, 86, 86, 58, 58, 58, 58, 58,
	58, 87, 87, 87, 87, 91, 91, 69, 69, 71,
	71, 70, 72, 92, 92, 95, 93, 93, 96, 96,
	94, 94, 94, 113, 113, 113, 97, 97, 100, 100,
	101, 101, 98, 98, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 103, 103, 103, 104, 104, 105,
	105, 105, 112, 108, 108, 109, 109, 114, 114, 115,
	115, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 175, 176, 119, 120, 120, 120,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 8, 8, 6, 1, 1, 1, 3,
	0, 4, 3, 4, 1, 1, 2, 5, 5, 8,
	4, 6, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 6, 4, 1, 3, 3, 3, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 4, 2,
	1, 4, 3, 3, 1, 0, 2, 3, 2, 3,
	3, 4, 3, 4, 3, 0, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 5, 6, 5, 5, 4,
	4, 10, 4, 3, 4, 4, 1, 2, 3, 3,
	1, 1, 2, 2, 2, 2, 3, 3, 2, 2,
	3, 3, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 1, 1, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 6, 7, 7, 12, 7, 7, 7, 4,
	5, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	5, 6, 5, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	3, 4, 2, 4, 2, 2, 2, 2, 3, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -173, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -20, -21, -22, -19,
	-3, -4, 6, -26, 8, 9, 29, -15, 110, 111,
	113, 112, 141, 114, 134, 48, 154, 155, 157, 158,
	24, 135, 136, 139, 140, -175, 7, 218, 52, -174,
	232, -81, 14, -25, 5, -23, -178, -23, -23, -23,
	-23, -149, 52, 209, -105, 118, 68, 149, 116, 122,
	-108, 231, -107, 224, 154, 165, 159, 186, 178, 176,
	179, 205, 63, 157, 137, 174, 170, 168, 26, 191,
	229, 169, 128, 127, 206, 163, 164, 190, 31, 226,
	33, 145, 189, 185, 188, 162, 184, 37, 204, 181,
	171, 17, 140, 143, 123, 147, 228, 167, 144, 139,
	158, 207, 36, 195, 161, 126, 155, 151, 152, 133,
	182, 146, 172, 173, 187, 160, 183, 156, 148, 141,
	196, 230, 180, 177, 153, 150, 200, 201, 202, 203,
	227, 175, 197, -98, 118, 120, 116, 116, 209, 117,
	118, 116, -50, -114, 231, -107, 118, 149, 116, 103,
	179, 110, 198, 117, 31, 147, -123, 116, 199, 150,
	200, 201, 202, 203, 231, 207, 206, -114, 156, -119,
	-119, -119, -119, -119, -2, -85, 16, 15, -5, -3,
	-175, 6, 19, 20, -29, 38, 39, -24, -98, -38,
	-39, -40, -41, -52, -73, -175, -50, 10, -45, -50,
	-93, -122, -96, 207, 206, -109, -94, -108, -106, 205,
	179, 204, 115, 69, 21, 23, 193, 72, 103, 15,
	73, 105, 219, 110, 46, 210, 212, 208, 209, 198,
	28, 9, 24, 135, 20, 97, 112, 76, 77, 138,
	22, 136, 67, 18, 49, 10, 12, 13, 121, 120,
	88, 117, 44, 7, 106, 25, 85, 40, 27, 42,
	86, 16, 213, 214, 30, 223, 142, 99, 47, 34,
	70, 65, 50, 68, 14, 45, 87, 113, 218, 43,
	6, 222, 29, 134, 41, 116, 199, 75, 119, 66,
	5, 122, 8, 48, 51, 215, 216, 217, 32, 74,
	11, 86, -150, -146, -74, -108, -114, 231, -107, -101,
	121, 117, -50, 218, -108, -101, 116, -50, -50, -100,
	121, -100, 231, -100, -50, 107, -50, 231, 29, 209,
	231, 147, 116, 148, 118, -120, -175, -109, -120, -120,
	-120, 152, 153, -120, -120, 50, -120, -176, 54, -86,
	18, 30, -36, -55, 70, -60, 28, 22, -59, -56,
	-74, -72, -73, 103, 104, 93, 94, 101, 71, 106,
	-64, -62, -63, -65, 56, 55, 64, 57, 58, 59,
	60, 65, 66, 67, -108, -114, -70, -175, 42, 43,
	219, 220, 223, 221, 73, 32, 208, 217, 216, 215,
	213, 211, 214, 210, 212, 121, 209, 99, 218, -82,
	-83, -36, -81, -2, -23, 34, -27, 20, 62, -51,
	25, -50, 29, 53, -46, -48, -47, -49, 40, 44,
	46, 41, 42, 43, 47, -118, 21, -38, -2, -175,
	-117, 143, -116, 21, -114, 56, -50, -177, 53, 10,
	51, 53, -93, 78, -113, -108, 56, 28, 29, -50,
	54, 53, -125, -128, -130, -129, -126, -127, 176, 177,
	103, 180, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 29, 137, 172, 173, 174, 175, 159, 160,
	161, 162, 163, 164, 165, 225, 167, 168, 169, 170,
	171, 107, 231, 70, 231, -120, 118, -169, 51, -50,
	-50, -120, 119, -50, 22, 231, 50, -50, -115, -114,
	-106, -120, -120, -120, -120, -120, -120, -120, -120, -120,
	-120, -50, 8, 88, 69, 68, 85, 53, 17, -36,
	-57, 88, 70, 86, 87, 72, 90, 89, 100, 93,
	94, 57, 95, 96, 97, 98, 99, 91, 92, 105,
	78, 79, 80, 81, 82, 83, 84, -99, -175, -73,
	-175, 108, 109, -60, -60, -60, -60, -60, -60, -60,
	-175, 107, -68, -36, -175, -175, -175, -175, -175, -175,
	-175, -77, -36, -175, -179, -175, -179, -179, -179, -179,
	-179, -179, -179, -179, -175, -175, -175, -175, 53, -84,
	23, 24, -85, -176, -29, -61, -108, 57, 60, -28,
	41, -89, 143, -50, -92, -95, -74, -39, -40, -40,
	-39, -40, 40, 40, 40, 45, 40, 45, 40, -47,
	-114, -176, -176, -2, -53, 48, 120, 49, -175, -116,
	-89, -38, -50, -96, -36, -137, 105, 54, -155, -154,
	193, 151, 28, -136, -137, 63, -171, 205, 179, 105,
	78, 231, 56, 57, -153, -109, -146, -147, -156, -157,
	123, 122, -148, 127, 126, 125, 117, 27, -152, -138,
	196, -131, 52, -131, -131, -131, -131, -136, 205, 179,
	-136, -136, -136, 52, 52, -131, -131, -131, -140, 52,
	230, -140, -140, -141, 52, -141, -109, -115, -106, -155,
	22, -112, 51, -50, -167, 227, -168, 231, 86, -102,
	115, 112, 113, -154, -164, 111, 193, 179, 63, 28,
	14, 219, 143, 230, 231, 144, -50, -120, -50, -120,
	36, -36, -36, -66, 65, 70, 66, 67, -36, -36,
	-60, -67, -70, -73, 61, 88, 86, 87, 72, -60,
	-60, -60, -60, -60, -60, -60, -60, -60, -60, -60,
	-60, -60, -60, -60, -121, 231, 56, 231, -59, -59,
	-108, -34, 20, -33, -35, 95, -36, -114, -109, 53,
	-176, -33, -33, -36, -36, -33, -27, -75, -76, 74,
	-108, -176, -33, -34, -33, -33, -83, -86, -97, 18,
	10, 32, 32, -33, -58, 29, 32, -2, -175, -175,
	-54, 53, 11, 78, -43, -42, 50, 51, -44, 50,
	-42, 40, 40, -176, 117, 117, 117, -90, -108, -54,
	-54, 231, 78, 56, 103, -154, 53, 57, 78, -171,
	-136, -137, -171, -171, 231, 78, 56, 29, 231, 56,
	57, 52, -112, 52, 27, -148, 231, 231, -148, -148,
	231, -151, -142, -132, -134, -143, -144, -133, -136, -137,
	65, 70, 28, 50, 193, 123, 27, 122, 63, -139,
	197, 57, -136, -136, -137, -137, -137, -137, -145, 56,
	-145, 57, -140, 57, 107, 50, -108, -120, -166, -165,
	-109, -50, -119, -170, 149, 124, 125, 128, 127, 231,
	117, 27, 123, 126, 143, 122, -170, 149, -103, -104,
	119, 21, 117, 27, 143, -120, 37, 65, 66, 67,
	-67, -60, -60, -60, -32, 138, 69, -176, -176, -33,
	53, -111, -110, 21, -108, 56, 107, -175, -36, -176,
	-176, 53, 51, 21, -176, -33, -78, -76, 76, -36,
	-176, -176, -176, -176, -176, -50, -37, 10, -91, 50,
	-92, -69, -71, -70, -175, -2, -87, -108, -90, -81,
	-95, -36, -36, -36, 52, -36, -175, -175, -175, -176,
	53, -81, 231, -154, 57, 231, 56, 231, 78, 56,
	103, -161, -160, -108, 52, -161, 231, 231, 231, 231,
	123, 122, 128, 65, 56, 57, 58, 65, -135, 211,
	64, 208, 8, 27, 27, 56, 54, -137, -137, 54,
	53, 54, 53, 54, 53, -109, -50, 53, 78, -119,
	-108, -119, -108, -50, -119, -108, -32, 69, -60, -60,
	-176, -35, -110, 95, -115, -34, -124, 103, 176, 137,
	174, 170, 190, 181, 195, 172, 196, -121, -124, 224,
	-81, 77, -36, 75, -54, -38, 26, -91, 53, -176,
	-176, -176, 53, 107, -176, -85, -88, -108, -88, -88,
	-88, -117, -108, -85, 231, 56, 54, 53, -131, 23,
	24, -161, 54, 27, -148, 27, 52, 52, -135, -136,
	56, -136, 57, 57, -120, -165, -153, 56, 57, 52,
	25, -60, 107, -176, -176, -131, -131, -131, -141, -131,
	164, -131, 164, -176, -176, -175, -31, 222, -36, -79,
	12, 27, -71, 32, -2, -175, -108, -108, 53, 54,
	-176, -176, -176, -53, -133, -112, -160, 54, 129, 54,
	57, 54, -137, -137, 54, 54, -88, -175, 95, -136,
	231, -60, -176, 56, -80, 13, 15, 8, -69, -2,
	107, -108, -133, -50, 54, 54, -162, -163, 143, -30,
	88, 227, -36, -68, -92, -176, -108, 52, -169, -176,
	53, -108, -176, 225, 47, 228, -161, -167, -163, 32,
	37, 226, 229, 54, 145, 37, -158, -159, 50, 146,
	227, -159, 9, 8, -175, 228, -172, 131, 130, 29,
	132, -172, -60, 142, 229, 65, 28, 133, -176, -176,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	520, 0, 293, 293, 293, 293, 293, 0, 589, 572,
	0, 0, 0, 0, 279, 283, 284, 0, 286, 287,
	774, 774, 774, 774, 774, 0, 31, 32, 772, 1,
	3, 528, 0, 0, 297, 300, 295, 572, 0, 0,
	0, 46, 0, 570, 0, 762, 0, 763, 570, 590,
	591, 593, 594, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 764, 765, 766, 767, 768,
	769, 770, 771, 0, 0, 573, 0, 568, 568, 0,
	568, 0, 254, 364, 597, 598, 762, 763, 0, 0,
	0, 0, 775, 775, 775, 775, 0, 775, 775, 272,
	274, 275, 276, 277, 775, 280, 281, 282, 285, 288,
	289, 290, 291, 292, 25, 532, 0, 0, 520, 27,
	0, 293, 298, 299, 303, 301, 302, 294, 0, 0,
	322, 324, 325, 326, 345, 0, 347, 0, 0, 38,
	42, 0, 556, -2, -2, 0, 0, 595, 596, -2,
	697, -2, 601, 602, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 0, 0, 64, 0, 502, 0, -2, -2, 0,
	0, 0, 775, 0, 53, 0, 0, 775, 0, 0,
	0, 0, 0, 0, 253, 0, 255, 775, 775, 775,
	775, 775, 775, 775, 775, 264, 776, 777, 265, 266,
	267, 775, 775, 269, 270, 0, 278, 26, 773, 21,
	0, 0, 529, 372, 0, 377, 379, 0, 414, 415,
	416, 417, 418, 0, 0, 0, 0, 0, 0, 0,
	442, 443, 444, 445, 505, 506, 507, 508, 509, 510,
	511, 512, 381, 382, 502, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 493, 0, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 0, 0, 0, 0, 521,
	522, 525, 528, 25, 300, 0, 305, 304, 296, 40,
	0, 363, 0, 0, 0, 0, 0, 0, 352, 0,
	0, 355, 0, 0, 0, 0, 346, 0, 25, 0,
	366, 730, 348, 0, 350, 351, 40, 0, 0, 36,
	37, 0, 43, 0, 155, 563, 564, 565, 561, 0,
	145, 0, 68, 126, 79, 80, 119, 82, 119, 119,
	119, 119, 145, 145, 145, 145, 110, 111, 112, 113,
	114, 0, 0, 97, 119, 119, 119, 101, 83, 84,
	85, 86, 87, 88, 89, 90, 121, 121, 121, 123,
	123, 0, 145, 0, 0, 50, 0, 56, 0, 61,
	145, 229, 0, 249, 569, 775, 0, 775, 365, 599,
	600, 256, 257, 258, 259, 260, 261, 262, 263, 268,
	271, 273, 533, 0, 0, 0, 0, 0, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 424, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 400, 401, 402, 403, 404, 405, 378, 0, 392,
	0, 0, 0, 435, 436, 437, 438, 439, 440, 0,
	307, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	303, 0, 494, 0, 458, 0, 459, 460, 461, 462,
	463, 464, 465, 466, 0, 307, 0, 0, 0, 524,
	526, 527, 532, 28, 303, 0, 513, 0, 0, 0,
	306, 0, 0, 362, 370, 553, 0, 323, 341, 343,
	0, 338, 353, 354, 356, 0, 358, 0, 360, 361,
	327, 328, 411, 25, 329, 0, 0, 0, 0, 349,
	370, 370, 39, 557, 558, 559, 0, 47, 63, 199,
	605, 744, 145, 206, 207, 699, 210, 698, 697, 610,
	0, 215, 216, 217, 218, 219, 65, 66, 0, 0,
	731, 0, 0, 710, 742, 0, 192, 193, 67, 128,
	127, 81, 0, 145, 145, 104, 105, 155, 0, 0,
	155, 155, 155, 0, 0, 98, 99, 100, 91, 0,
	121, 93, 94, 95, 0, 96, 503, 0, -2, 48,
	571, 0, 0, 775, 52, 0, 54, 55, 0, 774,
	601, 625, -2, 230, 231, 574, -2, -2, 577, -2,
	-2, -2, -2, -2, 215, 735, 248, 250, 775, 252,
	0, 373, 374, 376, 393, 0, 395, 397, 530, 531,
	383, 384, 408, 409, 410, 0, 0, 0, 0, 406,
	388, 0, 419, 420, 421, 422, 423, 425, 426, 427,
	428, 429, 430, 431, 434, 478, 479, 0, 432, 433,
	441, 0, 0, 308, 309, 311, 315, 0, 503, 0,
	551, 0, 0, 0, 0, 0, 0, 500, 497, 0,
	0, 468, 0, 0, 0, 0, 523, 22, 0, 566,
	567, 514, 515, 320, 545, 0, 0, -2, 0, 0,
	520, 0, 0, 0, 335, 342, 0, 0, 336, 0,
	337, 357, 359, -2, 0, 0, 0, 0, 333, 520,
	35, 156, 0, 158, 159, 200, 145, 202, 0, 204,
	205, 208, 209, 211, 146, 0, 148, 0, 212, 213,
	214, 0, 0, 0, 185, 0, 188, 189, 0, 0,
	0, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	130, 0, 0, 0, 144, 0, 161, 163, 0, 78,
	129, 0, 155, 155, 106, 107, 108, 109, 0, 117,
	0, 0, 92, 0, 0, 0, 592, 51, 57, 58,
	0, 62, 222, 774, 0, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 774, 0, 0, 774,
	585, 586, 587, 588, 0, 251, 534, 394, 396, 398,
	385, 406, 389, 0, 386, 0, 0, 380, 446, 0,
	0, 312, 316, 0, 318, 319, 0, 307, 413, 449,
	450, 0, 0, 0, 0, 520, 0, 498, 0, 0,
	457, 469, 470, 471, 472, 23, 370, 0, 29, 0,
	545, 535, 547, 549, 0, 25, 0, 541, 0, 528,
	554, 371, 555, 339, 0, 344, 0, 0, 0, 347,
	0, 528, 157, 201, 203, 147, 149, 150, 0, 152,
	154, 0, 194, 119, 0, 0, 186, 187, 190, 191,
	0, 173, 0, 131, 132, 133, 134, 135, 136, 137,
	139, 140, 0, 160, 162, 164, 120, 102, 103, 145,
	0, 145, 0, 124, 0, 504, 775, 0, 0, 223,
	0, 224, 226, 227, 228, 0, 387, 0, 407, 390,
	447, 310, 317, 313, 0, 0, 0, 119, 119, 483,
	119, 123, 486, 119, 488, 119, 491, 0, 0, 0,
	495, 456, 501, 0, 516, 321, 0, 30, 0, 550,
	-2, 0, 0, 0, 41, 33, 0, 331, 0, 0,
	0, 366, 334, 34, 151, 153, 169, 0, 196, 197,
	198, 0, 170, 172, 174, 175, 0, 0, 143, 155,
	118, 155, 0, 0, 49, 59, 60, 220, 221, 0,
	0, 391, 0, 448, 451, 480, 145, 484, 485, 487,
	489, 490, 492, 453, 452, 0, 0, 0, 499, 518,
	0, 0, 548, 0, -2, 0, 543, 542, 0, 340,
	367, 368, 369, 330, 165, 167, 195, 168, 0, 138,
	0, 142, 115, 116, 122, 125, 0, 0, 314, 481,
	482, 473, 455, 496, 24, 0, 0, 0, 538, 25,
	0, 332, 166, 0, 141, 53, 0, 244, 0, 0,
	0, 0, 519, 517, 546, -2, 544, 0, 56, 243,
	0, 0, 454, 0, 0, 0, 0, 225, 245, 0,
	474, 0, 477, 0, 0, 475, 171, 176, 0, 0,
	0, 177, 0, 0, 0, 0, 178, 180, 181, 0,
	0, 179, 0, 0, 476, 182, 184, 183, 246, 247,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	52, 54, 95, 93, 53, 94, 107, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 232,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 106, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:302
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:307
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:308
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:312
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:334
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:342
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:346
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:354
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:360
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:364
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:381
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:393
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:421
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:425
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:439
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:444
		{
			yyVAL.partitions = nil
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:448
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.str = SessionStr
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
			yyVAL.str = GlobalStr
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:474
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = yyDollar[1].ddl
			yyDollar[1].ddl.Table = yyDollar[4].tableName
			yyDollar[1].ddl.LikeTable = yyDollar[4].tableName
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &DDL{Action: CreateDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}, TableSpec: &TableSpec{Option: yyDollar[5].TableOption}}
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:489
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:511
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:521
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:526
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:542
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:554
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:559
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName, Table: yyDollar[6].tableName, LikeTable: yyDollar[6].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Option = yyDollar[4].TableOption
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:578
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:588
		{

			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colName.Name, Type: yyDollar[2].columnType, options: yyDollar[3].columnOptions}
			yyVAL.columnDefinition.mergeOptions()
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:595
		{
			yyVAL.columnOptions = []columnOption{}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:599
		{
			yyVAL.columnOptions = append(yyDollar[1].columnOptions, yyDollar[2].columnOption)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:605
		{
			yyVAL.columnOption = columnOption{key: "null_opt", value: yyDollar[1].boolVal}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:609
		{
			yyVAL.columnOption = columnOption{key: "column_default_opt", value: yyDollar[1].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:613
		{
			yyVAL.columnOption = columnOption{key: "on_update_opt", value: yyDollar[1].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.columnOption = columnOption{key: "auto_increment_opt", value: yyDollar[1].boolVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:621
		{
			yyVAL.columnOption = columnOption{key: "column_key_opt", value: yyDollar[1].colKeyOpt}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:625
		{
			yyVAL.columnOption = columnOption{key: "column_comment_opt", value: yyDollar[1].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.columnOption = columnOption{key: "charset_opt", value: yyDollar[1].str}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.columnOption = columnOption{key: "collate_opt", value: yyDollar[1].str}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:657
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:830
		{
			yyVAL.optVal = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:834
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:839
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:843
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:851
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:861
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:869
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:878
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:899
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:907
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:923
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:927
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:937
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:941
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:949
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:960
		{
			yyVAL.str = ""
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:964
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:968
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:972
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:976
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:980
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:984
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:988
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:992
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:996
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1001
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1047
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1051
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1055
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1059
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[4].indexColumns, Using: yyDollar[2].colIdent}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1063
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1067
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1071
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
			yyVAL.indexDefinition.ReferencesTable = yyDollar[6].tableName
			yyVAL.indexDefinition.ReferencesColumns = yyDollar[8].indexColumns
			yyVAL.indexDefinition.ReferencesOption = yyDollar[10].ForeignOption

		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1082
		{
			yyVAL.indexInfo = &IndexInfo{Type: "PRIMARY", Name: NewColIdent(string(yyDollar[2].bytes)), Primary: true}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexInfo = &IndexInfo{Type: "UNIQUE", Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexInfo = &IndexInfo{Type: "UNIQUE", Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexInfo = &IndexInfo{Type: "FOREIGN", Name: NewColIdent(string(yyDollar[2].bytes)), Foreign: true}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.ForeignOption = yyDollar[1].ForeignOption
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.ForeignOption = yyDollar[1].ForeignOption.Merge(yyDollar[2].ForeignOption)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1113
		{
			yyVAL.ForeignOption = ForeignOption{OnUpdate: yyDollar[3].bytes}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1117
		{
			yyVAL.ForeignOption = ForeignOption{OnDelete: yyDollar[3].bytes}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1124
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1195
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1205
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1209
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.TableOption = yyDollar[1].TableOption
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1219
		{
			yyVAL.TableOption = yyDollar[1].TableOption.Merge(yyDollar[2].TableOption)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.TableOption = yyDollar[1].TableOption.Merge(yyDollar[3].TableOption)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.TableOption = TableOption{AutoIncrement: IntegerPtr(yyDollar[2].bytes)}

		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1237
		{
			yyVAL.TableOption = TableOption{AutoIncrement: IntegerPtr(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.TableOption = TableOption{Engine: yyDollar[2].bytes}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1245
		{
			yyVAL.TableOption = TableOption{Charset: []byte(yyDollar[2].str)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.TableOption = TableOption{Charset: []byte(yyDollar[1].str)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.TableOption = TableOption{Collate: []byte(yyDollar[1].str)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.TableOption = TableOption{Collate: []byte(yyDollar[2].str)}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			yyVAL.TableOption = TableOption{Comment: yyDollar[2].bytes}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1265
		{
			yyVAL.TableOption = TableOption{Common: yyDollar[1].bytes}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1269
		{
			yyVAL.TableOption = TableOption{Common: append(append(yyDollar[1].bytes, '='), yyDollar[2].bytes...)}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1324
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1345
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1355
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1360
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, Option: yyDollar[5].TableOption}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1392
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1398
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1402
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1408
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1412
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1424
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &DDL{Action: DropDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1436
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1441
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropViewStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1567
		{
			yyVAL.str = ""
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.str = SessionStr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1575
		{
			yyVAL.str = GlobalStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &Begin{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1595
		{
			yyVAL.statement = &Begin{}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Commit{}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Rollback{}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &OtherRead{}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &OtherRead{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1634
		{
			setAllowComments(yylex, true)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1638
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1644
		{
			yyVAL.bytes2 = nil
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1648
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.str = UnionStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1658
		{
			yyVAL.str = UnionAllStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.str = UnionDistinctStr
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1667
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = SQLCacheStr
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1680
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.str = DistinctStr
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = StraightJoinHint
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1698
		{
			yyVAL.selectExprs = nil
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1708
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1712
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1718
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1726
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1730
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1735
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1743
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1755
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1759
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1769
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1779
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1783
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1793
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1797
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1803
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1807
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1817
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1830
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1834
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1838
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1848
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1850
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1854
		{
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1860
		{
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1862
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1865
		{
			yyVAL.empty = struct{}{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.empty = struct{}{}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1870
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1874
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1878
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = JoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = JoinStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = JoinStr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1905
		{
			yyVAL.str = StraightJoinStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = LeftJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.str = LeftJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = RightJoinStr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = RightJoinStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1929
		{
			yyVAL.str = NaturalJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1933
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1943
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1957
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1962
		{
			yyVAL.indexHints = nil
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1966
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1970
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1974
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1979
		{
			yyVAL.expr = nil
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1983
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1989
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1993
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2001
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = IsNullStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = IsNotNullStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = IsTrueStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = IsNotTrueStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = IsFalseStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2101
		{
			yyVAL.str = IsNotFalseStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.str = EqualStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = LessThanStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = GreaterThanStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = LessEqualStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = GreaterEqualStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = NotEqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2136
		{
			yyVAL.expr = nil
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2140
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: NewIntVal(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2268
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2276
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 454:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 455:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("now")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2444
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.str = BooleanModeStr
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2452
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2456
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2460
		{
			yyVAL.str = QueryExpansionStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2466
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2476
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2480
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2484
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2488
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2540
		{
			yyVAL.str = string("")
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2544
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2554
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2560
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = nil
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2579
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2583
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &NullVal{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2641
		{
			yyVAL.exprs = nil
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2645
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2659
		{
			yyVAL.orderBy = nil
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2663
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2669
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2673
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2679
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2684
		{
			yyVAL.str = AscScr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = DescScr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2697
		{
			yyVAL.limit = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2701
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2705
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2709
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = ForUpdateStr
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = ShareModeStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2743
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2748
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2752
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2756
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2763
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2767
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2771
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2775
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2780
		{
			yyVAL.updateExprs = nil
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2784
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2794
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2800
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2804
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2830
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2836
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2846
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2852
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2856
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			yyVAL.bytes = []byte("charset")
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &Default{}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2887
		{
			yyVAL.byt = 0
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2889
		{
			yyVAL.byt = 1
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2892
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2894
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2897
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.str = IgnoreStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2911
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2917
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2924
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2928
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2937
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2966
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2970
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			decNesting(yylex)
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3191
		{
			forceEOF(yylex)
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3196
		{
			forceEOF(yylex)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			forceEOF(yylex)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3204
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
