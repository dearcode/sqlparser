// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnOption      columnOption
	columnOptions     []columnOption
	TableOption       TableOption
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	ForeignOptionList []ForeignOption
	ForeignOption     ForeignOption
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const BIT_LITERAL = 57403
const NULL = 57404
const TRUE = 57405
const FALSE = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const BINARY = 57429
const UNDERSCORE_BINARY = 57430
const COLLATE = 57431
const INTERVAL = 57432
const JSON_EXTRACT_OP = 57433
const JSON_UNQUOTE_EXTRACT_OP = 57434
const CREATE = 57435
const ALTER = 57436
const DROP = 57437
const RENAME = 57438
const ANALYZE = 57439
const ADD = 57440
const MODIFY = 57441
const TABLE = 57442
const INDEX = 57443
const VIEW = 57444
const TO = 57445
const IGNORE = 57446
const IF = 57447
const UNIQUE = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const SPATIAL = 57452
const FULLTEXT = 57453
const FOREIGN = 57454
const REFERENCES = 57455
const CASCADE = 57456
const RESTRICT = 57457
const NO = 57458
const ACTION = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const ENGINE = 57477
const STATUS = 57478
const VARIABLES = 57479
const BEGIN = 57480
const START = 57481
const TRANSACTION = 57482
const COMMIT = 57483
const ROLLBACK = 57484
const BIT = 57485
const TINYINT = 57486
const SMALLINT = 57487
const MEDIUMINT = 57488
const INT = 57489
const INTEGER = 57490
const BIGINT = 57491
const INTNUM = 57492
const REAL = 57493
const DOUBLE = 57494
const FLOAT_TYPE = 57495
const DECIMAL = 57496
const NUMERIC = 57497
const TIME = 57498
const TIMESTAMP = 57499
const DATETIME = 57500
const YEAR = 57501
const CHAR = 57502
const VARCHAR = 57503
const BOOL = 57504
const CHARACTER = 57505
const VARBINARY = 57506
const NCHAR = 57507
const TEXT = 57508
const TINYTEXT = 57509
const MEDIUMTEXT = 57510
const LONGTEXT = 57511
const BLOB = 57512
const TINYBLOB = 57513
const MEDIUMBLOB = 57514
const LONGBLOB = 57515
const JSON = 57516
const ENUM = 57517
const NULLX = 57518
const AUTO_INCREMENT = 57519
const APPROXNUM = 57520
const SIGNED = 57521
const UNSIGNED = 57522
const ZEROFILL = 57523
const DATABASES = 57524
const TABLES = 57525
const VITESS_KEYSPACES = 57526
const VITESS_SHARDS = 57527
const VITESS_TABLETS = 57528
const VSCHEMA_TABLES = 57529
const NAMES = 57530
const CHARSET = 57531
const GLOBAL = 57532
const SESSION = 57533
const CURRENT_TIMESTAMP = 57534
const DATABASE = 57535
const CURRENT_DATE = 57536
const NOW = 57537
const CURRENT_TIME = 57538
const LOCALTIME = 57539
const LOCALTIMESTAMP = 57540
const UTC_DATE = 57541
const UTC_TIME = 57542
const UTC_TIMESTAMP = 57543
const REPLACE = 57544
const CONVERT = 57545
const CAST = 57546
const GROUP_CONCAT = 57547
const SEPARATOR = 57548
const MATCH = 57549
const AGAINST = 57550
const BOOLEAN = 57551
const LANGUAGE = 57552
const WITH = 57553
const QUERY = 57554
const EXPANSION = 57555
const UNUSED = 57556
const ID = 57557

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"BINARY",
	"UNDERSCORE_BINARY",
	"COLLATE",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"REFERENCES",
	"CASCADE",
	"RESTRICT",
	"NO",
	"ACTION",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"ENGINE",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ID",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 223,
	78, 739,
	-2, 44,
	-1, 224,
	78, 712,
	-2, 45,
	-1, 229,
	78, 699,
	-2, 561,
	-1, 231,
	78, 726,
	-2, 563,
	-1, 327,
	107, 598,
	-2, 594,
	-1, 328,
	107, 599,
	-2, 595,
	-1, 738,
	107, 601,
	-2, 597,
	-1, 753,
	17, 585,
	26, 585,
	31, 585,
	33, 585,
	36, 585,
	37, 585,
	63, 585,
	119, 585,
	124, 585,
	127, 585,
	128, 585,
	129, 585,
	134, 585,
	138, 585,
	140, 585,
	141, 585,
	142, 585,
	144, 585,
	145, 585,
	146, 585,
	147, 585,
	148, 585,
	149, 585,
	150, 585,
	151, 585,
	152, 585,
	153, 585,
	154, 585,
	155, 585,
	156, 585,
	157, 585,
	158, 585,
	159, 585,
	160, 585,
	161, 585,
	162, 585,
	163, 585,
	164, 585,
	165, 585,
	166, 585,
	168, 585,
	169, 585,
	170, 585,
	171, 585,
	172, 585,
	173, 585,
	174, 585,
	175, 585,
	176, 585,
	177, 585,
	178, 585,
	179, 585,
	180, 585,
	181, 585,
	182, 585,
	183, 585,
	184, 585,
	185, 585,
	186, 585,
	187, 585,
	188, 585,
	189, 585,
	190, 585,
	191, 585,
	192, 585,
	196, 585,
	197, 585,
	198, 585,
	201, 585,
	202, 585,
	203, 585,
	204, 585,
	205, 585,
	206, 585,
	207, 585,
	208, 585,
	225, 585,
	227, 585,
	228, 585,
	229, 585,
	230, 585,
	231, 585,
	232, 585,
	-2, 667,
	-1, 757,
	1, 576,
	233, 576,
	-2, 606,
	-1, 758,
	1, 577,
	233, 577,
	-2, 698,
	-1, 760,
	1, 145,
	233, 145,
	-2, 620,
	-1, 761,
	1, 580,
	233, 580,
	-2, 664,
	-1, 762,
	1, 581,
	233, 581,
	-2, 612,
	-1, 763,
	1, 582,
	233, 582,
	-2, 731,
	-1, 764,
	1, 583,
	233, 583,
	-2, 759,
	-1, 848,
	5, 25,
	-2, 537,
	-1, 864,
	5, 26,
	-2, 412,
	-1, 1123,
	5, 26,
	-2, 538,
	-1, 1187,
	5, 25,
	-2, 540,
	-1, 1238,
	5, 26,
	-2, 541,
}

const yyPrivate = 57344

const yyLast = 10480

var yyAct = [...]int{

	328, 1269, 1260, 1043, 1230, 527, 908, 744, 1013, 1129,
	602, 1014, 380, 733, 644, 664, 1044, 694, 1060, 940,
	741, 195, 406, 458, 3, 460, 851, 1099, 1010, 72,
	805, 984, 382, 165, 216, 737, 165, 228, 457, 51,
	976, 679, 829, 645, 812, 815, 702, 369, 868, 929,
	856, 728, 430, 436, 378, 782, 678, 323, 944, 165,
	165, 72, 641, 222, 462, 446, 165, 162, 72, 194,
	211, 571, 204, 1138, 1041, 324, 50, 210, 1051, 874,
	890, 891, 807, 814, 711, 1038, 874, 1050, 1049, 719,
	707, 214, 1048, 352, 219, 354, 1040, 209, 887, 1034,
	332, 873, 1233, 567, 566, 577, 578, 569, 570, 572,
	573, 574, 575, 576, 568, 718, 901, 898, 808, 579,
	886, 1042, 747, 535, 351, 353, 875, 524, 522, 347,
	686, 729, 342, 1277, 1255, 1268, 1248, 1247, 1263, 745,
	1254, 1213, 1112, 1180, 333, 502, 220, 1063, 157, 159,
	160, 719, 921, 710, 1175, 165, 676, 165, 1056, 1057,
	1058, 1173, 165, 188, 339, 1257, 1062, 1059, 1262, 165,
	1280, 1231, 966, 72, 72, 72, 72, 718, 72, 72,
	55, 706, 642, 614, 1201, 72, 349, 361, 362, 337,
	340, 338, 1053, 1052, 330, 154, 344, 155, 1054, 665,
	667, 155, 532, 346, 57, 58, 59, 60, 350, 165,
	526, 867, 866, 865, 331, 1272, 165, 165, 165, 490,
	336, 707, 72, 168, 433, 189, 156, 72, 1223, 963,
	684, 719, 591, 592, 1165, 965, 1126, 988, 432, 935,
	601, 158, 1234, 441, 521, 345, 676, 553, 214, 1137,
	1039, 748, 466, 556, 503, 872, 889, 718, 806, 554,
	1080, 1037, 872, 854, 1055, 473, 1114, 190, 191, 192,
	193, 830, 666, 571, 885, 556, 508, 509, 510, 511,
	512, 513, 514, 683, 516, 517, 518, 519, 520, 504,
	505, 506, 507, 488, 489, 897, 952, 491, 817, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 558,
	730, 1063, 706, 878, 1061, 789, 1246, 1271, 1270, 1273,
	523, 579, 165, 341, 571, 343, 964, 919, 962, 787,
	788, 786, 1279, 72, 879, 742, 165, 165, 72, 329,
	165, 994, 515, 993, 165, 557, 165, 919, 72, 72,
	72, 72, 72, 72, 72, 72, 479, 438, 555, 554,
	555, 554, 72, 72, 571, 1156, 165, 568, 472, 1278,
	529, 530, 579, 995, 533, 556, 1155, 556, 537, 407,
	45, 538, 434, 540, 555, 554, 830, 951, 1000, 630,
	631, 1116, 956, 953, 946, 947, 954, 949, 948, 153,
	551, 556, 572, 573, 574, 575, 576, 568, 335, 1216,
	589, 1036, 579, 955, 555, 554, 969, 970, 971, 959,
	555, 554, 775, 777, 778, 45, 1204, 776, 934, 1203,
	48, 556, 932, 200, 555, 554, 72, 556, 215, 785,
	922, 165, 367, 1153, 165, 165, 165, 165, 165, 1067,
	930, 556, 1140, 1256, 632, 646, 165, 208, 1243, 368,
	165, 1191, 1228, 368, 165, 1227, 917, 913, 165, 165,
	1140, 1200, 72, 1191, 368, 643, 214, 214, 214, 214,
	214, 72, 404, 663, 1191, 1192, 1140, 1145, 1208, 914,
	1140, 1139, 214, 52, 324, 372, 431, 1207, 375, 1202,
	214, 950, 919, 672, 911, 1011, 671, 634, 852, 912,
	1068, 70, 1032, 368, 853, 648, 649, 1009, 651, 677,
	659, 647, 852, 72, 650, 1125, 368, 165, 669, 670,
	820, 72, 982, 165, 735, 673, 72, 165, 72, 696,
	982, 368, 469, 227, 676, 325, 1076, 1075, 1072, 1073,
	334, 853, 356, 356, 356, 356, 443, 356, 356, 738,
	982, 743, 918, 916, 356, 1072, 1071, 767, 1121, 731,
	732, 769, 754, 713, 714, 715, 716, 820, 368, 739,
	45, 443, 368, 470, 783, 468, 22, 481, 480, 725,
	726, 727, 22, 852, 784, 459, 20, 1142, 1143, 443,
	72, 616, 617, 618, 619, 620, 621, 622, 623, 846,
	442, 1079, 847, 22, 72, 1074, 357, 982, 1186, 719,
	395, 394, 397, 398, 399, 400, 712, 48, 663, 396,
	401, 471, 48, 915, 443, 742, 892, 201, 48, 738,
	628, 1240, 712, 734, 1162, 718, 809, 810, 1150, 1149,
	199, 1046, 1026, 729, 894, 227, 227, 227, 227, 48,
	227, 227, 857, 858, 827, 848, 724, 227, 723, 72,
	834, 62, 528, 559, 742, 1261, 1011, 225, 936, 72,
	838, 837, 72, 48, 860, 536, 72, 72, 365, 822,
	823, 656, 863, 826, 654, 862, 657, 870, 871, 655,
	658, 861, 452, 453, 227, 675, 603, 640, 833, 475,
	835, 836, 356, 612, 653, 652, 1258, 356, 1253, 893,
	876, 205, 206, 844, 968, 571, 771, 356, 356, 356,
	356, 356, 356, 356, 356, 1252, 843, 842, 437, 888,
	72, 356, 356, 72, 72, 478, 72, 370, 896, 165,
	899, 900, 435, 348, 1184, 1148, 588, 590, 1146, 371,
	72, 569, 570, 572, 573, 574, 575, 576, 568, 1066,
	72, 1065, 674, 579, 931, 895, 717, 720, 721, 722,
	1119, 876, 933, 942, 600, 1163, 740, 604, 605, 606,
	607, 608, 609, 610, 534, 613, 615, 615, 615, 615,
	615, 615, 615, 615, 615, 624, 625, 626, 627, 783,
	957, 958, 880, 456, 437, 227, 883, 884, 72, 784,
	227, 202, 203, 215, 215, 215, 215, 215, 196, 1219,
	227, 227, 227, 227, 227, 227, 227, 227, 225, 459,
	165, 668, 972, 197, 227, 227, 52, 215, 1218, 1183,
	72, 72, 841, 772, 773, 853, 779, 780, 1220, 646,
	840, 1012, 1266, 1265, 1064, 646, 552, 54, 56, 467,
	1015, 999, 49, 1017, 1007, 1, 633, 746, 72, 939,
	755, 1229, 593, 594, 595, 596, 597, 598, 599, 1259,
	883, 1021, 699, 72, 698, 72, 1022, 981, 1047, 1020,
	661, 662, 708, 603, 902, 322, 824, 825, 1100, 61,
	1033, 997, 697, 882, 907, 356, 906, 356, 636, 1035,
	903, 920, 709, 905, 904, 325, 484, 431, 448, 451,
	452, 453, 449, 485, 450, 454, 72, 165, 483, 910,
	487, 486, 482, 1102, 176, 221, 72, 455, 925, 474,
	983, 926, 927, 928, 227, 64, 961, 960, 749, 587,
	72, 165, 839, 227, 325, 226, 881, 72, 1018, 629,
	45, 1078, 429, 1217, 1182, 943, 1104, 998, 1108, 611,
	1103, 828, 1101, 381, 604, 774, 72, 1106, 393, 390,
	392, 882, 909, 391, 635, 1086, 1105, 923, 924, 845,
	560, 1107, 1109, 379, 227, 227, 373, 213, 439, 447,
	165, 952, 445, 227, 1089, 444, 218, 1095, 227, 859,
	227, 849, 850, 1111, 1097, 1110, 738, 72, 1094, 72,
	72, 72, 165, 72, 1098, 1117, 855, 1113, 1131, 1132,
	1133, 1120, 214, 1128, 881, 821, 212, 72, 1118, 1008,
	1144, 1179, 1232, 639, 23, 1136, 53, 1134, 832, 781,
	207, 18, 790, 791, 792, 793, 794, 795, 796, 797,
	17, 798, 799, 800, 801, 802, 803, 804, 16, 72,
	72, 72, 811, 1151, 227, 19, 15, 14, 225, 13,
	27, 12, 11, 10, 9, 8, 831, 695, 1159, 1158,
	1147, 7, 951, 6, 5, 4, 864, 956, 953, 946,
	947, 954, 949, 948, 198, 21, 2, 0, 1171, 990,
	0, 0, 0, 356, 0, 0, 72, 72, 955, 1001,
	1141, 0, 0, 1185, 945, 0, 0, 0, 736, 695,
	0, 72, 0, 0, 1015, 0, 1197, 695, 1187, 356,
	1196, 869, 1023, 1024, 1069, 1070, 1025, 1199, 0, 1027,
	1198, 227, 0, 72, 227, 0, 72, 0, 227, 227,
	1081, 0, 1209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 1084, 1168, 1169, 1087, 1170, 0,
	0, 1172, 72, 1174, 0, 1221, 0, 0, 0, 989,
	0, 0, 165, 0, 0, 1225, 0, 0, 0, 1015,
	0, 0, 1222, 0, 0, 0, 950, 0, 819, 0,
	0, 0, 227, 0, 72, 937, 227, 1016, 227, 45,
	1236, 355, 72, 646, 1241, 1237, 1226, 0, 0, 0,
	0, 72, 227, 0, 1249, 1028, 1029, 1030, 1251, 1250,
	0, 979, 227, 0, 0, 980, 0, 0, 0, 0,
	0, 0, 0, 1264, 0, 991, 992, 952, 1274, 996,
	0, 0, 0, 0, 1002, 0, 1003, 1004, 1005, 1006,
	0, 405, 0, 0, 0, 0, 973, 974, 975, 0,
	0, 0, 0, 0, 0, 695, 0, 0, 695, 1115,
	986, 0, 695, 695, 0, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 163, 603, 0, 187, 0, 0,
	448, 451, 452, 453, 449, 0, 450, 454, 0, 325,
	857, 858, 1019, 869, 0, 325, 0, 0, 0, 0,
	163, 163, 0, 0, 326, 0, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 1152, 695, 1154, 951, 0,
	227, 0, 941, 956, 953, 946, 947, 954, 949, 948,
	0, 0, 0, 0, 0, 1045, 695, 1045, 0, 0,
	0, 0, 0, 1205, 955, 1206, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 359, 360, 0, 363,
	364, 0, 0, 0, 0, 1181, 366, 0, 227, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 163, 0,
	0, 0, 1085, 163, 0, 571, 0, 0, 0, 1088,
	163, 0, 0, 1212, 0, 0, 0, 0, 356, 1122,
	1123, 1124, 0, 1127, 0, 0, 0, 0, 986, 0,
	0, 227, 950, 0, 0, 0, 1091, 1092, 566, 577,
	578, 569, 570, 572, 573, 574, 575, 576, 568, 0,
	163, 0, 1178, 579, 695, 0, 571, 163, 464, 163,
	0, 1016, 0, 0, 1188, 0, 0, 0, 0, 1130,
	0, 1130, 1130, 1130, 0, 1135, 0, 1235, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	577, 578, 569, 570, 572, 573, 574, 575, 576, 568,
	0, 1166, 1167, 1210, 579, 0, 0, 0, 0, 0,
	0, 0, 1077, 1176, 1177, 22, 46, 24, 25, 0,
	0, 227, 227, 227, 525, 0, 1016, 0, 45, 531,
	0, 0, 0, 40, 1193, 1194, 1195, 0, 26, 541,
	542, 543, 544, 545, 546, 547, 548, 0, 0, 1164,
	0, 0, 0, 549, 550, 0, 571, 35, 0, 0,
	0, 48, 0, 163, 0, 819, 0, 0, 1189, 1190,
	0, 0, 0, 0, 0, 174, 0, 163, 163, 0,
	0, 163, 1215, 1045, 0, 163, 0, 539, 567, 566,
	577, 578, 569, 570, 572, 573, 574, 575, 576, 568,
	0, 0, 1267, 0, 579, 1130, 0, 163, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
	29, 31, 30, 33, 0, 1238, 0, 0, 0, 0,
	0, 0, 1242, 0, 1224, 1245, 0, 1214, 977, 0,
	0, 0, 0, 0, 34, 41, 42, 169, 0, 43,
	44, 32, 0, 0, 171, 0, 941, 695, 0, 0,
	0, 177, 173, 325, 36, 37, 1239, 38, 39, 0,
	0, 0, 0, 0, 1244, 0, 0, 0, 1281, 1282,
	0, 0, 163, 1045, 326, 163, 163, 163, 163, 163,
	0, 0, 175, 0, 0, 179, 0, 660, 0, 0,
	0, 163, 0, 0, 0, 464, 0, 0, 0, 163,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 170, 0, 1275, 768, 47, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1077, 172, 178, 180, 181, 182, 183, 0,
	0, 186, 185, 0, 0, 0, 0, 0, 571, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 163, 0,
	0, 562, 368, 565, 163, 571, 184, 0, 163, 580,
	581, 582, 583, 584, 585, 586, 0, 563, 564, 561,
	567, 566, 577, 578, 569, 570, 572, 573, 574, 575,
	576, 568, 0, 0, 0, 0, 579, 567, 566, 577,
	578, 569, 570, 572, 573, 574, 575, 576, 568, 0,
	0, 0, 571, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 818, 539, 0, 0, 0, 818, 818, 0,
	0, 818, 571, 0, 567, 566, 577, 578, 569, 570,
	572, 573, 574, 575, 576, 568, 818, 818, 818, 818,
	579, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 978, 567, 566, 577, 578, 569, 570,
	572, 573, 574, 575, 576, 568, 0, 0, 0, 0,
	579, 0, 0, 567, 566, 577, 578, 569, 570, 572,
	573, 574, 575, 576, 568, 0, 0, 0, 0, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 813, 0, 377, 0, 0,
	0, 88, 0, 376, 0, 0, 98, 415, 100, 0,
	163, 122, 107, 0, 0, 0, 0, 408, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	395, 394, 397, 398, 399, 400, 0, 0, 82, 396,
	401, 402, 403, 0, 0, 374, 388, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	816, 0, 0, 0, 427, 818, 387, 0, 383, 384,
	0, 389, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 166, 0, 0, 425, 0, 114,
	0, 163, 125, 93, 92, 0, 0, 0, 326, 129,
	0, 0, 0, 84, 326, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 0, 146, 147, 148, 149,
	108, 81, 94, 121, 416, 426, 423, 421, 424, 420,
	422, 419, 418, 417, 428, 410, 411, 413, 163, 412,
	73, 0, 99, 150, 116, 90, 141, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 0,
	539, 818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1157, 0, 0, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 761, 239, 281, 111, 263, 0, 254,
	234, 260, 235, 252, 275, 88, 278, 760, 302, 284,
	98, 318, 100, 289, 0, 122, 107, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 0, 0, 0, 0, 692, 693, 0, 0, 0,
	0, 0, 759, 0, 291, 309, 262, 293, 233, 290,
	0, 237, 240, 319, 307, 257, 258, 690, 0, 0,
	0, 0, 0, 0, 276, 280, 296, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 287, 0,
	0, 0, 238, 0, 689, 274, 0, 0, 0, 243,
	756, 752, 753, 163, 750, 751, 305, 271, 166, 308,
	269, 268, 311, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 326, 129, 303, 253, 261, 84, 259, 119,
	112, 139, 286, 763, 766, 101, 131, 115, 138, 167,
	145, 681, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 758,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 757, 0, 123, 140, 152, 249, 306,
	146, 147, 148, 149, 108, 687, 94, 121, 247, 248,
	245, 0, 246, 282, 283, 315, 316, 317, 298, 762,
	0, 0, 301, 285, 73, 0, 99, 150, 116, 90,
	764, 765, 310, 300, 273, 312, 251, 265, 320, 266,
	267, 294, 239, 281, 111, 263, 0, 254, 234, 260,
	235, 252, 275, 88, 278, 682, 302, 284, 98, 318,
	100, 289, 0, 122, 107, 0, 0, 277, 304, 279,
	299, 272, 295, 244, 288, 313, 264, 292, 314, 0,
	877, 0, 0, 692, 693, 0, 0, 0, 0, 0,
	685, 0, 291, 309, 262, 293, 233, 290, 0, 237,
	240, 319, 307, 257, 258, 690, 0, 0, 0, 0,
	0, 0, 276, 280, 296, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 287, 0, 0, 0,
	238, 0, 689, 274, 0, 0, 0, 243, 0, 256,
	297, 0, 232, 0, 305, 271, 166, 308, 269, 268,
	311, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 303, 253, 261, 84, 259, 119, 112, 139,
	286, 113, 118, 101, 131, 115, 138, 167, 145, 681,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 688, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 680, 0, 123, 140, 152, 249, 306, 146, 147,
	148, 149, 108, 687, 94, 121, 247, 248, 245, 0,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 73, 0, 99, 150, 116, 90, 141, 691,
	310, 300, 273, 312, 251, 265, 320, 266, 267, 294,
	239, 281, 111, 263, 0, 254, 234, 260, 235, 252,
	275, 88, 278, 682, 302, 284, 98, 318, 100, 289,
	0, 122, 107, 0, 0, 277, 304, 279, 299, 272,
	295, 244, 288, 313, 264, 292, 314, 0, 0, 0,
	0, 692, 693, 0, 0, 0, 0, 0, 685, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 690, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 287, 0, 0, 0, 238, 0,
	689, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	232, 0, 305, 271, 166, 308, 269, 268, 311, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	303, 253, 261, 84, 259, 119, 112, 139, 286, 113,
	118, 101, 131, 115, 138, 167, 145, 681, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 688, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 680,
	0, 123, 140, 152, 249, 306, 146, 147, 148, 149,
	108, 687, 94, 121, 247, 248, 245, 0, 246, 282,
	283, 315, 316, 317, 298, 242, 0, 0, 301, 285,
	73, 0, 99, 150, 116, 90, 141, 691, 310, 300,
	273, 312, 251, 265, 320, 266, 267, 294, 239, 281,
	111, 263, 0, 254, 234, 260, 235, 252, 275, 88,
	278, 250, 302, 284, 98, 318, 100, 289, 0, 122,
	107, 0, 0, 277, 304, 279, 299, 272, 295, 244,
	288, 313, 264, 292, 314, 0, 0, 0, 0, 692,
	693, 0, 0, 0, 0, 0, 82, 0, 291, 309,
	262, 293, 233, 290, 0, 237, 240, 319, 307, 257,
	258, 690, 0, 0, 0, 0, 0, 0, 276, 280,
	296, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 287, 0, 0, 0, 238, 0, 241, 274,
	0, 0, 0, 243, 0, 256, 297, 0, 232, 0,
	305, 271, 166, 308, 269, 268, 311, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 303, 253,
	261, 84, 259, 119, 112, 139, 286, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 236, 0, 123,
	140, 152, 249, 306, 146, 147, 148, 149, 108, 81,
	94, 121, 247, 248, 245, 0, 246, 282, 283, 315,
	316, 317, 298, 242, 0, 0, 301, 285, 73, 0,
	99, 150, 116, 90, 141, 691, 310, 300, 273, 312,
	251, 265, 320, 266, 267, 294, 239, 281, 111, 263,
	0, 254, 234, 260, 235, 252, 275, 88, 278, 250,
	302, 284, 98, 318, 100, 289, 0, 122, 107, 0,
	0, 277, 304, 279, 299, 272, 295, 244, 288, 313,
	264, 292, 314, 0, 0, 0, 0, 1160, 1161, 0,
	0, 0, 0, 0, 82, 0, 291, 309, 262, 293,
	233, 290, 0, 237, 240, 319, 307, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 276, 280, 296, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	287, 0, 0, 0, 238, 0, 241, 274, 0, 0,
	0, 243, 0, 256, 297, 0, 232, 0, 305, 271,
	166, 308, 269, 268, 311, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 303, 253, 261, 84,
	259, 119, 112, 139, 286, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 236, 0, 123, 140, 152,
	249, 306, 146, 147, 148, 149, 108, 81, 94, 121,
	247, 248, 245, 0, 246, 282, 283, 315, 316, 317,
	298, 242, 0, 0, 301, 285, 73, 0, 99, 150,
	116, 90, 141, 71, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 294, 239, 281, 111, 263, 0, 254,
	234, 260, 235, 252, 275, 88, 278, 250, 302, 284,
	98, 318, 100, 289, 0, 122, 107, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 291, 309, 262, 293, 233, 290,
	0, 237, 240, 319, 307, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 276, 280, 296, 270, 0, 0,
	0, 0, 0, 0, 1211, 0, 255, 0, 287, 0,
	0, 0, 238, 0, 241, 274, 0, 0, 0, 243,
	0, 256, 297, 0, 232, 0, 305, 271, 166, 308,
	269, 268, 311, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 303, 253, 261, 84, 259, 119,
	112, 139, 286, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 236, 0, 123, 140, 152, 249, 306,
	146, 147, 148, 149, 108, 81, 94, 121, 247, 248,
	245, 0, 246, 282, 283, 315, 316, 317, 298, 242,
	0, 0, 301, 285, 73, 0, 99, 150, 116, 90,
	141, 71, 310, 300, 273, 312, 251, 265, 320, 266,
	267, 294, 239, 281, 111, 263, 0, 254, 234, 260,
	235, 252, 275, 88, 278, 250, 302, 284, 98, 318,
	100, 289, 0, 122, 107, 0, 0, 277, 304, 279,
	299, 272, 295, 244, 288, 313, 264, 292, 314, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 291, 309, 262, 293, 233, 290, 0, 237,
	240, 319, 307, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 276, 280, 296, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 287, 0, 0, 0,
	238, 0, 241, 274, 0, 0, 0, 243, 0, 256,
	297, 0, 232, 0, 305, 271, 166, 308, 269, 268,
	311, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 303, 253, 261, 84, 259, 119, 112, 139,
	286, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 80, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 236, 0, 123, 140, 152, 249, 306, 146, 147,
	148, 149, 108, 81, 94, 121, 247, 248, 245, 0,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 73, 0, 99, 150, 116, 90, 141, 71,
	310, 300, 273, 312, 251, 265, 320, 266, 267, 294,
	239, 281, 111, 263, 0, 254, 234, 260, 235, 252,
	275, 88, 278, 250, 302, 284, 98, 318, 100, 289,
	0, 122, 107, 0, 0, 277, 304, 279, 299, 272,
	295, 244, 288, 313, 264, 292, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	1096, 0, 255, 0, 287, 0, 0, 0, 238, 0,
	241, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	232, 0, 305, 271, 166, 308, 269, 268, 311, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	303, 253, 261, 84, 259, 119, 112, 139, 286, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 236,
	0, 123, 140, 152, 249, 306, 146, 147, 148, 149,
	108, 81, 94, 121, 247, 248, 245, 0, 246, 282,
	283, 315, 316, 317, 298, 242, 0, 0, 301, 285,
	73, 0, 99, 150, 116, 90, 141, 327, 310, 300,
	273, 312, 251, 265, 320, 266, 267, 294, 239, 281,
	111, 263, 0, 254, 234, 260, 235, 252, 275, 88,
	278, 250, 302, 284, 98, 318, 100, 289, 0, 122,
	107, 0, 0, 277, 304, 279, 299, 272, 295, 244,
	288, 313, 264, 292, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 291, 309,
	262, 293, 233, 290, 0, 237, 240, 319, 307, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 276, 280,
	296, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 287, 0, 0, 0, 238, 0, 241, 274,
	0, 0, 0, 243, 0, 256, 297, 0, 232, 0,
	305, 271, 166, 308, 269, 268, 311, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 303, 253,
	261, 84, 259, 119, 112, 139, 286, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 236, 0, 123,
	140, 152, 249, 306, 146, 147, 148, 149, 108, 81,
	94, 121, 247, 248, 245, 0, 246, 282, 283, 315,
	316, 317, 298, 242, 0, 0, 301, 285, 73, 0,
	99, 150, 116, 90, 141, 71, 310, 300, 273, 312,
	251, 265, 320, 266, 267, 294, 239, 281, 111, 263,
	0, 254, 234, 260, 235, 252, 275, 88, 278, 250,
	302, 284, 98, 318, 100, 289, 0, 122, 107, 0,
	0, 277, 304, 279, 299, 272, 295, 244, 288, 313,
	264, 292, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 291, 309, 262, 293,
	233, 290, 0, 237, 240, 319, 307, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 276, 280, 296, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 0,
	287, 0, 0, 0, 238, 0, 241, 274, 0, 0,
	0, 243, 0, 256, 297, 0, 232, 0, 305, 271,
	166, 308, 269, 268, 311, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 303, 253, 261, 84,
	259, 119, 112, 139, 286, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 236, 0, 123, 140, 152,
	249, 306, 146, 147, 148, 149, 108, 81, 94, 121,
	247, 248, 245, 0, 246, 282, 283, 315, 316, 317,
	298, 242, 0, 0, 301, 285, 73, 0, 99, 150,
	116, 90, 141, 327, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 294, 239, 281, 111, 263, 0, 254,
	234, 260, 235, 252, 275, 88, 278, 250, 302, 284,
	98, 318, 100, 289, 0, 122, 107, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 291, 309, 262, 293, 233, 290,
	0, 237, 240, 319, 307, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 276, 280, 296, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 287, 0,
	0, 0, 238, 0, 241, 274, 0, 0, 0, 243,
	0, 256, 297, 0, 232, 0, 305, 271, 166, 308,
	269, 268, 311, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 303, 253, 261, 84, 259, 119,
	112, 139, 286, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 230,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 236, 0, 123, 140, 152, 249, 306,
	146, 147, 148, 149, 231, 229, 94, 121, 247, 248,
	245, 0, 246, 282, 283, 315, 316, 317, 298, 242,
	0, 0, 301, 285, 73, 0, 99, 150, 116, 90,
	141, 71, 310, 300, 273, 312, 251, 265, 320, 266,
	267, 294, 239, 281, 111, 263, 0, 254, 234, 260,
	235, 252, 275, 88, 278, 250, 302, 284, 98, 318,
	100, 289, 0, 122, 107, 0, 0, 277, 304, 279,
	299, 272, 295, 244, 288, 313, 264, 292, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 291, 309, 262, 293, 233, 290, 0, 237,
	240, 319, 307, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 276, 280, 296, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 287, 0, 0, 0,
	238, 0, 241, 274, 0, 0, 0, 243, 0, 256,
	297, 0, 232, 0, 305, 271, 166, 308, 269, 268,
	311, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 303, 253, 261, 84, 259, 119, 112, 139,
	286, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 80, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 236, 0, 123, 140, 152, 249, 306, 146, 147,
	148, 149, 108, 81, 94, 121, 247, 248, 245, 0,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 73, 0, 99, 150, 116, 90, 141, 164,
	310, 300, 273, 312, 251, 265, 320, 266, 267, 294,
	239, 281, 111, 263, 0, 254, 234, 260, 235, 252,
	275, 88, 278, 250, 302, 284, 98, 318, 100, 289,
	0, 122, 107, 0, 0, 277, 304, 279, 299, 272,
	295, 244, 288, 313, 264, 292, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 287, 0, 0, 0, 238, 0,
	241, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	232, 0, 305, 271, 166, 308, 269, 268, 311, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	303, 253, 261, 84, 259, 119, 112, 139, 286, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 230, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 236,
	0, 123, 140, 152, 249, 306, 146, 147, 148, 149,
	231, 229, 224, 223, 247, 248, 245, 0, 246, 282,
	283, 315, 316, 317, 298, 242, 0, 0, 301, 285,
	73, 0, 99, 150, 116, 90, 141, 71, 111, 0,
	0, 0, 0, 377, 0, 0, 0, 88, 0, 376,
	0, 0, 98, 415, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 408, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 368, 395, 394, 397, 398,
	399, 400, 0, 0, 82, 396, 401, 402, 403, 0,
	0, 374, 388, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 386, 0, 0, 0, 0,
	427, 0, 387, 0, 383, 384, 0, 389, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 425, 0, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 0, 0, 0, 84,
	0, 119, 112, 139, 0, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 0, 0, 123, 140, 152,
	0, 0, 146, 147, 148, 149, 108, 81, 94, 121,
	416, 426, 423, 421, 424, 420, 422, 419, 418, 417,
	428, 410, 411, 413, 0, 412, 73, 0, 99, 150,
	116, 90, 141, 327, 111, 0, 0, 0, 0, 377,
	0, 0, 0, 88, 0, 376, 0, 0, 98, 415,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 408,
	409, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 395, 394, 397, 398, 399, 400, 0, 0,
	82, 396, 401, 402, 403, 0, 0, 374, 388, 0,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 816, 0, 0, 0, 427, 0, 387, 0,
	383, 384, 0, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 425,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 0, 0, 0, 84, 0, 119, 112, 139,
	0, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 80, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 0, 0, 123, 140, 152, 0, 0, 146, 147,
	148, 149, 108, 81, 94, 121, 416, 426, 423, 421,
	424, 420, 422, 419, 418, 417, 428, 410, 411, 413,
	22, 412, 73, 0, 99, 150, 116, 90, 141, 327,
	0, 111, 0, 0, 0, 0, 377, 0, 0, 0,
	88, 0, 376, 0, 0, 98, 415, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 408, 409, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 0, 0, 395,
	394, 397, 398, 399, 400, 0, 0, 82, 396, 401,
	402, 403, 0, 0, 374, 388, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 385, 386, 0,
	0, 0, 0, 427, 0, 387, 0, 383, 384, 0,
	389, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 425, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 0, 146, 147, 148, 149, 108,
	81, 94, 121, 416, 426, 423, 421, 424, 420, 422,
	419, 418, 417, 428, 410, 411, 413, 0, 412, 73,
	0, 99, 150, 116, 90, 141, 327, 111, 0, 0,
	0, 0, 377, 0, 0, 0, 88, 0, 376, 0,
	0, 98, 415, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 408, 409, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 395, 394, 397, 398, 399,
	400, 0, 0, 82, 396, 401, 402, 403, 0, 0,
	374, 388, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 0, 0, 0, 0, 427,
	0, 387, 0, 383, 384, 0, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 425, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 0, 0, 0, 84, 0,
	119, 112, 139, 0, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 0, 0, 123, 140, 152, 0,
	0, 146, 147, 148, 149, 108, 81, 94, 121, 416,
	426, 423, 421, 424, 420, 422, 419, 418, 417, 428,
	410, 411, 413, 0, 412, 73, 111, 99, 150, 116,
	90, 141, 327, 0, 0, 88, 0, 0, 0, 0,
	98, 415, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 408, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 395, 394, 397, 398, 399, 400,
	0, 0, 82, 396, 401, 402, 403, 0, 0, 0,
	388, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 0, 0, 0, 0, 427, 0,
	387, 0, 383, 384, 0, 389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 425, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 1276, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 0,
	146, 147, 148, 149, 108, 81, 94, 121, 416, 426,
	423, 421, 424, 420, 422, 419, 418, 417, 428, 410,
	411, 413, 0, 412, 73, 111, 99, 150, 116, 90,
	141, 327, 0, 0, 88, 0, 0, 0, 0, 98,
	415, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	408, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 0, 0, 395, 394, 397, 398, 399, 400, 0,
	0, 82, 396, 401, 402, 403, 0, 0, 0, 388,
	0, 414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 385, 386, 0, 0, 0, 0, 427, 0, 387,
	0, 383, 384, 0, 389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	425, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 0, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 0, 146,
	147, 148, 149, 108, 81, 94, 121, 416, 426, 423,
	421, 424, 420, 422, 419, 418, 417, 428, 410, 411,
	413, 0, 412, 73, 111, 99, 150, 116, 90, 141,
	327, 0, 0, 88, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 566, 577, 578,
	569, 570, 572, 573, 574, 575, 576, 568, 0, 0,
	0, 0, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 0, 0, 0, 84, 0, 119, 112, 139,
	0, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 80, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 0, 0, 123, 140, 152, 0, 0, 146, 147,
	148, 149, 108, 81, 94, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 99, 150, 116, 90, 141, 71,
	111, 0, 0, 0, 985, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 0, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 111, 146, 147, 148, 149, 108, 81,
	94, 121, 88, 707, 0, 0, 0, 98, 0, 100,
	0, 0, 122, 107, 0, 0, 0, 0, 73, 0,
	99, 150, 116, 90, 141, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 706, 166, 0, 0, 0, 701,
	700, 0, 705, 704, 703, 92, 0, 0, 0, 0,
	129, 0, 0, 0, 84, 0, 119, 112, 139, 0,
	113, 118, 101, 131, 115, 138, 167, 145, 127, 128,
	144, 74, 126, 137, 83, 120, 76, 135, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 132,
	133, 85, 151, 79, 143, 78, 80, 142, 109, 130,
	136, 106, 103, 77, 134, 104, 102, 97, 89, 0,
	0, 0, 123, 140, 152, 0, 111, 146, 147, 148,
	149, 108, 81, 94, 121, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 73, 0, 99, 150, 116, 90, 141, 327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 65, 0,
	0, 0, 69, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 0, 113, 118, 101, 131, 115, 138, 67,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 0,
	146, 147, 148, 149, 108, 81, 94, 121, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 99, 150, 116, 90,
	141, 71, 111, 0, 0, 0, 463, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 0, 146, 147, 148, 149,
	108, 81, 94, 121, 0, 0, 0, 0, 22, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	73, 0, 99, 150, 116, 90, 141, 164, 88, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 0, 0, 0,
	84, 0, 119, 112, 139, 0, 113, 118, 101, 131,
	115, 138, 167, 145, 127, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 80, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 0, 0, 0, 123, 140,
	152, 0, 0, 146, 147, 148, 149, 108, 81, 94,
	121, 0, 0, 0, 0, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 73, 0, 99,
	150, 116, 90, 141, 71, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 0, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 111,
	146, 147, 148, 149, 108, 81, 94, 121, 88, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 73, 0, 99, 150, 116, 90,
	141, 164, 0, 0, 0, 0, 0, 0, 0, 637,
	0, 0, 638, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 0, 0, 0,
	84, 0, 119, 112, 139, 0, 113, 118, 101, 131,
	115, 138, 167, 145, 127, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 80, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 0, 0, 0, 123, 140,
	152, 0, 111, 146, 147, 148, 149, 108, 81, 94,
	121, 88, 0, 477, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 73, 0, 99,
	150, 116, 90, 141, 71, 0, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 0, 146, 147, 148, 149,
	108, 81, 94, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 99, 150, 116, 90, 141, 71, 111, 0,
	0, 0, 463, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 0, 0, 0, 84,
	0, 119, 112, 139, 0, 461, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 0, 0, 123, 140, 152,
	0, 111, 146, 147, 148, 149, 108, 81, 94, 121,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 73, 0, 99, 150,
	116, 90, 141, 164, 0, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 111, 146, 147, 148, 149, 108,
	81, 94, 121, 88, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 73,
	0, 99, 150, 116, 90, 141, 164, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 0, 0, 0, 84, 0, 119, 112, 139,
	0, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 80, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 0, 0, 123, 140, 152, 0, 111, 146, 147,
	148, 149, 108, 81, 94, 121, 88, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 73, 0, 99, 150, 116, 90, 141, 71,
	0, 0, 0, 0, 0, 0, 465, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 0, 0, 0, 84, 0,
	119, 112, 139, 0, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 0, 0, 123, 140, 152, 0,
	0, 146, 147, 148, 149, 108, 81, 94, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 111, 99, 150, 116,
	90, 141, 164, 0, 440, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 0, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 111,
	146, 147, 148, 149, 108, 81, 94, 121, 88, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 73, 0, 99, 150, 116, 90,
	141, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 0, 0, 0,
	84, 0, 119, 112, 139, 0, 113, 118, 101, 131,
	115, 138, 167, 145, 127, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 80, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 217, 0, 0, 123, 140,
	152, 0, 111, 146, 147, 148, 149, 108, 81, 94,
	121, 88, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 73, 0, 99,
	150, 116, 90, 141, 327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 111, 146, 147, 148, 149,
	108, 81, 94, 121, 88, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	73, 0, 99, 150, 116, 90, 141, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 166, 0, 0,
	0, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 0, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 111, 146,
	147, 148, 149, 108, 81, 94, 121, 88, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 73, 0, 99, 150, 116, 90, 141,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 0, 0, 0, 84,
	0, 119, 112, 139, 0, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 0, 0, 123, 140, 152,
	0, 111, 146, 147, 148, 149, 108, 81, 94, 121,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 73, 0, 99, 150,
	116, 90, 141, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 111, 146, 147, 148, 149, 108,
	81, 94, 121, 88, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 73,
	0, 99, 150, 116, 90, 141, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 0, 0, 0, 84, 0, 119, 112, 139,
	0, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 80, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 0, 0, 123, 140, 152, 0, 0, 146, 147,
	148, 149, 108, 81, 94, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 99, 150, 116, 90, 141, 164,
}
var yyPact = [...]int{

	1549, -1000, -157, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	832, 862, -1000, -1000, -1000, -1000, -1000, 619, 7179, 76,
	109, 31, 9698, 106, 1584, 10247, -1000, 6, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 607, -1000, -1000, -1000, -1000,
	-1000, 812, 828, 631, 802, 683, -1000, 80, 8574, 9515,
	5105, -1000, 9332, 72, 96, 10247, -75, 9881, 72, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 103, 10247, -1000, 10247, 68, 68, -100,
	68, 10247, -1000, 138, -1000, -1000, -1000, -1000, 10247, -103,
	724, -24, 3737, 3737, 3737, 3737, 34, 3737, 3737, 638,
	-1000, -1000, -1000, -1000, 3737, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 409, 729, 5970, 5970, 832, -1000,
	607, -1000, -1000, -1000, 718, -1000, -1000, 295, 9149, 581,
	888, -1000, -1000, -1000, 792, 7809, 8391, 10247, 532, -1000,
	578, 4649, -1000, -1000, -1000, 187, 8175, -1000, -1000, -1000,
	716, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10247, 534, -1000, 116, -1000, 137, -1000, -1000, -104,
	250, -105, 3737, 91, 621, 10247, 10247, 3737, 82, 10247,
	772, -109, 635, 10247, -1000, 4877, -1000, 3737, 3737, 3737,
	3737, 3737, 3737, 3737, 3737, -1000, -1000, -1000, -1000, -1000,
	-1000, 3737, 3737, -1000, -1000, 10247, -1000, -1000, -1000, -1000,
	858, 159, 292, -1000, 5970, 1741, 575, 575, -1000, -1000,
	124, -1000, -1000, 6388, 6388, 6388, 6388, 6388, 6388, 6388,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 575, 133, -1000, 5754, 575, 575,
	575, 575, 575, 575, 5970, 575, 575, 575, 575, 575,
	575, 575, 575, 575, 575, 575, 575, 575, 575, 587,
	-1000, 366, 812, 409, 683, 7992, 666, -1000, -1000, 38,
	10247, -1000, 10064, 8574, 8574, 8574, 8574, 8574, -1000, 675,
	674, -1000, 654, 651, 660, 10247, -1000, 528, 409, 7809,
	151, 575, -1000, 8940, -1000, -1000, 38, 8574, 10247, -1000,
	-1000, 4649, 578, 5970, 141, -1000, -1000, -1000, -1000, 465,
	2825, 6996, -1000, -44, -1000, -1000, 590, -1000, 590, 590,
	590, 590, -29, -29, -29, -29, -1000, -1000, -1000, -1000,
	-1000, 616, 614, -1000, 590, 590, 590, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 601, 79, 601, 591,
	591, 4421, 2825, 764, 623, -1000, 10247, -89, -110, 165,
	2369, -1000, 10247, -1000, -1000, 3737, 10247, 3737, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 690, 5970, 5970, 357, 5970, 5970, 168,
	6388, 378, 243, 6388, 6388, 6388, 6388, 6388, 6388, 6388,
	6388, -1000, 6388, 6388, 6388, 6388, 6388, 6388, 6388, 26,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -114, -1000,
	607, 565, 565, 216, 216, 216, 216, 216, 216, 6597,
	1995, 4421, 524, 346, 5754, 5537, 5537, 5970, 5970, 5537,
	794, 197, 346, 9881, -1000, 409, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5537, 5537, 5537, 5537, 5970, -1000,
	-1000, -1000, 729, -1000, 794, 842, -1000, 705, 704, 5537,
	-1000, 580, 575, -1000, 540, -1000, 185, 888, 612, 634,
	1280, -1000, -1000, -1000, -1000, 655, -1000, 652, -1000, -1000,
	-1000, -1000, -1000, 409, -1000, 95, 94, 93, 9881, -1000,
	844, 503, -1000, -1000, 346, -1000, 23, -1000, 2597, -1000,
	256, 3053, 51, -1000, -1000, 3053, 3053, 42, 710, 30,
	24, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 584, 602,
	748, 63, -115, 194, 194, -116, -1000, -1000, 439, -46,
	-1000, -1000, 383, -29, -29, -1000, -1000, 141, 42, 710,
	141, 141, 141, 394, 394, -1000, -1000, -1000, -1000, 375,
	601, -1000, -1000, -1000, 371, -1000, -1000, 132, -1000, 2597,
	-1000, 628, 9881, 3737, -1000, 4193, -1000, -1000, 10247, -1000,
	984, 1240, 269, 208, -1000, -1000, -1000, 256, 710, 3053,
	51, -1000, -1000, -1000, -1000, -1000, 28, -1000, -1000, 3737,
	-1000, 687, 168, 190, -1000, -1000, 351, -1000, -1000, 346,
	346, 1835, -1000, -1000, -1000, -1000, 378, 6388, 6388, 6388,
	1539, 1835, 1854, 1439, 1388, 216, 307, 307, 267, 267,
	267, 267, 267, 668, 668, -1000, -1000, -1000, 409, -1000,
	-1000, -1000, 409, 5537, 564, -1000, -1000, 6813, 130, 575,
	5970, -1000, 487, 487, 290, 352, 487, 5537, 312, -1000,
	5970, 409, -1000, 487, 409, 487, 487, -1000, -1000, 10247,
	-1000, -1000, -1000, -1000, 507, 626, 10064, 575, -1000, 7602,
	9881, 832, 10064, 5970, 5970, -1000, -1000, 5970, 600, -1000,
	5970, -1000, -1000, -1000, -1000, 575, 575, 575, 459, -1000,
	832, -1000, -1000, -133, -1000, -1000, -1000, 2825, -1000, 354,
	-1000, -1000, -1000, -1000, -1000, -1000, 29, -1000, 18, -1000,
	-1000, -1000, 9881, 599, 9881, -140, -144, -1000, -1000, -145,
	-154, 69, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 199, 102, 856, -1000, 744, -1000, 742, 393,
	-1000, -1000, 456, 141, 141, -1000, -1000, -1000, -1000, 512,
	-1000, 495, 562, -1000, 493, 4193, 10247, -1000, -1000, 558,
	-1000, 182, -1000, -1000, -1000, 9881, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9881,
	10247, -1000, -1000, -1000, -1000, -1000, 9881, -1000, -1000, -1000,
	-1000, -1000, -1000, 1539, 1835, 1805, -1000, 6388, 6388, -1000,
	-1000, 487, 5537, -1000, -1000, 8757, -1000, -1000, 3965, 5537,
	346, -1000, -1000, 805, 26, 805, -83, 479, 189, -1000,
	5970, 316, -1000, -1000, -1000, -1000, -1000, -1000, 844, 8574,
	-1000, 754, 455, 515, -1000, -1000, 5321, 409, 472, 129,
	459, 812, -1000, 346, 346, 346, 9881, 346, 9881, 9881,
	9881, 7395, 9881, 812, -1000, -1000, -1000, -1000, -1000, -1000,
	17, -1000, -1000, 437, -1000, 574, 9881, 433, -1000, -1000,
	-1000, -1000, 731, 194, 728, -1000, -1000, -1000, -1000, -1000,
	-1000, 597, -1000, 596, -62, -1000, -1000, -1000, -1000, -1000,
	-1000, -29, 387, -29, 319, -1000, 308, -1000, 3737, 4193,
	3281, -1000, 592, -1000, -1000, -1000, -1000, -1000, 760, -1000,
	6388, 1835, 1835, -1000, -1000, -1000, -1000, 127, 409, 409,
	590, 590, -1000, 590, 591, -1000, 590, -4, 590, -11,
	409, 409, 575, -80, -1000, 346, 5970, 837, 546, 727,
	-1000, 575, -1000, -1000, 586, 9881, 9881, -1000, -1000, 431,
	-1000, 420, 420, 420, 151, -1000, -1000, -1000, -1000, 284,
	9881, -1000, -1000, -1000, 417, 54, -1000, -1000, -1000, 445,
	372, -1000, 141, -1000, 141, 443, 434, -1000, -1000, -1000,
	-1000, -1000, 9881, 575, 1835, 3509, -1000, -1000, -1000, -91,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6388, 409,
	353, 346, 835, 814, 850, -1000, 575, -1000, 607, 121,
	-1000, 9881, -1000, -1000, -1000, -1000, -1000, -1000, 264, -1000,
	-1000, 10247, -1000, 411, -1000, -1000, -1000, -1000, -1000, 408,
	27, -1000, -1000, -1000, 14, -1000, -1000, -1000, 5970, 5970,
	10064, 515, 409, 9881, -1000, -1000, 589, -1000, 621, 405,
	-1000, 9881, 409, 90, -93, 346, 477, 469, -1000, -1000,
	9881, -89, -1000, 27, 703, -1000, 681, -87, -96, 399,
	-1000, -1000, 19, -1000, 679, -1000, 625, 21, -90, -1000,
	625, 854, 575, -94, -1000, 186, 186, 6179, -97, -1000,
	-1000, -1000, 304, 36, -1000, 1758, 409, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1116, 23, 596, 1115, 1114, 1105, 1104, 1103, 1101,
	1095, 1094, 1093, 1092, 1091, 1090, 1089, 1087, 1086, 1085,
	1078, 1070, 1061, 180, 1060, 1056, 1054, 53, 1053, 72,
	1052, 1051, 40, 83, 44, 45, 298, 1049, 38, 77,
	70, 1046, 50, 1036, 1019, 1016, 1015, 65, 1012, 1009,
	34, 1008, 1007, 15, 26, 1006, 1003, 1000, 999, 54,
	498, 994, 993, 990, 989, 988, 985, 55, 10, 8,
	22, 11, 983, 32, 12, 981, 42, 979, 977, 974,
	973, 39, 972, 52, 969, 21, 47, 968, 9, 62,
	48, 28, 14, 146, 965, 43, 63, 962, 399, 959,
	164, 339, 958, 957, 956, 955, 37, 0, 482, 616,
	31, 950, 20, 949, 1281, 35, 64, 25, 947, 225,
	1231, 30, 945, 944, 27, 942, 941, 940, 938, 933,
	926, 84, 924, 6, 923, 18, 283, 230, 922, 921,
	51, 13, 920, 916, 914, 49, 57, 912, 46, 909,
	905, 904, 902, 17, 41, 56, 894, 892, 889, 2,
	16, 3, 881, 4, 880, 19, 879, 7, 877, 5,
	58, 130, 1, 875, 872, 379, 442, 869, 868, 183,
}
var yyR1 = [...]int{

	0, 173, 174, 174, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 3, 4, 4, 5, 5, 6,
	6, 26, 26, 7, 8, 8, 177, 177, 45, 45,
	89, 89, 9, 9, 122, 122, 10, 10, 10, 10,
	10, 10, 10, 169, 169, 168, 167, 167, 166, 166,
	165, 15, 15, 149, 150, 150, 150, 146, 152, 152,
	151, 151, 151, 151, 151, 151, 151, 151, 125, 125,
	125, 128, 128, 126, 126, 126, 126, 126, 126, 126,
	126, 127, 127, 127, 127, 127, 127, 129, 129, 129,
	129, 129, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 145, 145, 131,
	131, 140, 140, 141, 141, 141, 138, 138, 139, 139,
	142, 142, 132, 132, 132, 132, 132, 132, 132, 132,
	135, 135, 135, 134, 143, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	144, 144, 144, 144, 133, 147, 147, 147, 147, 147,
	147, 147, 157, 157, 157, 157, 158, 158, 159, 159,
	172, 172, 172, 172, 172, 156, 156, 156, 156, 156,
	156, 156, 148, 148, 161, 161, 160, 160, 160, 155,
	155, 155, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 171, 171, 171, 171, 171, 171, 171, 153,
	153, 153, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 164, 162, 162, 163, 163, 12,
	13, 13, 13, 13, 14, 14, 16, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	123, 123, 123, 18, 18, 20, 20, 21, 22, 19,
	19, 19, 19, 19, 178, 23, 24, 24, 25, 25,
	25, 29, 29, 29, 27, 27, 28, 28, 34, 34,
	33, 33, 35, 35, 35, 35, 111, 111, 111, 110,
	110, 37, 37, 38, 38, 39, 39, 40, 40, 40,
	52, 52, 88, 88, 90, 90, 41, 41, 41, 41,
	42, 42, 43, 43, 44, 44, 118, 118, 117, 117,
	117, 116, 116, 46, 46, 46, 48, 47, 47, 47,
	47, 49, 49, 51, 51, 50, 50, 53, 53, 53,
	53, 54, 54, 36, 36, 36, 36, 36, 36, 36,
	99, 99, 56, 56, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 66, 66, 66, 66, 66, 66,
	57, 57, 57, 57, 57, 57, 57, 32, 32, 67,
	67, 67, 73, 68, 68, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 64, 64, 64,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 179, 179,
	65, 65, 65, 65, 30, 30, 30, 30, 30, 121,
	121, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 77, 77, 31, 31, 75, 75,
	76, 78, 78, 74, 74, 74, 59, 59, 59, 59,
	59, 59, 59, 59, 61, 61, 61, 79, 79, 80,
	80, 81, 81, 82, 82, 83, 84, 84, 84, 85,
	85, 85, 85, 86, 86, 86, 58, 58, 58, 58,
	58, 58, 87, 87, 87, 87, 91, 91, 69, 69,
	71, 71, 70, 72, 92, 92, 95, 93, 93, 96,
	96, 94, 94, 94, 113, 113, 113, 97, 97, 100,
	100, 101, 101, 98, 98, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 103, 103, 103, 104, 104,
	105, 105, 105, 112, 108, 108, 109, 109, 114, 114,
	115, 115, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 175, 176, 119, 120, 120, 120,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 8, 8, 6, 1, 1, 1, 3,
	0, 4, 3, 4, 1, 1, 2, 5, 5, 8,
	4, 6, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 6, 4, 1, 3, 3, 3, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 4, 2,
	1, 4, 3, 3, 1, 0, 2, 3, 2, 3,
	3, 4, 3, 4, 3, 0, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 5, 6, 5, 5, 4,
	4, 10, 4, 3, 4, 4, 1, 2, 3, 3,
	1, 1, 2, 2, 2, 2, 3, 3, 2, 2,
	3, 3, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 1, 1, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 6, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 5, 6, 5, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 3, 4, 2, 4, 2, 2, 2, 2, 3,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -173, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -20, -21, -22, -19,
	-3, -4, 6, -26, 8, 9, 29, -15, 110, 111,
	113, 112, 142, 114, 135, 48, 155, 156, 158, 159,
	24, 136, 137, 140, 141, -175, 7, 219, 52, -174,
	233, -81, 14, -25, 5, -23, -178, -23, -23, -23,
	-23, -149, 52, 210, -105, 119, 68, 150, 117, 123,
	-108, 232, -107, 225, 155, 166, 160, 187, 179, 177,
	180, 206, 63, 158, 138, 175, 171, 169, 26, 192,
	230, 170, 129, 128, 207, 164, 165, 191, 31, 227,
	33, 146, 190, 186, 189, 163, 185, 37, 205, 182,
	172, 17, 141, 144, 124, 148, 229, 168, 145, 140,
	159, 208, 36, 196, 162, 127, 156, 152, 153, 134,
	183, 147, 173, 174, 188, 161, 184, 157, 149, 142,
	197, 231, 181, 178, 154, 151, 201, 202, 203, 204,
	228, 176, 198, -98, 119, 121, 117, 117, 210, 118,
	119, 117, -50, -114, 232, -107, 119, 150, 117, 103,
	180, 110, 199, 118, 31, 148, -123, 117, 200, 151,
	201, 202, 203, 204, 232, 208, 207, -114, 157, -119,
	-119, -119, -119, -119, -2, -85, 16, 15, -5, -3,
	-175, 6, 19, 20, -29, 38, 39, -24, -98, -38,
	-39, -40, -41, -52, -73, -175, -50, 10, -45, -50,
	-93, -122, -96, 208, 207, -109, -94, -108, -106, 206,
	180, 205, 115, 69, 21, 23, 194, 72, 103, 15,
	73, 105, 220, 110, 46, 211, 213, 209, 210, 199,
	28, 9, 24, 136, 20, 97, 112, 76, 77, 139,
	22, 137, 67, 18, 49, 10, 12, 13, 122, 121,
	88, 118, 44, 7, 106, 25, 85, 40, 27, 42,
	86, 16, 214, 215, 30, 224, 143, 99, 47, 34,
	70, 65, 50, 68, 14, 45, 87, 113, 219, 43,
	6, 223, 29, 135, 41, 117, 200, 75, 120, 66,
	5, 123, 8, 48, 51, 216, 217, 218, 32, 74,
	11, 86, -150, -146, -74, -108, -114, 232, -107, -101,
	122, 118, -50, 219, -108, -101, 117, -50, -50, -100,
	122, -100, 232, -100, -50, 107, -50, 232, 29, 210,
	232, 148, 117, 149, 119, -120, -175, -109, -120, -120,
	-120, 153, 154, -120, -120, 50, -120, -176, 54, -86,
	18, 30, -36, -55, 70, -60, 28, 22, -59, -56,
	-74, -72, -73, 103, 104, 93, 94, 101, 71, 106,
	-64, -62, -63, -65, 56, 55, 64, 57, 58, 59,
	60, 65, 66, 67, -108, -114, -70, -175, 42, 43,
	220, 221, 224, 222, 73, 32, 209, 218, 217, 216,
	214, 212, 215, 211, 213, 122, 210, 99, 219, -82,
	-83, -36, -81, -2, -23, 34, -27, 20, 62, -51,
	25, -50, 29, 53, -46, -48, -47, -49, 40, 44,
	46, 41, 42, 43, 47, -118, 21, -38, -2, -175,
	-117, 144, -116, 21, -114, 56, -50, -177, 53, 10,
	51, 53, -93, 78, -113, -108, 56, 28, 29, -50,
	54, 53, -125, -128, -130, -129, -126, -127, 177, 178,
	103, 181, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 29, 138, 173, 174, 175, 176, 160, 161,
	162, 163, 164, 165, 166, 226, 168, 169, 170, 171,
	172, 107, 232, 70, 232, -120, 119, -169, 51, -50,
	-50, -120, 120, -50, 22, 232, 50, -50, -115, -114,
	-106, -120, -120, -120, -120, -120, -120, -120, -120, -120,
	-120, -50, 8, 88, 69, 68, 85, 53, 17, -36,
	-57, 88, 70, 86, 87, 72, 90, 89, 100, 93,
	94, 57, 95, 96, 97, 98, 99, 91, 92, 105,
	78, 79, 80, 81, 82, 83, 84, -99, -175, -73,
	-175, 108, 109, -60, -60, -60, -60, -60, -60, -60,
	-175, 107, -68, -36, -175, -175, -175, -175, -175, -175,
	-175, -77, -36, -175, -179, -175, -179, -179, -179, -179,
	-179, -179, -179, -179, -175, -175, -175, -175, 53, -84,
	23, 24, -85, -176, -29, -61, -108, 57, 60, -28,
	41, -89, 144, -50, -92, -95, -74, -39, -40, -40,
	-39, -40, 40, 40, 40, 45, 40, 45, 40, -47,
	-114, -176, -176, -2, -53, 48, 121, 49, -175, -116,
	-89, -38, -50, -96, -36, -137, 105, 54, -155, -154,
	194, 152, 28, -136, -137, 63, -171, 206, 180, 105,
	78, 232, 56, 57, -153, -109, -146, -147, -156, -157,
	124, 123, -148, 128, 127, 126, 118, 27, -152, -138,
	197, -131, 52, -131, -131, -131, -131, -136, 206, 180,
	-136, -136, -136, 52, 52, -131, -131, -131, -140, 52,
	231, -140, -140, -141, 52, -141, -109, -115, -106, -155,
	22, -112, 51, -50, -167, 228, -168, 232, 86, -102,
	115, 116, 112, 113, -154, -164, 111, 194, 180, 63,
	28, 14, 220, 144, 231, 232, 145, -50, -120, -50,
	-120, 36, -36, -36, -66, 65, 70, 66, 67, -36,
	-36, -60, -67, -70, -73, 61, 88, 86, 87, 72,
	-60, -60, -60, -60, -60, -60, -60, -60, -60, -60,
	-60, -60, -60, -60, -60, -121, 232, 56, 232, -59,
	-59, -108, -34, 20, -33, -35, 95, -36, -114, -109,
	53, -176, -33, -33, -36, -36, -33, -27, -75, -76,
	74, -108, -176, -33, -34, -33, -33, -83, -86, -97,
	18, 10, 32, 32, -33, -58, 29, 32, -2, -175,
	-175, -54, 53, 11, 78, -43, -42, 50, 51, -44,
	50, -42, 40, 40, -176, 118, 118, 118, -90, -108,
	-54, -54, 232, 78, 56, 103, -154, 53, 57, 78,
	-171, -136, -137, -171, -171, 232, 78, 56, 29, 232,
	56, 57, 52, -112, 52, 27, -148, 232, 232, -148,
	-148, 232, -151, -142, -132, -134, -143, -144, -133, -136,
	-137, 65, 70, 28, 50, 194, 124, 27, 123, 63,
	-139, 198, 57, -136, -136, -137, -137, -137, -137, -145,
	56, -145, 57, -140, 57, 107, 50, -108, -120, -166,
	-165, -109, -50, -119, -170, 150, 125, 126, 129, 128,
	232, 118, 27, 124, 127, 144, 123, -170, -170, 150,
	-103, -104, 120, 21, 118, 27, 144, -120, 37, 65,
	66, 67, -67, -60, -60, -60, -32, 139, 69, -176,
	-176, -33, 53, -111, -110, 21, -108, 56, 107, -175,
	-36, -176, -176, 53, 51, 21, -176, -33, -78, -76,
	76, -36, -176, -176, -176, -176, -176, -50, -37, 10,
	-91, 50, -92, -69, -71, -70, -175, -2, -87, -108,
	-90, -81, -95, -36, -36, -36, 52, -36, -175, -175,
	-175, -176, 53, -81, 232, -154, 57, 232, 56, 232,
	78, 56, 103, -161, -160, -108, 52, -161, 232, 232,
	232, 232, 124, 123, 129, 65, 56, 57, 58, 65,
	-135, 212, 64, 209, 8, 27, 27, 56, 54, -137,
	-137, 54, 53, 54, 53, 54, 53, -109, -50, 53,
	78, -119, -108, -119, -119, -108, -50, -119, -108, -32,
	69, -60, -60, -176, -35, -110, 95, -115, -34, -124,
	103, 177, 138, 175, 171, 191, 182, 196, 173, 197,
	-121, -124, 225, -81, 77, -36, 75, -54, -38, 26,
	-91, 53, -176, -176, -176, 53, 107, -176, -85, -88,
	-108, -88, -88, -88, -117, -108, -85, 232, 56, 54,
	53, -131, 23, 24, -161, 54, 27, -148, 27, 52,
	52, -135, -136, 56, -136, 57, 57, -120, -165, -153,
	56, 57, 52, 25, -60, 107, -176, -176, -131, -131,
	-131, -141, -131, 165, -131, 165, -176, -176, -175, -31,
	223, -36, -79, 12, 27, -71, 32, -2, -175, -108,
	-108, 53, 54, -176, -176, -176, -53, -133, -112, -160,
	54, 130, 54, 57, 54, -137, -137, 54, 54, -88,
	-175, 95, -136, 232, -60, -176, 56, -80, 13, 15,
	8, -69, -2, 107, -108, -133, -50, 54, 54, -162,
	-163, 144, -30, 88, 228, -36, -68, -92, -176, -108,
	52, -169, -176, 53, -108, -176, 226, 47, 229, -161,
	-167, -163, 32, 37, 227, 230, 54, 146, 37, -158,
	-159, 50, 147, 228, -159, 9, 8, -175, 229, -172,
	132, 131, 29, 133, -172, -60, 143, 230, 65, 28,
	134, -176, -176,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	521, 0, 294, 294, 294, 294, 294, 0, 590, 573,
	0, 0, 0, 0, 280, 284, 285, 0, 287, 288,
	775, 775, 775, 775, 775, 0, 31, 32, 773, 1,
	3, 529, 0, 0, 298, 301, 296, 573, 0, 0,
	0, 46, 0, 571, 0, 763, 0, 764, 571, 591,
	592, 594, 595, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 765, 766, 767, 768, 769,
	770, 771, 772, 0, 0, 574, 0, 569, 569, 0,
	569, 0, 255, 365, 598, 599, 763, 764, 0, 0,
	0, 0, 776, 776, 776, 776, 0, 776, 776, 273,
	275, 276, 277, 278, 776, 281, 282, 283, 286, 289,
	290, 291, 292, 293, 25, 533, 0, 0, 521, 27,
	0, 294, 299, 300, 304, 302, 303, 295, 0, 0,
	323, 325, 326, 327, 346, 0, 348, 0, 0, 38,
	42, 0, 557, -2, -2, 0, 0, 596, 597, -2,
	698, -2, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 0, 0, 64, 0, 503, 0, -2, -2, 0,
	0, 0, 776, 0, 53, 0, 0, 776, 0, 0,
	0, 0, 0, 0, 254, 0, 256, 776, 776, 776,
	776, 776, 776, 776, 776, 265, 777, 778, 266, 267,
	268, 776, 776, 270, 271, 0, 279, 26, 774, 21,
	0, 0, 530, 373, 0, 378, 380, 0, 415, 416,
	417, 418, 419, 0, 0, 0, 0, 0, 0, 0,
	443, 444, 445, 446, 506, 507, 508, 509, 510, 511,
	512, 513, 382, 383, 503, 0, 553, 0, 0, 0,
	0, 0, 0, 0, 494, 0, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 0, 0, 0, 0, 522,
	523, 526, 529, 25, 301, 0, 306, 305, 297, 40,
	0, 364, 0, 0, 0, 0, 0, 0, 353, 0,
	0, 356, 0, 0, 0, 0, 347, 0, 25, 0,
	367, 731, 349, 0, 351, 352, 40, 0, 0, 36,
	37, 0, 43, 0, 155, 564, 565, 566, 562, 0,
	145, 0, 68, 126, 79, 80, 119, 82, 119, 119,
	119, 119, 145, 145, 145, 145, 110, 111, 112, 113,
	114, 0, 0, 97, 119, 119, 119, 101, 83, 84,
	85, 86, 87, 88, 89, 90, 121, 121, 121, 123,
	123, 0, 145, 0, 0, 50, 0, 56, 0, 61,
	145, 230, 0, 250, 570, 776, 0, 776, 366, 600,
	601, 257, 258, 259, 260, 261, 262, 263, 264, 269,
	272, 274, 534, 0, 0, 0, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 401, 402, 403, 404, 405, 406, 379, 0, 393,
	0, 0, 0, 436, 437, 438, 439, 440, 441, 0,
	308, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	304, 0, 495, 0, 459, 0, 460, 461, 462, 463,
	464, 465, 466, 467, 0, 308, 0, 0, 0, 525,
	527, 528, 533, 28, 304, 0, 514, 0, 0, 0,
	307, 0, 0, 363, 371, 554, 0, 324, 342, 344,
	0, 339, 354, 355, 357, 0, 359, 0, 361, 362,
	328, 329, 412, 25, 330, 0, 0, 0, 0, 350,
	371, 371, 39, 558, 559, 560, 0, 47, 63, 199,
	606, 745, 145, 206, 207, 700, 210, 699, 698, 611,
	0, 215, 216, 217, 218, 219, 65, 66, 0, 0,
	732, 0, 0, 711, 743, 0, 192, 193, 67, 128,
	127, 81, 0, 145, 145, 104, 105, 155, 0, 0,
	155, 155, 155, 0, 0, 98, 99, 100, 91, 0,
	121, 93, 94, 95, 0, 96, 504, 0, -2, 48,
	572, 0, 0, 776, 52, 0, 54, 55, 0, 775,
	602, 0, 626, -2, 231, 232, 575, -2, -2, 578,
	-2, -2, -2, -2, -2, 215, 736, 249, 251, 776,
	253, 0, 374, 375, 377, 394, 0, 396, 398, 531,
	532, 384, 385, 409, 410, 411, 0, 0, 0, 0,
	407, 389, 0, 420, 421, 422, 423, 424, 426, 427,
	428, 429, 430, 431, 432, 435, 479, 480, 0, 433,
	434, 442, 0, 0, 309, 310, 312, 316, 0, 504,
	0, 552, 0, 0, 0, 0, 0, 0, 501, 498,
	0, 0, 469, 0, 0, 0, 0, 524, 22, 0,
	567, 568, 515, 516, 321, 546, 0, 0, -2, 0,
	0, 521, 0, 0, 0, 336, 343, 0, 0, 337,
	0, 338, 358, 360, -2, 0, 0, 0, 0, 334,
	521, 35, 156, 0, 158, 159, 200, 145, 202, 0,
	204, 205, 208, 209, 211, 146, 0, 148, 0, 212,
	213, 214, 0, 0, 0, 185, 0, 188, 189, 0,
	0, 0, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 130, 0, 0, 0, 144, 0, 161, 163, 0,
	78, 129, 0, 155, 155, 106, 107, 108, 109, 0,
	117, 0, 0, 92, 0, 0, 0, 593, 51, 57,
	58, 0, 62, 222, 775, 0, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 775, 775, 0,
	0, 775, 586, 587, 588, 589, 0, 252, 535, 395,
	397, 399, 386, 407, 390, 0, 387, 0, 0, 381,
	447, 0, 0, 313, 317, 0, 319, 320, 0, 308,
	414, 450, 451, 0, 0, 0, 0, 521, 0, 499,
	0, 0, 458, 470, 471, 472, 473, 23, 371, 0,
	29, 0, 546, 536, 548, 550, 0, 25, 0, 542,
	0, 529, 555, 372, 556, 340, 0, 345, 0, 0,
	0, 348, 0, 529, 157, 201, 203, 147, 149, 150,
	0, 152, 154, 0, 194, 119, 0, 0, 186, 187,
	190, 191, 0, 173, 0, 131, 132, 133, 134, 135,
	136, 137, 139, 140, 0, 160, 162, 164, 120, 102,
	103, 145, 0, 145, 0, 124, 0, 505, 776, 0,
	0, 223, 0, 224, 225, 227, 228, 229, 0, 388,
	0, 408, 391, 448, 311, 318, 314, 0, 0, 0,
	119, 119, 484, 119, 123, 487, 119, 489, 119, 492,
	0, 0, 0, 496, 457, 502, 0, 517, 322, 0,
	30, 0, 551, -2, 0, 0, 0, 41, 33, 0,
	332, 0, 0, 0, 367, 335, 34, 151, 153, 169,
	0, 196, 197, 198, 0, 170, 172, 174, 175, 0,
	0, 143, 155, 118, 155, 0, 0, 49, 59, 60,
	220, 221, 0, 0, 392, 0, 449, 452, 481, 145,
	485, 486, 488, 490, 491, 493, 454, 453, 0, 0,
	0, 500, 519, 0, 0, 549, 0, -2, 0, 544,
	543, 0, 341, 368, 369, 370, 331, 165, 167, 195,
	168, 0, 138, 0, 142, 115, 116, 122, 125, 0,
	0, 315, 482, 483, 474, 456, 497, 24, 0, 0,
	0, 539, 25, 0, 333, 166, 0, 141, 53, 0,
	245, 0, 0, 0, 0, 520, 518, 547, -2, 545,
	0, 56, 244, 0, 0, 455, 0, 0, 0, 0,
	226, 246, 0, 475, 0, 478, 0, 0, 476, 171,
	176, 0, 0, 0, 177, 0, 0, 0, 0, 178,
	180, 181, 0, 0, 179, 0, 0, 477, 182, 184,
	183, 247, 248,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	52, 54, 95, 93, 53, 94, 107, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 233,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 106, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:302
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:307
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:308
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:312
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:334
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:342
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:346
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:354
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:360
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:364
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:381
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:393
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:421
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:425
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:439
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:444
		{
			yyVAL.partitions = nil
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:448
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.str = SessionStr
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
			yyVAL.str = GlobalStr
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:474
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = yyDollar[1].ddl
			yyDollar[1].ddl.Table = yyDollar[4].tableName
			yyDollar[1].ddl.LikeTable = yyDollar[4].tableName
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &DDL{Action: CreateDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}, TableSpec: &TableSpec{Option: yyDollar[5].TableOption}}
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:489
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:511
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:521
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:526
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:542
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:554
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:559
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName, Table: yyDollar[6].tableName, LikeTable: yyDollar[6].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Option = yyDollar[4].TableOption
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:578
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:588
		{

			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colName.Name, Type: yyDollar[2].columnType, options: yyDollar[3].columnOptions}
			yyVAL.columnDefinition.mergeOptions()
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:595
		{
			yyVAL.columnOptions = []columnOption{}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:599
		{
			yyVAL.columnOptions = append(yyDollar[1].columnOptions, yyDollar[2].columnOption)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:605
		{
			yyVAL.columnOption = columnOption{key: "null_opt", value: yyDollar[1].boolVal}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:609
		{
			yyVAL.columnOption = columnOption{key: "column_default_opt", value: yyDollar[1].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:613
		{
			yyVAL.columnOption = columnOption{key: "on_update_opt", value: yyDollar[1].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.columnOption = columnOption{key: "auto_increment_opt", value: yyDollar[1].boolVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:621
		{
			yyVAL.columnOption = columnOption{key: "column_key_opt", value: yyDollar[1].colKeyOpt}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:625
		{
			yyVAL.columnOption = columnOption{key: "column_comment_opt", value: yyDollar[1].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.columnOption = columnOption{key: "charset_opt", value: yyDollar[1].str}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.columnOption = columnOption{key: "collate_opt", value: yyDollar[1].str}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:657
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:830
		{
			yyVAL.optVal = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:834
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:839
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:843
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:851
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:861
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:869
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:878
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:899
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:907
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:923
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:927
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:937
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:941
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:949
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:960
		{
			yyVAL.str = ""
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:964
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:968
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:972
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:976
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:980
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:984
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:988
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:992
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:996
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1001
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1047
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1051
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1055
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1059
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[4].indexColumns, Using: yyDollar[2].colIdent}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1063
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1067
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1071
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
			yyVAL.indexDefinition.ReferencesTable = yyDollar[6].tableName
			yyVAL.indexDefinition.ReferencesColumns = yyDollar[8].indexColumns
			yyVAL.indexDefinition.ReferencesOption = yyDollar[10].ForeignOption

		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1082
		{
			yyVAL.indexInfo = &IndexInfo{Type: "PRIMARY", Name: NewColIdent(string(yyDollar[2].bytes)), Primary: true}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexInfo = &IndexInfo{Type: "UNIQUE", Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexInfo = &IndexInfo{Type: "UNIQUE", Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexInfo = &IndexInfo{Type: "FOREIGN", Name: NewColIdent(string(yyDollar[2].bytes)), Foreign: true}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.ForeignOption = yyDollar[1].ForeignOption
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.ForeignOption = yyDollar[1].ForeignOption.Merge(yyDollar[2].ForeignOption)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1113
		{
			yyVAL.ForeignOption = ForeignOption{OnUpdate: yyDollar[3].bytes}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1117
		{
			yyVAL.ForeignOption = ForeignOption{OnDelete: yyDollar[3].bytes}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1124
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1195
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1205
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1209
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.TableOption = yyDollar[1].TableOption
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1219
		{
			yyVAL.TableOption = yyDollar[1].TableOption.Merge(yyDollar[2].TableOption)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.TableOption = yyDollar[1].TableOption.Merge(yyDollar[3].TableOption)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.TableOption = TableOption{AutoIncrement: IntegerPtr(yyDollar[2].bytes)}

		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1237
		{
			yyVAL.TableOption = TableOption{AutoIncrement: IntegerPtr(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.TableOption = TableOption{Engine: yyDollar[2].bytes}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1245
		{
			yyVAL.TableOption = TableOption{Charset: []byte(yyDollar[2].str)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.TableOption = TableOption{Charset: []byte(yyDollar[1].str)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.TableOption = TableOption{Collate: []byte(yyDollar[1].str)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.TableOption = TableOption{Collate: []byte(yyDollar[2].str)}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			yyVAL.TableOption = TableOption{Comment: yyDollar[2].bytes}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1265
		{
			yyVAL.TableOption = TableOption{Common: yyDollar[1].bytes}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1269
		{
			yyVAL.TableOption = TableOption{Common: append(append(yyDollar[1].bytes, '='), yyDollar[2].bytes...)}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1324
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1359
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1364
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, Option: yyDollar[5].TableOption}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1396
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1402
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1406
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1412
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1416
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1428
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &DDL{Action: DropDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1440
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1445
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropViewStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1571
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1575
		{
			yyVAL.str = SessionStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1579
		{
			yyVAL.str = GlobalStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1595
		{
			yyVAL.statement = &Begin{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1599
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Commit{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Rollback{}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &OtherRead{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			setAllowComments(yylex, true)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1648
		{
			yyVAL.bytes2 = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1652
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.str = UnionStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.str = UnionAllStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = UnionDistinctStr
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = SQLCacheStr
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1684
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1688
		{
			yyVAL.str = DistinctStr
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = StraightJoinHint
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1702
		{
			yyVAL.selectExprs = nil
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1726
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1734
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1739
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1754
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1759
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1769
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1773
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1797
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1801
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1811
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1821
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1834
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1838
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1842
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1846
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1852
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1854
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1858
		{
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1864
		{
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1866
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1869
		{
			yyVAL.empty = struct{}{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1874
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1878
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1882
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1889
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = JoinStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = JoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = JoinStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.str = StraightJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1915
		{
			yyVAL.str = LeftJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = LeftJoinStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = RightJoinStr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = RightJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1933
		{
			yyVAL.str = NaturalJoinStr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1937
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1947
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1966
		{
			yyVAL.indexHints = nil
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1970
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1974
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1978
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1983
		{
			yyVAL.expr = nil
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1987
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2001
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2005
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = IsNullStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = IsNotNullStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = IsTrueStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = IsNotTrueStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.str = IsFalseStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2105
		{
			yyVAL.str = IsNotFalseStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = EqualStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = LessThanStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = GreaterThanStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = LessEqualStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = GreaterEqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = NotEqualStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2140
		{
			yyVAL.expr = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2144
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2164
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2170
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: NewIntVal(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 455:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 456:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("now")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2448
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2452
		{
			yyVAL.str = BooleanModeStr
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2456
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 477:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2460
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2464
		{
			yyVAL.str = QueryExpansionStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2480
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2484
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2488
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = nil
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2544
		{
			yyVAL.str = string("")
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2548
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2564
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = nil
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2579
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2583
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2587
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &NullVal{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2645
		{
			yyVAL.exprs = nil
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2649
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2663
		{
			yyVAL.orderBy = nil
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2673
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2677
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2688
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = AscScr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2696
		{
			yyVAL.str = DescScr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2701
		{
			yyVAL.limit = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2705
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2709
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2713
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = ForUpdateStr
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = ShareModeStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2739
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2747
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2752
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2756
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2760
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2771
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2775
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2779
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2784
		{
			yyVAL.updateExprs = nil
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2788
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2794
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2814
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2840
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2846
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2850
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2856
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2860
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.bytes = []byte("charset")
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &Default{}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2891
		{
			yyVAL.byt = 0
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2893
		{
			yyVAL.byt = 1
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2896
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2898
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2901
		{
			yyVAL.str = ""
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.str = IgnoreStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2911
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2917
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2923
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2928
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2941
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2957
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2970
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			decNesting(yylex)
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3195
		{
			forceEOF(yylex)
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3200
		{
			forceEOF(yylex)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3204
		{
			forceEOF(yylex)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3208
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
