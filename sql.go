//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const SHOW = 57456
const DESCRIBE = 57457
const EXPLAIN = 57458
const DATE = 57459
const ESCAPE = 57460
const REPAIR = 57461
const OPTIMIZE = 57462
const TRUNCATE = 57463
const MAXVALUE = 57464
const PARTITION = 57465
const REORGANIZE = 57466
const LESS = 57467
const THAN = 57468
const PROCEDURE = 57469
const TRIGGER = 57470
const VINDEX = 57471
const VINDEXES = 57472
const STATUS = 57473
const VARIABLES = 57474
const BEGIN = 57475
const START = 57476
const TRANSACTION = 57477
const COMMIT = 57478
const ROLLBACK = 57479
const BIT = 57480
const TINYINT = 57481
const SMALLINT = 57482
const MEDIUMINT = 57483
const INT = 57484
const INTEGER = 57485
const BIGINT = 57486
const INTNUM = 57487
const REAL = 57488
const DOUBLE = 57489
const FLOAT_TYPE = 57490
const DECIMAL = 57491
const NUMERIC = 57492
const TIME = 57493
const TIMESTAMP = 57494
const DATETIME = 57495
const YEAR = 57496
const CHAR = 57497
const VARCHAR = 57498
const BOOL = 57499
const CHARACTER = 57500
const VARBINARY = 57501
const NCHAR = 57502
const TEXT = 57503
const TINYTEXT = 57504
const MEDIUMTEXT = 57505
const LONGTEXT = 57506
const BLOB = 57507
const TINYBLOB = 57508
const MEDIUMBLOB = 57509
const LONGBLOB = 57510
const JSON = 57511
const ENUM = 57512
const NULLX = 57513
const AUTO_INCREMENT = 57514
const APPROXNUM = 57515
const SIGNED = 57516
const UNSIGNED = 57517
const ZEROFILL = 57518
const DATABASES = 57519
const TABLES = 57520
const VITESS_KEYSPACES = 57521
const VITESS_SHARDS = 57522
const VITESS_TABLETS = 57523
const VSCHEMA_TABLES = 57524
const NAMES = 57525
const CHARSET = 57526
const GLOBAL = 57527
const SESSION = 57528
const CURRENT_TIMESTAMP = 57529
const DATABASE = 57530
const CURRENT_DATE = 57531
const CURRENT_TIME = 57532
const LOCALTIME = 57533
const LOCALTIMESTAMP = 57534
const UTC_DATE = 57535
const UTC_TIME = 57536
const UTC_TIMESTAMP = 57537
const REPLACE = 57538
const CONVERT = 57539
const CAST = 57540
const GROUP_CONCAT = 57541
const SEPARATOR = 57542
const MATCH = 57543
const AGAINST = 57544
const BOOLEAN = 57545
const LANGUAGE = 57546
const WITH = 57547
const QUERY = 57548
const EXPANSION = 57549
const UNUSED = 57550

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 217,
	109, 536,
	-2, 532,
	-1, 218,
	109, 537,
	-2, 533,
	-1, 284,
	80, 677,
	-2, 46,
	-1, 285,
	80, 650,
	-2, 47,
	-1, 290,
	80, 637,
	-2, 498,
	-1, 292,
	80, 664,
	-2, 500,
	-1, 656,
	109, 539,
	-2, 535,
	-1, 847,
	5, 28,
	-2, 351,
	-1, 867,
	5, 27,
	-2, 474,
	-1, 1063,
	5, 28,
	-2, 475,
	-1, 1103,
	5, 27,
	-2, 477,
	-1, 1152,
	5, 28,
	-2, 478,
}

const yyPrivate = 57344

const yyLast = 9158

var yyAct = [...]int{

	218, 1143, 794, 983, 601, 714, 1008, 247, 492, 1069,
	791, 222, 215, 984, 745, 734, 922, 537, 748, 535,
	749, 887, 196, 53, 786, 870, 962, 691, 681, 839,
	980, 75, 190, 289, 772, 166, 913, 715, 166, 925,
	688, 758, 703, 425, 782, 747, 658, 876, 431, 491,
	3, 383, 711, 283, 539, 524, 220, 437, 445, 821,
	205, 272, 166, 166, 75, 504, 52, 423, 1171, 166,
	281, 75, 1161, 1169, 1150, 1167, 191, 192, 193, 194,
	795, 270, 1160, 1149, 975, 1057, 389, 209, 1119, 904,
	808, 158, 160, 161, 765, 1081, 57, 195, 1096, 271,
	773, 395, 1052, 1050, 807, 1130, 458, 457, 467, 468,
	460, 461, 462, 463, 464, 465, 466, 459, 189, 406,
	469, 59, 60, 61, 62, 63, 417, 418, 1168, 1166,
	1144, 812, 946, 963, 712, 396, 690, 735, 737, 1117,
	806, 386, 156, 606, 1013, 1014, 1015, 886, 943, 155,
	600, 156, 1018, 1016, 945, 885, 166, 884, 166, 387,
	1135, 965, 392, 166, 169, 157, 760, 481, 482, 1066,
	166, 949, 411, 874, 75, 75, 75, 75, 159, 75,
	75, 408, 833, 410, 746, 630, 75, 449, 803, 800,
	801, 401, 799, 967, 898, 971, 1022, 966, 459, 964,
	175, 469, 469, 627, 969, 442, 760, 407, 409, 224,
	736, 665, 75, 968, 444, 810, 813, 773, 970, 972,
	977, 444, 1032, 433, 185, 663, 664, 662, 873, 23,
	24, 48, 26, 27, 384, 1118, 1116, 1131, 483, 484,
	485, 486, 487, 488, 489, 944, 1023, 942, 42, 550,
	805, 434, 704, 28, 766, 1148, 902, 759, 443, 442,
	704, 397, 857, 399, 804, 629, 597, 1138, 405, 439,
	166, 275, 37, 385, 170, 444, 50, 166, 166, 166,
	172, 154, 424, 75, 1087, 1086, 178, 174, 75, 809,
	1017, 648, 650, 651, 633, 634, 649, 759, 917, 435,
	811, 628, 757, 756, 916, 462, 463, 464, 465, 466,
	459, 762, 176, 469, 211, 180, 763, 443, 442, 830,
	831, 832, 50, 905, 506, 507, 508, 509, 510, 511,
	512, 682, 661, 683, 444, 30, 31, 33, 32, 35,
	443, 442, 269, 171, 1123, 391, 1154, 414, 415, 416,
	852, 419, 420, 549, 36, 43, 44, 444, 422, 45,
	46, 34, 173, 179, 181, 182, 183, 184, 1099, 1084,
	187, 186, 914, 38, 39, 1010, 40, 41, 457, 467,
	468, 460, 461, 462, 463, 464, 465, 466, 459, 75,
	899, 469, 166, 166, 75, 851, 166, 850, 443, 442,
	166, 891, 166, 797, 75, 75, 75, 75, 75, 75,
	75, 75, 684, 443, 442, 444, 443, 442, 75, 75,
	1157, 424, 166, 979, 1107, 1141, 1107, 424, 1122, 479,
	444, 1107, 1108, 444, 609, 614, 49, 75, 598, 248,
	47, 166, 1078, 1077, 1003, 424, 1019, 75, 460, 461,
	462, 463, 464, 465, 466, 459, 635, 596, 469, 403,
	659, 612, 1065, 424, 657, 1029, 1028, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 398, 656, 1025, 1026, 275, 47, 384, 413,
	75, 1025, 1024, 845, 424, 201, 637, 521, 424, 693,
	424, 276, 636, 23, 75, 652, 557, 556, 871, 654,
	693, 546, 428, 432, 981, 21, 520, 871, 1061, 166,
	23, 23, 166, 166, 166, 166, 166, 865, 521, 450,
	866, 952, 716, 54, 166, 1031, 1027, 166, 685, 686,
	521, 166, 892, 845, 695, 166, 166, 1102, 548, 75,
	50, 872, 547, 286, 545, 708, 872, 75, 701, 692,
	694, 599, 631, 493, 741, 50, 605, 50, 50, 1091,
	502, 200, 845, 706, 845, 202, 615, 616, 617, 618,
	619, 620, 621, 622, 720, 721, 695, 723, 731, 767,
	623, 624, 602, 521, 787, 739, 740, 75, 871, 997,
	895, 166, 743, 733, 774, 775, 776, 166, 783, 753,
	75, 166, 75, 412, 412, 412, 412, 778, 412, 412,
	788, 719, 50, 777, 722, 412, 877, 878, 1012, 65,
	792, 981, 696, 697, 918, 880, 700, 784, 785, 610,
	421, 47, 789, 728, 726, 1165, 643, 883, 729, 727,
	707, 882, 709, 710, 725, 730, 478, 530, 531, 480,
	724, 1159, 660, 948, 656, 526, 529, 530, 531, 527,
	659, 528, 532, 206, 207, 818, 836, 837, 838, 823,
	822, 438, 1164, 828, 827, 909, 490, 555, 494, 495,
	496, 497, 498, 499, 500, 436, 503, 505, 505, 505,
	505, 505, 505, 505, 505, 513, 514, 515, 516, 835,
	237, 236, 239, 240, 241, 242, 536, 426, 404, 238,
	243, 901, 1140, 1139, 246, 1100, 1092, 896, 1059, 427,
	790, 275, 275, 275, 275, 275, 608, 534, 438, 75,
	203, 204, 826, 197, 1128, 856, 275, 1127, 198, 75,
	825, 54, 842, 1094, 275, 73, 843, 645, 646, 872,
	440, 867, 1132, 847, 848, 849, 889, 890, 853, 893,
	881, 1082, 286, 859, 626, 860, 861, 862, 863, 829,
	56, 58, 815, 544, 817, 51, 1, 908, 288, 910,
	911, 912, 796, 75, 75, 390, 75, 921, 802, 897,
	1142, 1007, 755, 906, 907, 382, 64, 754, 1115, 493,
	1080, 761, 698, 699, 903, 915, 764, 75, 1011, 768,
	769, 770, 771, 1137, 900, 166, 844, 560, 412, 561,
	559, 924, 563, 412, 75, 779, 780, 781, 854, 562,
	938, 558, 177, 412, 412, 412, 412, 412, 412, 412,
	412, 282, 533, 958, 959, 551, 441, 412, 412, 67,
	941, 940, 798, 477, 824, 744, 956, 287, 988, 75,
	75, 982, 660, 961, 985, 955, 632, 716, 976, 974,
	973, 430, 1126, 716, 1093, 855, 501, 702, 223, 647,
	235, 990, 232, 75, 991, 75, 75, 234, 288, 288,
	288, 288, 233, 288, 288, 638, 864, 451, 656, 992,
	288, 1005, 960, 1004, 221, 1006, 213, 274, 987, 166,
	47, 1020, 1021, 517, 525, 523, 522, 75, 279, 879,
	875, 273, 951, 1056, 494, 1129, 447, 642, 25, 655,
	75, 166, 55, 819, 820, 208, 432, 75, 19, 18,
	75, 17, 20, 166, 16, 1002, 15, 14, 1033, 29,
	13, 276, 276, 276, 276, 276, 920, 12, 11, 10,
	1043, 1035, 1041, 9, 1038, 8, 536, 1040, 738, 7,
	6, 5, 4, 199, 276, 22, 2, 0, 0, 947,
	0, 0, 1048, 0, 0, 0, 0, 0, 75, 0,
	75, 75, 75, 166, 75, 0, 75, 288, 846, 1071,
	1072, 1073, 552, 1060, 1068, 0, 0, 0, 0, 858,
	1074, 0, 0, 1042, 0, 0, 893, 1076, 0, 0,
	1044, 75, 75, 75, 0, 0, 0, 0, 286, 0,
	0, 1053, 1054, 0, 0, 0, 750, 0, 1089, 412,
	0, 412, 0, 1090, 1062, 1063, 1064, 0, 1067, 1083,
	0, 1085, 0, 0, 0, 0, 75, 75, 1097, 985,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 75,
	0, 1095, 0, 0, 0, 1114, 750, 0, 1113, 0,
	1112, 0, 75, 0, 0, 834, 0, 0, 1120, 0,
	1121, 1124, 0, 0, 0, 0, 1133, 0, 75, 0,
	985, 0, 0, 288, 1103, 0, 0, 0, 288, 0,
	655, 0, 0, 0, 1098, 0, 0, 0, 288, 288,
	288, 288, 288, 288, 288, 288, 75, 1146, 1151, 1109,
	1110, 1111, 288, 288, 716, 75, 1155, 0, 0, 0,
	0, 868, 869, 933, 1134, 0, 0, 0, 1162, 1163,
	0, 639, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 447, 978, 0, 288, 0, 0, 0, 933, 0,
	0, 931, 0, 1172, 0, 0, 0, 993, 994, 0,
	0, 0, 996, 0, 0, 998, 0, 1147, 0, 0,
	0, 0, 1152, 1088, 0, 0, 931, 0, 0, 0,
	1156, 0, 0, 0, 687, 0, 0, 0, 1045, 1046,
	0, 1047, 0, 0, 1049, 0, 1051, 0, 705, 0,
	0, 0, 0, 412, 0, 0, 0, 0, 750, 0,
	1174, 1175, 0, 0, 932, 717, 0, 0, 0, 937,
	934, 927, 928, 935, 930, 929, 412, 0, 0, 0,
	0, 0, 0, 0, 1079, 936, 0, 0, 0, 932,
	0, 939, 0, 288, 937, 934, 927, 928, 935, 930,
	929, 288, 0, 0, 0, 923, 0, 0, 0, 0,
	936, 0, 0, 0, 1058, 0, 926, 0, 0, 0,
	0, 493, 0, 0, 0, 0, 986, 0, 47, 277,
	467, 468, 460, 461, 462, 463, 464, 465, 466, 459,
	0, 288, 469, 954, 999, 1000, 1001, 429, 0, 0,
	0, 0, 0, 0, 288, 0, 288, 0, 0, 526,
	529, 530, 531, 527, 163, 528, 532, 0, 0, 877,
	878, 0, 0, 0, 0, 288, 0, 0, 0, 0,
	0, 0, 164, 0, 995, 188, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 388, 0,
	424, 0, 750, 0, 750, 0, 0, 212, 0, 164,
	164, 0, 276, 0, 0, 0, 164, 458, 457, 467,
	468, 460, 461, 462, 463, 464, 465, 466, 459, 0,
	0, 469, 0, 0, 0, 1055, 458, 457, 467, 468,
	460, 461, 462, 463, 464, 465, 466, 459, 957, 0,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 840, 1145, 493, 0, 0, 0, 0, 458, 457,
	467, 468, 460, 461, 462, 463, 464, 465, 466, 459,
	0, 0, 469, 888, 0, 393, 0, 394, 0, 0,
	412, 0, 400, 288, 0, 0, 0, 0, 0, 402,
	0, 0, 0, 164, 0, 164, 0, 0, 0, 0,
	164, 0, 0, 0, 0, 750, 0, 164, 0, 0,
	0, 986, 0, 0, 1104, 0, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 288, 0,
	288, 923, 750, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1125, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 986, 453, 47, 456, 0, 0, 0, 0,
	0, 470, 471, 472, 473, 474, 475, 476, 288, 454,
	455, 452, 458, 457, 467, 468, 460, 461, 462, 463,
	464, 465, 466, 459, 0, 0, 469, 0, 0, 519,
	0, 0, 566, 0, 0, 0, 0, 0, 543, 0,
	717, 0, 0, 989, 888, 0, 717, 164, 0, 288,
	0, 0, 0, 0, 164, 541, 164, 0, 1170, 0,
	579, 0, 0, 0, 0, 0, 0, 288, 0, 288,
	1009, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 585, 586, 587, 588, 589, 590, 0, 591,
	592, 593, 594, 595, 580, 581, 582, 583, 564, 565,
	0, 1034, 567, 0, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 1036, 841, 0, 0, 0, 0,
	0, 1039, 0, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 458, 457, 467, 468, 460,
	461, 462, 463, 464, 465, 466, 459, 0, 0, 469,
	0, 603, 604, 0, 0, 607, 0, 0, 0, 611,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	164, 0, 1070, 164, 1070, 1070, 1070, 164, 1075, 613,
	288, 625, 458, 457, 467, 468, 460, 461, 462, 463,
	464, 465, 466, 459, 0, 0, 469, 0, 0, 164,
	644, 0, 0, 0, 0, 288, 288, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 613, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1009, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 212, 0,
	0, 0, 0, 212, 212, 0, 0, 212, 713, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 212, 212, 212, 0, 164, 0, 718, 164,
	164, 164, 164, 164, 0, 742, 0, 717, 0, 0,
	1153, 732, 0, 0, 164, 0, 0, 0, 541, 1158,
	0, 0, 164, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	816, 114, 0, 0, 0, 0, 0, 0, 164, 0,
	91, 0, 0, 0, 164, 101, 0, 103, 164, 0,
	125, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 458, 457, 467, 468, 460, 461,
	462, 463, 464, 465, 466, 459, 0, 0, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 117, 212,
	0, 128, 96, 95, 0, 0, 0, 87, 0, 122,
	115, 140, 0, 116, 121, 104, 132, 118, 139, 168,
	146, 130, 145, 77, 129, 138, 86, 123, 79, 136,
	127, 108, 98, 99, 78, 0, 120, 90, 94, 89,
	113, 133, 134, 88, 152, 82, 144, 81, 83, 143,
	112, 131, 137, 109, 106, 80, 135, 107, 105, 100,
	92, 0, 0, 0, 126, 141, 153, 0, 0, 147,
	148, 149, 150, 111, 84, 97, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 102, 151, 119, 93, 142, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 718,
	0, 0, 613, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 0, 0,
	1037, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 0, 0, 0, 0, 0, 0, 0, 371, 361,
	0, 334, 373, 312, 326, 381, 327, 328, 355, 300,
	342, 114, 324, 0, 315, 295, 321, 296, 313, 336,
	91, 339, 311, 363, 345, 101, 379, 103, 350, 0,
	125, 110, 0, 0, 338, 365, 340, 360, 333, 356,
	305, 349, 374, 325, 353, 375, 0, 0, 0, 74,
	0, 751, 752, 0, 0, 0, 0, 0, 85, 0,
	352, 370, 323, 354, 294, 351, 0, 298, 301, 380,
	368, 318, 319, 894, 0, 0, 0, 0, 0, 0,
	337, 341, 357, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 348, 0, 0, 0, 302, 299,
	0, 335, 0, 0, 0, 304, 0, 317, 358, 0,
	293, 366, 332, 167, 369, 330, 329, 372, 117, 0,
	718, 128, 96, 95, 364, 314, 322, 87, 320, 122,
	115, 140, 347, 116, 121, 104, 132, 118, 139, 168,
	146, 130, 145, 77, 129, 138, 86, 123, 79, 136,
	127, 108, 98, 99, 78, 0, 120, 90, 94, 89,
	113, 133, 134, 88, 152, 82, 144, 81, 83, 143,
	112, 131, 137, 109, 106, 80, 135, 107, 105, 100,
	92, 0, 297, 0, 126, 141, 153, 310, 367, 147,
	148, 149, 150, 111, 84, 97, 124, 308, 309, 306,
	307, 343, 344, 376, 377, 378, 359, 303, 0, 0,
	362, 346, 76, 0, 102, 151, 119, 93, 142, 371,
	361, 0, 334, 373, 312, 326, 381, 327, 328, 355,
	300, 342, 114, 324, 0, 315, 295, 321, 296, 313,
	336, 91, 339, 311, 363, 345, 101, 379, 103, 350,
	0, 125, 110, 0, 0, 338, 365, 340, 360, 333,
	356, 305, 349, 374, 325, 353, 375, 0, 0, 0,
	74, 0, 751, 752, 0, 0, 0, 0, 0, 85,
	0, 352, 370, 323, 354, 294, 351, 0, 298, 301,
	380, 368, 318, 319, 0, 0, 0, 0, 0, 0,
	0, 337, 341, 357, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 348, 0, 0, 0, 302,
	299, 0, 335, 0, 0, 0, 304, 0, 317, 358,
	0, 293, 366, 332, 167, 369, 330, 329, 372, 117,
	0, 0, 128, 96, 95, 364, 314, 322, 87, 320,
	122, 115, 140, 347, 116, 121, 104, 132, 118, 139,
	168, 146, 130, 145, 77, 129, 138, 86, 123, 79,
	136, 127, 108, 98, 99, 78, 0, 120, 90, 94,
	89, 113, 133, 134, 88, 152, 82, 144, 81, 83,
	143, 112, 131, 137, 109, 106, 80, 135, 107, 105,
	100, 92, 0, 297, 0, 126, 141, 153, 310, 367,
	147, 148, 149, 150, 111, 84, 97, 124, 308, 309,
	306, 307, 343, 344, 376, 377, 378, 359, 303, 0,
	0, 362, 346, 76, 0, 102, 151, 119, 93, 142,
	371, 361, 0, 334, 373, 312, 326, 381, 327, 328,
	355, 300, 342, 114, 324, 0, 315, 295, 321, 296,
	313, 336, 91, 339, 311, 363, 345, 101, 379, 103,
	350, 0, 125, 110, 0, 0, 338, 365, 340, 360,
	333, 356, 305, 349, 374, 325, 353, 375, 50, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 352, 370, 323, 354, 294, 351, 0, 298,
	301, 380, 368, 318, 319, 0, 0, 0, 0, 0,
	0, 0, 337, 341, 357, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 348, 0, 0, 0,
	302, 299, 0, 335, 0, 0, 0, 304, 0, 317,
	358, 0, 293, 366, 332, 167, 369, 330, 329, 372,
	117, 0, 0, 128, 96, 95, 364, 314, 322, 87,
	320, 122, 115, 140, 347, 116, 121, 104, 132, 118,
	139, 168, 146, 130, 145, 77, 129, 138, 86, 123,
	79, 136, 127, 108, 98, 99, 78, 0, 120, 90,
	94, 89, 113, 133, 134, 88, 152, 82, 144, 81,
	83, 143, 112, 131, 137, 109, 106, 80, 135, 107,
	105, 100, 92, 0, 297, 0, 126, 141, 153, 310,
	367, 147, 148, 149, 150, 111, 84, 97, 124, 308,
	309, 306, 307, 343, 344, 376, 377, 378, 359, 303,
	0, 0, 362, 346, 76, 0, 102, 151, 119, 93,
	142, 371, 361, 0, 334, 373, 312, 326, 381, 327,
	328, 355, 300, 342, 114, 324, 0, 315, 295, 321,
	296, 313, 336, 91, 339, 311, 363, 345, 101, 379,
	103, 350, 0, 125, 110, 0, 0, 338, 365, 340,
	360, 333, 356, 305, 349, 374, 325, 353, 375, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 352, 370, 323, 354, 294, 351, 0,
	298, 301, 380, 368, 318, 319, 0, 0, 0, 0,
	0, 0, 0, 337, 341, 357, 331, 0, 0, 0,
	0, 0, 0, 953, 0, 316, 0, 348, 0, 0,
	0, 302, 299, 0, 335, 0, 0, 0, 304, 0,
	317, 358, 0, 293, 366, 332, 167, 369, 330, 329,
	372, 117, 0, 0, 128, 96, 95, 364, 314, 322,
	87, 320, 122, 115, 140, 347, 116, 121, 104, 132,
	118, 139, 168, 146, 130, 145, 77, 129, 138, 86,
	123, 79, 136, 127, 108, 98, 99, 78, 0, 120,
	90, 94, 89, 113, 133, 134, 88, 152, 82, 144,
	81, 83, 143, 112, 131, 137, 109, 106, 80, 135,
	107, 105, 100, 92, 0, 297, 0, 126, 141, 153,
	310, 367, 147, 148, 149, 150, 111, 84, 97, 124,
	308, 309, 306, 307, 343, 344, 376, 377, 378, 359,
	303, 0, 0, 362, 346, 76, 0, 102, 151, 119,
	93, 142, 371, 361, 0, 334, 373, 312, 326, 381,
	327, 328, 355, 300, 342, 114, 324, 0, 315, 295,
	321, 296, 313, 336, 91, 339, 311, 363, 345, 101,
	379, 103, 350, 0, 125, 110, 0, 0, 338, 365,
	340, 360, 333, 356, 305, 349, 374, 325, 353, 375,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 352, 370, 323, 354, 294, 351,
	0, 298, 301, 380, 368, 318, 319, 0, 0, 0,
	0, 0, 0, 0, 337, 341, 357, 331, 0, 0,
	0, 0, 0, 0, 653, 0, 316, 0, 348, 0,
	0, 0, 302, 299, 0, 335, 0, 0, 0, 304,
	0, 317, 358, 0, 293, 366, 332, 167, 369, 330,
	329, 372, 117, 0, 0, 128, 96, 95, 364, 314,
	322, 87, 320, 122, 115, 140, 347, 116, 121, 104,
	132, 118, 139, 168, 146, 130, 145, 77, 129, 138,
	86, 123, 79, 136, 127, 108, 98, 99, 78, 0,
	120, 90, 94, 89, 113, 133, 134, 88, 152, 82,
	144, 81, 83, 143, 112, 131, 137, 109, 106, 80,
	135, 107, 105, 100, 92, 0, 297, 0, 126, 141,
	153, 310, 367, 147, 148, 149, 150, 111, 84, 97,
	124, 308, 309, 306, 307, 343, 344, 376, 377, 378,
	359, 303, 0, 0, 362, 346, 76, 0, 102, 151,
	119, 93, 142, 371, 361, 0, 334, 373, 312, 326,
	381, 327, 328, 355, 300, 342, 114, 324, 0, 315,
	295, 321, 296, 313, 336, 91, 339, 311, 363, 345,
	101, 379, 103, 350, 0, 125, 110, 0, 0, 338,
	365, 340, 360, 333, 356, 305, 349, 374, 325, 353,
	375, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 352, 370, 323, 354, 294,
	351, 0, 298, 301, 380, 368, 318, 319, 0, 0,
	0, 0, 0, 0, 0, 337, 341, 357, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 348,
	0, 0, 0, 302, 299, 0, 335, 0, 0, 0,
	304, 0, 317, 358, 0, 293, 366, 332, 167, 369,
	330, 329, 372, 117, 0, 0, 128, 96, 95, 364,
	314, 322, 87, 320, 122, 115, 140, 347, 116, 121,
	104, 132, 118, 139, 168, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 297, 0, 126,
	141, 153, 310, 367, 147, 148, 149, 150, 111, 84,
	97, 124, 308, 309, 306, 307, 343, 344, 376, 377,
	378, 359, 303, 0, 0, 362, 346, 76, 0, 102,
	151, 119, 93, 142, 371, 361, 0, 334, 373, 312,
	326, 381, 327, 328, 355, 300, 342, 114, 324, 0,
	315, 295, 321, 296, 313, 336, 91, 339, 311, 363,
	345, 101, 379, 103, 350, 0, 125, 110, 0, 0,
	338, 365, 340, 360, 333, 356, 305, 349, 374, 325,
	353, 375, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 352, 370, 323, 354,
	294, 351, 0, 298, 301, 380, 368, 318, 319, 0,
	0, 0, 0, 0, 0, 0, 337, 341, 357, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	348, 0, 0, 0, 302, 299, 0, 335, 0, 0,
	0, 304, 0, 317, 358, 0, 293, 366, 332, 167,
	369, 330, 329, 372, 117, 0, 0, 128, 96, 95,
	364, 314, 322, 87, 320, 122, 115, 140, 347, 116,
	121, 104, 132, 118, 139, 168, 146, 130, 145, 77,
	129, 138, 86, 123, 79, 136, 127, 108, 98, 99,
	78, 0, 120, 90, 94, 89, 113, 133, 134, 88,
	152, 82, 144, 81, 83, 143, 112, 131, 137, 109,
	106, 80, 135, 107, 105, 100, 92, 0, 297, 0,
	126, 141, 153, 310, 367, 147, 148, 149, 150, 111,
	84, 97, 124, 308, 309, 306, 307, 343, 344, 376,
	377, 378, 359, 303, 0, 0, 362, 346, 76, 0,
	102, 151, 119, 93, 142, 371, 361, 0, 334, 373,
	312, 326, 381, 327, 328, 355, 300, 342, 114, 324,
	0, 315, 295, 321, 296, 313, 336, 91, 339, 311,
	363, 345, 101, 379, 103, 350, 0, 125, 110, 0,
	0, 338, 365, 340, 360, 333, 356, 305, 349, 374,
	325, 353, 375, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 352, 370, 323,
	354, 294, 351, 0, 298, 301, 380, 368, 318, 319,
	0, 0, 0, 0, 0, 0, 0, 337, 341, 357,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 348, 0, 0, 0, 302, 299, 0, 335, 0,
	0, 0, 304, 0, 317, 358, 0, 293, 366, 332,
	167, 369, 330, 329, 372, 117, 0, 0, 128, 96,
	95, 364, 314, 322, 87, 320, 122, 115, 140, 347,
	116, 121, 104, 132, 118, 139, 168, 146, 130, 145,
	77, 129, 138, 86, 123, 79, 136, 127, 108, 98,
	99, 78, 0, 120, 90, 94, 89, 113, 133, 134,
	88, 152, 82, 144, 81, 291, 143, 112, 131, 137,
	109, 106, 80, 135, 107, 105, 100, 92, 0, 297,
	0, 126, 141, 153, 310, 367, 147, 148, 149, 150,
	292, 290, 97, 124, 308, 309, 306, 307, 343, 344,
	376, 377, 378, 359, 303, 0, 0, 362, 346, 76,
	0, 102, 151, 119, 93, 142, 371, 361, 0, 334,
	373, 312, 326, 381, 327, 328, 355, 300, 342, 114,
	324, 0, 315, 295, 321, 296, 313, 336, 91, 339,
	311, 363, 345, 101, 379, 103, 350, 0, 125, 110,
	0, 0, 338, 365, 340, 360, 333, 356, 305, 349,
	374, 325, 353, 375, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 352, 370,
	323, 354, 294, 351, 0, 298, 301, 380, 368, 318,
	319, 0, 0, 0, 0, 0, 0, 0, 337, 341,
	357, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 348, 0, 0, 0, 302, 299, 0, 335,
	0, 0, 0, 304, 0, 317, 358, 0, 293, 366,
	332, 167, 369, 330, 329, 372, 117, 0, 0, 128,
	96, 95, 364, 314, 322, 87, 320, 122, 115, 140,
	347, 116, 121, 104, 132, 118, 139, 168, 146, 130,
	145, 77, 129, 138, 86, 123, 79, 136, 127, 108,
	98, 99, 78, 0, 120, 90, 94, 89, 113, 133,
	134, 88, 152, 82, 144, 81, 83, 143, 112, 131,
	137, 109, 106, 80, 135, 107, 105, 100, 92, 0,
	297, 0, 126, 141, 153, 310, 367, 147, 148, 149,
	150, 111, 84, 97, 124, 308, 309, 306, 307, 343,
	344, 376, 377, 378, 359, 303, 0, 0, 362, 346,
	76, 0, 102, 151, 119, 93, 142, 371, 361, 0,
	334, 373, 312, 326, 381, 327, 328, 355, 300, 342,
	114, 324, 0, 315, 295, 321, 296, 313, 336, 91,
	339, 311, 363, 345, 101, 379, 103, 350, 0, 125,
	110, 0, 0, 338, 365, 340, 360, 333, 356, 305,
	349, 374, 325, 353, 375, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 352,
	370, 323, 354, 294, 351, 0, 298, 301, 380, 368,
	318, 319, 0, 0, 0, 0, 0, 0, 0, 337,
	341, 357, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 348, 0, 0, 0, 302, 299, 0,
	335, 0, 0, 0, 304, 0, 317, 358, 0, 293,
	366, 332, 167, 369, 330, 329, 372, 117, 0, 0,
	128, 96, 95, 364, 314, 322, 87, 320, 122, 115,
	140, 347, 116, 121, 104, 132, 118, 139, 168, 146,
	130, 145, 77, 129, 138, 86, 123, 79, 136, 127,
	108, 98, 99, 78, 0, 120, 90, 94, 89, 113,
	133, 134, 88, 152, 82, 144, 81, 291, 143, 112,
	131, 137, 109, 106, 80, 135, 107, 105, 100, 92,
	0, 297, 0, 126, 141, 153, 310, 367, 147, 148,
	149, 150, 292, 290, 285, 284, 308, 309, 306, 307,
	343, 344, 376, 377, 378, 359, 303, 0, 0, 362,
	346, 76, 0, 102, 151, 119, 93, 142, 114, 0,
	0, 689, 0, 219, 0, 0, 0, 91, 0, 216,
	0, 0, 101, 256, 103, 0, 0, 125, 110, 0,
	0, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 217, 237, 236, 239,
	240, 241, 242, 0, 0, 85, 238, 243, 244, 245,
	0, 0, 214, 230, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 210, 0, 0,
	0, 267, 0, 229, 0, 0, 225, 226, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 0, 265, 0, 117, 0, 0, 128, 96,
	95, 0, 0, 0, 87, 0, 122, 115, 140, 0,
	116, 121, 104, 132, 118, 139, 168, 146, 130, 145,
	77, 129, 138, 86, 123, 79, 136, 127, 108, 98,
	99, 78, 0, 120, 90, 94, 89, 113, 133, 134,
	88, 152, 82, 144, 81, 83, 143, 112, 131, 137,
	109, 106, 80, 135, 107, 105, 100, 92, 0, 0,
	0, 126, 141, 153, 0, 0, 147, 148, 149, 150,
	111, 84, 97, 124, 257, 266, 263, 264, 261, 262,
	260, 259, 258, 268, 251, 252, 254, 0, 253, 76,
	0, 102, 151, 119, 93, 142, 114, 0, 0, 0,
	0, 219, 0, 0, 0, 91, 0, 216, 0, 0,
	101, 256, 103, 0, 0, 125, 110, 0, 0, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 424, 217, 237, 236, 239, 240, 241,
	242, 0, 0, 85, 238, 243, 244, 245, 0, 0,
	214, 230, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 0, 0, 0, 0, 267,
	0, 229, 0, 0, 225, 226, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	0, 265, 0, 117, 0, 0, 128, 96, 95, 0,
	0, 0, 87, 0, 122, 115, 140, 0, 116, 121,
	104, 132, 118, 139, 168, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 0, 0, 126,
	141, 153, 0, 0, 147, 148, 149, 150, 111, 84,
	97, 124, 257, 266, 263, 264, 261, 262, 260, 259,
	258, 268, 251, 252, 254, 0, 253, 76, 0, 102,
	151, 119, 93, 142, 114, 0, 0, 0, 0, 219,
	0, 0, 0, 91, 0, 216, 0, 0, 101, 256,
	103, 0, 0, 125, 110, 0, 0, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 217, 237, 236, 239, 240, 241, 242, 0,
	0, 85, 238, 243, 244, 245, 0, 0, 214, 230,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 210, 0, 0, 0, 267, 0, 229,
	0, 0, 225, 226, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 265,
	0, 117, 0, 0, 128, 96, 95, 0, 0, 0,
	87, 0, 122, 115, 140, 0, 116, 121, 104, 132,
	118, 139, 168, 146, 130, 145, 77, 129, 138, 86,
	123, 79, 136, 127, 108, 98, 99, 78, 0, 120,
	90, 94, 89, 113, 133, 134, 88, 152, 82, 144,
	81, 83, 143, 112, 131, 137, 109, 106, 80, 135,
	107, 105, 100, 92, 0, 0, 0, 126, 141, 153,
	0, 0, 147, 148, 149, 150, 111, 84, 97, 124,
	257, 266, 263, 264, 261, 262, 260, 259, 258, 268,
	251, 252, 254, 23, 253, 76, 0, 102, 151, 119,
	93, 142, 0, 0, 0, 114, 0, 0, 0, 0,
	219, 0, 0, 0, 91, 0, 216, 0, 0, 101,
	256, 103, 0, 0, 125, 110, 0, 0, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 217, 237, 236, 239, 240, 241, 242,
	0, 0, 85, 238, 243, 244, 245, 0, 0, 214,
	230, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 0, 0, 0, 0, 267, 0,
	229, 0, 0, 225, 226, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	265, 0, 117, 0, 0, 128, 96, 95, 0, 0,
	0, 87, 0, 122, 115, 140, 0, 116, 121, 104,
	132, 118, 139, 168, 146, 130, 145, 77, 129, 138,
	86, 123, 79, 136, 127, 108, 98, 99, 78, 0,
	120, 90, 94, 89, 113, 133, 134, 88, 152, 82,
	144, 81, 83, 143, 112, 131, 137, 109, 106, 80,
	135, 107, 105, 100, 92, 0, 0, 0, 126, 141,
	153, 0, 0, 147, 148, 149, 150, 111, 84, 97,
	124, 257, 266, 263, 264, 261, 262, 260, 259, 258,
	268, 251, 252, 254, 0, 253, 76, 0, 102, 151,
	119, 93, 142, 114, 0, 0, 0, 0, 219, 0,
	0, 0, 91, 0, 216, 0, 0, 101, 256, 103,
	0, 0, 125, 110, 0, 0, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 217, 237, 236, 239, 240, 241, 242, 0, 0,
	85, 238, 243, 244, 245, 0, 0, 214, 230, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 0, 0, 0, 0, 267, 0, 229, 0,
	0, 225, 226, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 0, 265, 0,
	117, 0, 0, 128, 96, 95, 0, 0, 0, 87,
	0, 122, 115, 140, 0, 116, 121, 104, 132, 118,
	139, 168, 146, 130, 145, 77, 129, 138, 86, 123,
	79, 136, 127, 108, 98, 99, 78, 0, 120, 90,
	94, 89, 113, 133, 134, 88, 152, 82, 144, 81,
	83, 143, 112, 131, 137, 109, 106, 80, 135, 107,
	105, 100, 92, 0, 0, 0, 126, 141, 153, 0,
	0, 147, 148, 149, 150, 111, 84, 97, 124, 257,
	266, 263, 264, 261, 262, 260, 259, 258, 268, 251,
	252, 254, 114, 253, 76, 0, 102, 151, 119, 93,
	142, 91, 0, 0, 0, 0, 101, 256, 103, 0,
	0, 125, 110, 0, 0, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	217, 237, 236, 239, 240, 241, 242, 0, 0, 85,
	238, 243, 244, 245, 0, 0, 0, 230, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 0, 0, 0, 0, 267, 0, 229, 0, 0,
	225, 226, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 0, 265, 0, 117,
	0, 0, 128, 96, 95, 0, 0, 0, 87, 0,
	122, 115, 140, 1173, 116, 121, 104, 132, 118, 139,
	168, 146, 130, 145, 77, 129, 138, 86, 123, 79,
	136, 127, 108, 98, 99, 78, 0, 120, 90, 94,
	89, 113, 133, 134, 88, 152, 82, 144, 81, 83,
	143, 112, 131, 137, 109, 106, 80, 135, 107, 105,
	100, 92, 0, 0, 0, 126, 141, 153, 0, 0,
	147, 148, 149, 150, 111, 84, 97, 124, 257, 266,
	263, 264, 261, 262, 260, 259, 258, 268, 251, 252,
	254, 114, 253, 76, 0, 102, 151, 119, 93, 142,
	91, 0, 0, 0, 0, 101, 256, 103, 0, 0,
	125, 110, 0, 0, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 217,
	237, 236, 239, 240, 241, 242, 0, 0, 85, 238,
	243, 244, 245, 0, 0, 0, 230, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	0, 0, 0, 0, 267, 0, 229, 0, 0, 225,
	226, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 0, 265, 0, 117, 0,
	0, 128, 96, 95, 0, 0, 0, 87, 0, 122,
	115, 140, 0, 116, 121, 104, 132, 118, 139, 168,
	146, 130, 145, 77, 129, 138, 86, 123, 79, 136,
	127, 108, 98, 99, 78, 0, 120, 90, 94, 89,
	113, 133, 134, 88, 152, 82, 144, 81, 83, 143,
	112, 131, 137, 109, 106, 80, 135, 107, 105, 100,
	92, 0, 0, 0, 126, 141, 153, 0, 0, 147,
	148, 149, 150, 111, 84, 97, 124, 257, 266, 263,
	264, 261, 262, 260, 259, 258, 268, 251, 252, 254,
	0, 253, 76, 0, 102, 151, 119, 93, 142, 114,
	0, 0, 0, 446, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 101, 0, 103, 0, 0, 125, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 448,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 443, 442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 0, 0, 0, 117, 0, 0, 128,
	96, 95, 0, 0, 0, 87, 0, 122, 115, 140,
	0, 116, 121, 104, 132, 118, 139, 168, 146, 130,
	145, 77, 129, 138, 86, 123, 79, 136, 127, 108,
	98, 99, 78, 0, 120, 90, 94, 89, 113, 133,
	134, 88, 152, 82, 144, 81, 83, 143, 112, 131,
	137, 109, 106, 80, 135, 107, 105, 100, 92, 0,
	0, 0, 126, 141, 153, 0, 114, 147, 148, 149,
	150, 111, 84, 97, 124, 91, 0, 0, 0, 0,
	101, 0, 103, 0, 0, 125, 110, 0, 0, 0,
	76, 0, 102, 151, 119, 93, 142, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 68, 0,
	0, 0, 72, 117, 0, 0, 128, 96, 95, 0,
	0, 0, 87, 0, 122, 115, 140, 0, 116, 121,
	104, 132, 118, 139, 70, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 0, 0, 126,
	141, 153, 0, 0, 147, 148, 149, 150, 111, 84,
	97, 124, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 102,
	151, 119, 93, 142, 114, 0, 0, 0, 540, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 101, 0,
	103, 0, 0, 125, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 542, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 117, 0, 0, 128, 96, 95, 0, 0, 0,
	87, 0, 122, 115, 140, 0, 116, 121, 104, 132,
	118, 139, 168, 146, 130, 145, 77, 129, 138, 86,
	123, 79, 136, 127, 108, 98, 99, 78, 0, 120,
	90, 94, 89, 113, 133, 134, 88, 152, 82, 144,
	81, 83, 143, 112, 131, 137, 109, 106, 80, 135,
	107, 105, 100, 92, 0, 0, 0, 126, 141, 153,
	0, 0, 147, 148, 149, 150, 111, 84, 97, 124,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 76, 0, 102, 151, 119,
	93, 142, 91, 0, 0, 0, 0, 101, 0, 103,
	0, 0, 125, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	117, 0, 0, 128, 96, 95, 0, 0, 0, 87,
	0, 122, 115, 140, 0, 116, 121, 104, 132, 118,
	139, 168, 146, 130, 145, 77, 129, 138, 86, 123,
	79, 136, 127, 108, 98, 99, 78, 0, 120, 90,
	94, 89, 113, 133, 134, 88, 152, 82, 144, 81,
	83, 143, 112, 131, 137, 109, 106, 80, 135, 107,
	105, 100, 92, 0, 0, 0, 126, 141, 153, 0,
	0, 147, 148, 149, 150, 111, 84, 97, 124, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 76, 0, 102, 151, 119, 93,
	142, 91, 0, 0, 0, 0, 101, 0, 103, 0,
	0, 125, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 0, 0, 0, 117,
	0, 0, 128, 96, 95, 0, 0, 0, 87, 0,
	122, 115, 140, 0, 116, 121, 104, 132, 118, 139,
	168, 146, 130, 145, 77, 129, 138, 86, 123, 79,
	136, 127, 108, 98, 99, 78, 0, 120, 90, 94,
	89, 113, 133, 134, 88, 152, 82, 144, 81, 83,
	143, 112, 131, 137, 109, 106, 80, 135, 107, 105,
	100, 92, 0, 0, 0, 126, 141, 153, 0, 114,
	147, 148, 149, 150, 111, 84, 97, 124, 91, 0,
	0, 0, 0, 101, 0, 103, 0, 0, 125, 110,
	0, 0, 0, 76, 0, 102, 151, 119, 93, 142,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	640, 0, 0, 641, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 0, 0, 0, 117, 0, 0, 128,
	96, 95, 0, 0, 0, 87, 0, 122, 115, 140,
	0, 116, 121, 104, 132, 118, 139, 168, 146, 130,
	145, 77, 129, 138, 86, 123, 79, 136, 127, 108,
	98, 99, 78, 0, 120, 90, 94, 89, 113, 133,
	134, 88, 152, 82, 144, 81, 83, 143, 112, 131,
	137, 109, 106, 80, 135, 107, 105, 100, 92, 0,
	0, 0, 126, 141, 153, 0, 114, 147, 148, 149,
	150, 111, 84, 97, 124, 91, 0, 554, 0, 0,
	101, 0, 103, 0, 0, 125, 110, 0, 0, 0,
	76, 0, 102, 151, 119, 93, 142, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 553, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 117, 0, 0, 128, 96, 95, 0,
	0, 0, 87, 0, 122, 115, 140, 0, 116, 121,
	104, 132, 118, 139, 168, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 0, 0, 126,
	141, 153, 0, 0, 147, 148, 149, 150, 111, 84,
	97, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 102,
	151, 119, 93, 142, 114, 0, 0, 0, 540, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 101, 0,
	103, 0, 0, 125, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 542, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 117, 0, 0, 128, 96, 95, 0, 0, 0,
	87, 0, 122, 115, 140, 0, 538, 121, 104, 132,
	118, 139, 168, 146, 130, 145, 77, 129, 138, 86,
	123, 79, 136, 127, 108, 98, 99, 78, 0, 120,
	90, 94, 89, 113, 133, 134, 88, 152, 82, 144,
	81, 83, 143, 112, 131, 137, 109, 106, 80, 135,
	107, 105, 100, 92, 0, 0, 0, 126, 141, 153,
	0, 114, 147, 148, 149, 150, 111, 84, 97, 124,
	91, 0, 0, 0, 0, 101, 0, 103, 0, 0,
	125, 110, 0, 0, 0, 76, 0, 102, 151, 119,
	93, 142, 0, 0, 0, 0, 50, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 117, 0,
	0, 128, 96, 95, 0, 0, 0, 87, 0, 122,
	115, 140, 0, 116, 121, 104, 132, 118, 139, 168,
	146, 130, 145, 77, 129, 138, 86, 123, 79, 136,
	127, 108, 98, 99, 78, 0, 120, 90, 94, 89,
	113, 133, 134, 88, 152, 82, 144, 81, 83, 143,
	112, 131, 137, 109, 106, 80, 135, 107, 105, 100,
	92, 0, 0, 0, 126, 141, 153, 0, 114, 147,
	148, 149, 150, 111, 84, 97, 124, 91, 0, 0,
	0, 0, 101, 0, 103, 0, 0, 125, 110, 0,
	0, 0, 76, 0, 102, 151, 119, 93, 142, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 542, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 0, 0, 0, 117, 0, 0, 128, 96,
	95, 0, 0, 0, 87, 0, 122, 115, 140, 0,
	116, 121, 104, 132, 118, 139, 168, 146, 130, 145,
	77, 129, 138, 86, 123, 79, 136, 127, 108, 98,
	99, 78, 0, 120, 90, 94, 89, 113, 133, 134,
	88, 152, 82, 144, 81, 83, 143, 112, 131, 137,
	109, 106, 80, 135, 107, 105, 100, 92, 0, 0,
	0, 126, 141, 153, 0, 114, 147, 148, 149, 150,
	111, 84, 97, 124, 91, 0, 0, 0, 0, 101,
	0, 103, 0, 0, 125, 110, 0, 0, 0, 76,
	0, 102, 151, 119, 93, 142, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 448, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 117, 0, 0, 128, 96, 95, 0, 0,
	0, 87, 0, 122, 115, 140, 0, 116, 121, 104,
	132, 118, 139, 168, 146, 130, 145, 77, 129, 138,
	86, 123, 79, 136, 127, 108, 98, 99, 78, 0,
	120, 90, 94, 89, 113, 133, 134, 88, 152, 82,
	144, 81, 83, 143, 112, 131, 137, 109, 106, 80,
	135, 107, 105, 100, 92, 0, 0, 0, 126, 141,
	153, 0, 0, 147, 148, 149, 150, 111, 84, 97,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 76, 0, 102, 151,
	119, 93, 142, 518, 91, 0, 0, 0, 0, 101,
	0, 103, 0, 0, 125, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 117, 0, 0, 128, 96, 95, 0, 0,
	0, 87, 0, 122, 115, 140, 0, 116, 121, 104,
	132, 118, 139, 168, 146, 130, 145, 77, 129, 138,
	86, 123, 79, 136, 127, 108, 98, 99, 78, 0,
	120, 90, 94, 89, 113, 133, 134, 88, 152, 82,
	144, 81, 83, 143, 112, 131, 137, 109, 106, 80,
	135, 107, 105, 100, 92, 278, 0, 0, 126, 141,
	153, 0, 114, 147, 148, 149, 150, 111, 84, 97,
	124, 91, 0, 0, 0, 0, 101, 0, 103, 0,
	0, 125, 110, 0, 0, 0, 76, 0, 102, 151,
	119, 93, 142, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 0, 0, 0, 117,
	0, 0, 128, 96, 95, 0, 0, 0, 87, 0,
	122, 115, 140, 0, 116, 121, 104, 132, 118, 139,
	168, 146, 130, 145, 77, 129, 138, 86, 123, 79,
	136, 127, 108, 98, 99, 78, 0, 120, 90, 94,
	89, 113, 133, 134, 88, 152, 82, 144, 81, 83,
	143, 112, 131, 137, 109, 106, 80, 135, 107, 105,
	100, 92, 0, 0, 0, 126, 141, 153, 0, 114,
	147, 148, 149, 150, 111, 84, 97, 124, 91, 0,
	0, 0, 0, 101, 0, 103, 0, 0, 125, 110,
	0, 0, 0, 76, 0, 102, 151, 119, 93, 142,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 167, 0, 0, 0, 0, 117, 0, 0, 128,
	96, 95, 0, 0, 0, 87, 0, 122, 115, 140,
	0, 116, 121, 104, 132, 118, 139, 168, 146, 130,
	145, 77, 129, 138, 86, 123, 79, 136, 127, 108,
	98, 99, 78, 0, 120, 90, 94, 89, 113, 133,
	134, 88, 152, 82, 144, 81, 83, 143, 112, 131,
	137, 109, 106, 80, 135, 107, 105, 100, 92, 0,
	0, 0, 126, 141, 153, 0, 114, 147, 148, 149,
	150, 111, 84, 97, 124, 91, 0, 0, 0, 0,
	101, 0, 103, 0, 0, 125, 110, 0, 0, 0,
	76, 0, 102, 151, 119, 93, 142, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 117, 0, 0, 128, 96, 95, 0,
	0, 0, 87, 0, 122, 115, 140, 0, 116, 121,
	104, 132, 118, 139, 168, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 0, 0, 126,
	141, 153, 0, 114, 147, 148, 149, 150, 111, 84,
	97, 124, 91, 0, 0, 0, 0, 101, 0, 103,
	0, 0, 125, 110, 0, 0, 0, 76, 0, 102,
	151, 119, 93, 142, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	117, 0, 0, 128, 96, 95, 0, 0, 0, 87,
	0, 122, 115, 140, 0, 116, 121, 104, 132, 118,
	139, 168, 146, 130, 145, 77, 129, 138, 86, 123,
	79, 136, 127, 108, 98, 99, 78, 0, 120, 90,
	94, 89, 113, 133, 134, 88, 152, 82, 144, 81,
	83, 143, 112, 131, 137, 109, 106, 80, 135, 107,
	105, 100, 92, 0, 0, 0, 126, 141, 153, 0,
	114, 147, 148, 149, 150, 111, 84, 97, 124, 91,
	0, 0, 0, 0, 101, 0, 103, 0, 0, 125,
	110, 0, 0, 0, 76, 0, 102, 151, 119, 93,
	142, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 0, 0, 0, 117, 0, 0,
	128, 96, 95, 0, 0, 0, 87, 0, 122, 115,
	140, 0, 116, 121, 104, 132, 118, 139, 168, 146,
	130, 145, 77, 129, 138, 86, 123, 79, 136, 127,
	108, 98, 99, 78, 0, 120, 90, 94, 89, 113,
	133, 134, 88, 152, 82, 144, 81, 83, 143, 112,
	131, 137, 109, 106, 80, 135, 107, 105, 100, 92,
	0, 0, 0, 126, 141, 153, 0, 0, 147, 148,
	149, 150, 111, 84, 97, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 102, 151, 119, 93, 142,
}
var yyPact = [...]int{

	223, -1000, -160, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 736, 775, -1000, -1000, -1000, -1000, -1000, -1000, 576,
	6148, 29, 47, -27, 8401, 46, 168, 8932, -1000, -34,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 515, -1000, -1000,
	-1000, -1000, -1000, 726, 732, 569, 720, 634, -1000, 4946,
	20, 7493, 8224, 4322, -1000, 432, 18, 40, 8932, -127,
	8578, 18, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44, 8932, -1000, 8932, 12, 12,
	426, 12, 8932, -1000, 82, -1000, -1000, -1000, -1000, 8932,
	403, 688, 63, 2775, 2775, 2775, 2775, -22, 2775, 2775,
	589, -1000, -1000, -1000, -1000, 2775, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 227, 698, 5365, 5365, 736,
	-1000, 515, -1000, -1000, -1000, 660, -1000, -1000, 205, 749,
	-1000, 5971, 78, -1000, 5365, 1471, 512, -1000, -1000, 512,
	-1000, -1000, 57, -1000, -1000, 5763, 5763, 5763, 5763, 5763,
	5763, 5763, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 512, -1000, 5157, 512,
	512, 512, 512, 512, 512, 5365, 512, 512, 512, 512,
	512, 512, 512, 512, 512, 512, 512, 512, 512, 8047,
	486, 624, -1000, -1000, -1000, 715, 6754, 7316, 8932, 500,
	-1000, 494, 3880, -1000, -1000, -1000, 169, 7108, -1000, -1000,
	-1000, 657, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 452, -1000, 1476, 401, 194, 382, 2775, 30,
	540, 8932, 8932, 2775, 22, 8932, 713, 378, 588, 8932,
	-1000, 4101, -1000, 2775, 2775, 2775, 2775, 2775, 2775, 2775,
	2775, -1000, -1000, -1000, -1000, -1000, -1000, 2775, 2775, -1000,
	-1000, 8932, -1000, -1000, -1000, -1000, 765, 113, 247, 76,
	508, -1000, 270, 726, 227, 634, 6931, 604, -1000, -1000,
	8932, -1000, 5365, 5365, 224, -1000, 7847, -1000, -1000, 3217,
	127, 5763, 269, 137, 5763, 5763, 5763, 5763, 5763, 5763,
	5763, 5763, 5763, 5763, 5763, 5763, 5763, 5763, 5763, 275,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 356, -1000,
	515, 653, 653, 97, 97, 97, 97, 97, 97, 1903,
	4530, 227, 445, 188, 5157, 4946, 4946, 5365, 5365, 4946,
	717, 176, 188, 8578, -1000, 227, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4946, 4946, 4946, 4946, -6, 8932, -1000,
	8755, 7493, 7493, 7493, 7493, 7493, -1000, 619, 613, -1000,
	603, 602, 614, 8932, -1000, 443, 6754, 88, 512, -1000,
	7670, -1000, -1000, -6, 7493, 8932, -1000, -1000, 3880, 494,
	5365, 79, -1000, -1000, -1000, -1000, 2554, 178, 244, -98,
	-1000, -1000, 536, -1000, 536, 536, 536, 536, -75, -75,
	-75, -75, -1000, -1000, -1000, -1000, -1000, 570, 564, -1000,
	536, 536, 536, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 555, 555, 555, 541, 541, 2554, 707, 578, -1000,
	8932, -142, 347, -1000, 75, -1000, 8932, -1000, -1000, 2775,
	8932, 2775, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 638, 5365, 5365,
	3659, 5365, -1000, -1000, -1000, 698, -1000, 717, 731, -1000,
	651, 650, 4946, -1000, -1000, 127, 134, -1000, -1000, 252,
	-1000, -1000, -1000, -1000, 73, 512, -1000, 1641, -1000, -1000,
	-1000, -1000, 269, 5763, 5763, 5763, 1306, 1641, 1594, 1217,
	286, 97, 208, 208, 96, 96, 96, 96, 96, 353,
	353, -1000, -1000, -1000, 227, -1000, -1000, -1000, 227, 4946,
	489, -1000, -1000, 5365, -1000, 227, 439, 439, 343, 328,
	439, 4946, 184, -1000, 5365, 227, -1000, 439, 227, 439,
	439, 497, 512, -1000, 544, -1000, 148, -1000, 64, 624,
	575, 584, 1298, -1000, -1000, -1000, -1000, 610, -1000, 606,
	-1000, -1000, -1000, -1000, -1000, 38, 36, 28, 8578, -1000,
	747, 539, -1000, -1000, 188, -1000, 345, 488, 2333, -1000,
	-1000, -1000, -1000, -1000, -1000, 547, 699, 138, 334, -1000,
	-1000, 692, -1000, 189, -104, -1000, -1000, 264, -75, -75,
	-1000, -1000, 79, 655, 79, 79, 79, 314, 314, -1000,
	-1000, -1000, -1000, 245, -1000, -1000, -1000, 239, -1000, 488,
	-1000, 583, 8578, 2775, -1000, 3438, -1000, -1000, -1000, 1150,
	1125, 126, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -8, -1000, -1000, 2775, -1000, 625, 188,
	188, 62, -1000, -1000, 8932, -1000, -1000, -1000, -1000, 520,
	-1000, -1000, -1000, 2996, 4946, -1000, 1306, 1641, 1357, -1000,
	5763, 5763, -1000, -1000, 439, 4946, 188, -1000, -1000, -1000,
	27, 275, 27, -135, 518, 141, -1000, 5365, 346, -1000,
	-1000, -1000, -1000, -1000, 580, 8755, 512, -1000, 6555, 8578,
	736, 8755, 5365, 5365, 3659, -1000, -1000, 5365, 546, -1000,
	5365, -1000, -1000, -1000, 512, 512, 512, 390, -1000, 736,
	-1000, -1000, 2554, -1000, 2554, 8578, -1000, 319, -1000, -1000,
	577, 86, -1000, -1000, -1000, 391, 79, 79, -1000, 140,
	-1000, -1000, -1000, 437, -1000, 430, 482, 411, 8932, -1000,
	-1000, 481, -1000, 142, -1000, -1000, 8578, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8578,
	8932, -1000, -1000, -1000, -1000, -1000, 8578, -1000, -1000, 3438,
	-1000, 747, 7493, -1000, -1000, 227, -1000, 5763, 1641, 1641,
	-1000, -1000, 227, 536, 536, -1000, 536, 541, -1000, 536,
	-57, 536, -58, 227, 227, 512, -132, -1000, 188, 5365,
	-1000, 701, 463, 464, -1000, -1000, 4738, 227, 408, 60,
	390, 726, -1000, 188, 188, -1000, 188, 8578, 188, 8578,
	8578, 8578, 6356, 8578, 726, 2333, -1000, 388, -1000, 536,
	-1000, -94, 762, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -75, 311, -75, 226, -1000, 225,
	2775, 3438, 2554, -1000, 516, -1000, -1000, -1000, -1000, 700,
	740, 474, -1000, 1641, -1000, -1000, 42, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5763, 227, 310, 188, 697,
	-1000, 512, -1000, -1000, 514, 8578, 8578, -1000, -1000, 377,
	-1000, 372, 372, 372, 88, -1000, -1000, 578, 8578, -1000,
	111, -1000, -116, 79, -1000, 79, 373, 289, -1000, -1000,
	-1000, 8578, 512, 733, 728, -1000, -1000, 15, -1000, -1000,
	753, -1000, 512, -1000, 515, 51, -1000, 8578, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 202, 695, -1000, 694, -1000,
	-1000, -1000, -1000, -1000, 370, -10, -1000, 5365, 5365, 227,
	35, -149, 8755, 464, 227, 8578, -1000, -1000, 288, -1000,
	-1000, 540, 366, -1000, 8578, 188, 456, -1000, 623, -139,
	-152, 454, -1000, -1000, -1000, -142, -1000, -10, 649, -1000,
	607, -1000, -1000, -1000, -13, -147, -15, -150, 512, -156,
	5564, -1000, 1325, 227, -1000, -1000,
}
var yyPgo = [...]int{

	0, 986, 49, 515, 985, 983, 982, 981, 980, 979,
	975, 973, 969, 968, 967, 960, 959, 957, 956, 954,
	952, 951, 949, 948, 96, 945, 942, 938, 57, 937,
	60, 935, 933, 29, 136, 40, 27, 314, 932, 19,
	99, 61, 931, 47, 930, 929, 928, 926, 55, 925,
	924, 1309, 923, 917, 15, 25, 916, 914, 907, 906,
	56, 12, 905, 902, 897, 892, 890, 889, 46, 8,
	3, 7, 13, 888, 209, 11, 887, 42, 886, 885,
	884, 882, 23, 881, 48, 876, 22, 43, 868, 9,
	52, 21, 30, 5, 70, 867, 37, 53, 864, 281,
	863, 101, 273, 862, 861, 860, 859, 33, 0, 724,
	489, 58, 856, 10, 855, 1327, 59, 54, 17, 852,
	32, 172, 28, 851, 842, 26, 841, 839, 832, 830,
	829, 827, 254, 824, 823, 818, 34, 14, 816, 814,
	44, 24, 811, 810, 808, 36, 51, 807, 41, 806,
	805, 45, 18, 20, 802, 6, 801, 800, 1, 798,
	16, 797, 2, 792, 4, 39, 786, 785, 439, 67,
	783, 781, 65,
}
var yyR1 = [...]int{

	0, 166, 167, 167, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 170, 170,
	46, 46, 90, 90, 10, 10, 123, 123, 11, 11,
	11, 11, 11, 11, 164, 164, 163, 162, 162, 161,
	161, 160, 16, 149, 150, 150, 150, 146, 126, 126,
	126, 129, 129, 127, 127, 127, 127, 127, 127, 127,
	128, 128, 128, 128, 128, 130, 130, 130, 130, 130,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 145, 145, 132, 132, 140,
	140, 141, 141, 141, 138, 138, 139, 139, 142, 142,
	142, 133, 133, 133, 133, 133, 133, 133, 135, 135,
	143, 143, 136, 136, 136, 137, 137, 144, 144, 144,
	144, 144, 134, 134, 147, 154, 154, 154, 154, 148,
	148, 156, 156, 155, 151, 151, 151, 152, 152, 152,
	153, 153, 153, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 159, 157, 157, 158, 158, 13, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 124,
	124, 124, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 171, 24, 25, 25, 26, 26, 26,
	30, 30, 30, 28, 28, 29, 29, 35, 35, 34,
	34, 36, 36, 36, 36, 112, 112, 112, 111, 111,
	38, 38, 39, 39, 40, 40, 41, 41, 41, 53,
	53, 89, 89, 91, 91, 42, 42, 42, 42, 43,
	43, 44, 44, 45, 45, 119, 119, 118, 118, 118,
	117, 117, 47, 47, 47, 49, 48, 48, 48, 48,
	50, 50, 52, 52, 51, 51, 54, 54, 54, 54,
	55, 55, 37, 37, 37, 37, 37, 37, 37, 100,
	100, 57, 57, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 67, 67, 67, 67, 67, 67, 58,
	58, 58, 58, 58, 58, 58, 33, 33, 68, 68,
	68, 74, 69, 69, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 65, 65, 65, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 172, 172, 66, 66, 66,
	66, 31, 31, 31, 31, 31, 122, 122, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 78, 78, 32, 32, 76, 76, 77, 79, 79,
	75, 75, 75, 60, 60, 60, 60, 60, 60, 60,
	60, 62, 62, 62, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 85, 85, 85, 86, 86, 86, 86,
	87, 87, 87, 59, 59, 59, 59, 59, 59, 88,
	88, 88, 88, 92, 92, 70, 70, 72, 72, 71,
	73, 93, 93, 96, 94, 94, 97, 97, 95, 95,
	95, 114, 114, 114, 98, 98, 101, 101, 102, 102,
	99, 99, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 104, 104, 104, 105, 105, 106, 106, 106,
	113, 113, 109, 109, 110, 110, 115, 115, 116, 116,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 168,
	169, 120, 121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 1, 1, 2, 5,
	8, 4, 6, 5, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 1, 3, 3, 8, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	5, 6, 5, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	3, 4, 2, 4, 2, 2, 2, 2, 3, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -166, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 138, 116, 131, 49, 150, 151,
	153, 154, 25, 132, 133, 136, 137, -168, 8, 213,
	53, -167, 226, -82, 15, -26, 5, -24, -171, -24,
	-24, -24, -24, -24, -149, 53, 205, -106, 120, 70,
	146, 118, 124, -109, 56, -108, 219, 150, 161, 155,
	182, 174, 172, 175, 201, 65, 153, 134, 170, 166,
	164, 27, 187, 224, 165, 130, 129, 202, 159, 160,
	186, 32, 221, 34, 142, 185, 181, 184, 158, 180,
	38, 200, 177, 167, 18, 137, 140, 125, 144, 223,
	163, 141, 136, 154, 203, 37, 191, 157, 128, 151,
	148, 178, 143, 168, 169, 183, 156, 179, 152, 145,
	138, 192, 225, 176, 173, 149, 147, 196, 197, 198,
	199, 222, 171, 193, -99, 120, 122, 118, 118, 205,
	119, 120, 118, -51, -115, 56, -108, 120, 146, 118,
	106, 175, 112, 194, 119, 32, 144, -124, 118, 195,
	147, 196, 197, 198, 199, 56, 203, 202, -115, 152,
	-120, -120, -120, -120, -120, -2, -86, 17, 16, -5,
	-3, -168, 6, 20, 21, -30, 39, 40, -25, -36,
	97, -37, -115, -56, 72, -61, 29, 56, -108, 23,
	-60, -57, -75, -73, -74, 106, 107, 95, 96, 103,
	73, 108, -65, -63, -64, -66, 58, 57, 66, 59,
	60, 61, 62, 67, 68, 69, -109, -71, -168, 43,
	44, 214, 215, 218, 216, 75, 33, 204, 212, 211,
	210, 208, 209, 206, 207, 123, 205, 101, 213, -99,
	-39, -40, -41, -42, -53, -74, -168, -51, 11, -46,
	-51, -94, -123, -97, 203, 202, -110, -95, -109, -107,
	201, 175, 200, 117, 71, 22, 24, 189, 74, 106,
	16, 75, 105, 214, 112, 47, 206, 207, 204, 205,
	194, 29, 10, 25, 132, 21, 99, 114, 78, 79,
	135, 23, 133, 69, 19, 50, 11, 13, 14, 123,
	122, 90, 119, 45, 8, 108, 26, 87, 41, 28,
	43, 88, 17, 208, 209, 31, 218, 139, 101, 48,
	35, 72, 67, 51, 70, 15, 46, 89, 115, 213,
	44, 6, 217, 30, 131, 42, 118, 195, 77, 121,
	68, 5, 124, 9, 49, 52, 210, 211, 212, 33,
	76, 12, -150, -146, 56, -102, 123, 119, -51, 213,
	-109, -102, 118, -51, -51, -101, 123, -101, 56, -101,
	-51, 109, -51, 56, 30, 205, 56, 144, 118, 145,
	120, -121, -168, -110, -121, -121, -121, 148, 149, -121,
	-121, 51, -121, -169, 55, -87, 19, 31, -37, -115,
	-83, -84, -37, -82, -2, -24, 35, -28, 21, 64,
	11, -112, 71, 70, 87, -111, 22, -109, 58, 109,
	-37, -58, 90, 72, 88, 89, 74, 92, 91, 102,
	95, 96, 97, 98, 99, 100, 101, 93, 94, 105,
	80, 81, 82, 83, 84, 85, 86, -100, -168, -74,
	-168, 110, 111, -61, -61, -61, -61, -61, -61, -61,
	-168, -2, -69, -37, -168, -168, -168, -168, -168, -168,
	-168, -78, -37, -168, -172, -168, -172, -172, -172, -172,
	-172, -172, -172, -168, -168, -168, -168, -52, 26, -51,
	30, 54, -47, -49, -48, -50, 41, 45, 47, 42,
	43, 44, 48, -119, 22, -39, -168, -118, 140, -117,
	22, -115, 58, -51, -170, 54, 11, 52, 54, -94,
	80, -114, -109, 58, 29, 30, 55, 54, -126, -129,
	-131, -130, -127, -128, 172, 173, 106, 176, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 30, 134,
	168, 169, 170, 171, 155, 156, 157, 158, 159, 160,
	161, 163, 164, 165, 166, 167, 56, 72, 56, -121,
	120, -164, 52, -51, -51, -121, 121, -51, 23, 56,
	51, -51, -116, -115, -107, -121, -121, -121, -121, -121,
	-121, -121, -121, -121, -121, -51, 9, 90, 54, 18,
	109, 54, -85, 24, 25, -86, -169, -30, -62, -109,
	59, 62, -29, 42, -51, -37, -37, -67, 67, 72,
	68, 69, -111, 97, -116, -110, -107, -61, -68, -71,
	-74, 63, 90, 88, 89, 74, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -122, 56, 58, 56, -60, -60, -109, -35, 21,
	-34, -36, -169, 54, -169, -2, -34, -34, -37, -37,
	-34, -28, -76, -77, 76, -109, -169, -34, -35, -34,
	-34, -90, 140, -51, -93, -96, -75, -109, -115, -40,
	-41, -41, -40, -41, 41, 41, 41, 46, 41, 46,
	41, -48, -115, -169, -54, 49, 122, 50, -168, -117,
	-90, -39, -51, -97, -37, -137, 105, -151, -152, -153,
	-110, 58, 59, -146, -147, -154, 125, 124, -148, 119,
	28, -142, 67, 72, -138, 192, -132, 53, -132, -132,
	-132, -132, -136, 175, -136, -136, -136, 53, 53, -132,
	-132, -132, -140, 53, -140, -140, -141, 53, -141, -151,
	23, -113, 52, -51, -162, 222, -163, 56, -103, 117,
	114, 115, -159, 113, 189, 175, 65, 29, 15, 214,
	140, 225, 56, 141, -51, -121, -51, -121, 37, -37,
	-37, -116, -84, -87, -98, 19, 11, 33, 33, -34,
	67, 68, 69, 109, -168, -68, -61, -61, -61, -33,
	135, 71, -169, -169, -34, 54, -37, -169, -169, -169,
	54, 52, 22, -169, -34, -79, -77, 78, -37, -169,
	-169, -169, -169, -169, -59, 30, 33, -2, -168, -168,
	-55, 54, 12, 80, 109, -44, -43, 51, 52, -45,
	51, -43, 41, 41, 119, 119, 119, -91, -109, -55,
	-55, 56, 54, -153, 80, 53, 28, -148, 56, 56,
	-133, 29, 67, -139, 193, 59, -136, -136, -137, 30,
	-137, -137, -137, -145, 58, -145, 59, 59, 51, -109,
	-121, -161, -160, -110, -120, -165, 146, 126, 127, 130,
	129, 56, 119, 28, 125, 128, 140, 124, -165, 146,
	-104, -105, 121, 22, 119, 28, 140, -121, 38, 109,
	-51, -38, 11, 97, -110, -35, -33, 71, -61, -61,
	-169, -36, -125, 106, 172, 134, 170, 166, 186, 177,
	191, 168, 192, -122, -125, 219, -82, 79, -37, 77,
	-92, 51, -93, -70, -72, -71, -168, -2, -88, -109,
	-91, -82, -96, -37, -37, -110, -37, 53, -37, -168,
	-168, -168, -169, 54, -82, -152, -153, -156, -155, -109,
	56, -135, 51, 58, 59, 60, 67, 204, 66, 55,
	-137, -137, 56, 106, 55, 54, 55, 54, 55, 54,
	-51, 54, 80, -120, -109, -120, -109, -51, -120, -109,
	-55, -39, -169, -61, -169, -132, -132, -132, -141, -132,
	160, -132, 160, -169, -169, -168, -32, 217, -37, 27,
	-92, 54, -169, -169, -169, 54, 109, -169, -86, -89,
	-109, -89, -89, -89, -118, -109, -86, 55, 54, -132,
	-143, 189, 9, -136, 58, -136, 59, 59, -121, -160,
	-153, 53, 26, -80, 13, -136, 56, -61, -169, 58,
	28, -72, 33, -2, -168, -109, -109, 54, 55, -169,
	-169, -169, -54, -113, -155, -144, 125, 28, 124, 204,
	-137, -137, 55, 55, -89, -168, -81, 14, 16, -31,
	90, 222, 9, -70, -2, 109, -109, -134, 65, 28,
	28, 55, -157, -158, 140, -37, -69, -169, 220, 48,
	223, -93, -169, -109, 58, -164, -169, 54, -109, 38,
	221, 224, -162, -158, 33, 38, 142, 222, 143, 223,
	-168, 224, -61, 139, -169, -169,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 458, 0, 233, 233, 233, 233, 233, 233, 0,
	527, 510, 0, 0, 0, 0, 219, 223, 224, 0,
	226, 227, 711, 711, 711, 711, 711, 0, 33, 34,
	709, 1, 3, 466, 0, 0, 237, 240, 235, 0,
	510, 0, 0, 0, 48, 0, 508, 0, 699, 0,
	700, 508, 528, 529, 532, 533, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 701, 702, 703, 704,
	705, 706, 707, 708, 0, 0, 511, 0, 506, 506,
	0, 506, 0, 194, 304, 536, 537, 699, 700, 0,
	0, 0, 0, 712, 712, 712, 712, 0, 712, 712,
	212, 214, 215, 216, 217, 712, 220, 221, 222, 225,
	228, 229, 230, 231, 232, 27, 470, 0, 0, 458,
	29, 0, 233, 238, 239, 243, 241, 242, 234, 0,
	251, 255, 0, 312, 0, 317, 319, -2, -2, 0,
	354, 355, 356, 357, 358, 0, 0, 0, 0, 0,
	0, 0, 381, 382, 383, 384, 443, 444, 445, 446,
	447, 448, 449, 450, 321, 322, 440, 490, 0, 0,
	0, 0, 0, 0, 0, 431, 0, 405, 405, 405,
	405, 405, 405, 405, 405, 0, 0, 0, 0, 0,
	0, 262, 264, 265, 266, 285, 0, 287, 0, 0,
	40, 44, 0, 494, -2, -2, 0, 0, 534, 535,
	-2, 636, -2, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 0, 64, 0, 0, 0, 0, 712, 0,
	54, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	193, 0, 195, 712, 712, 712, 712, 712, 712, 712,
	712, 204, 713, 714, 205, 206, 207, 712, 712, 209,
	210, 0, 218, 28, 710, 22, 0, 0, 467, 0,
	459, 460, 463, 466, 27, 240, 0, 245, 244, 236,
	0, 252, 0, 0, 0, 256, 0, 258, 259, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 340, 341, 342, 343, 344, 345, 318, 0, 332,
	0, 0, 0, 374, 375, 376, 377, 378, 379, 0,
	247, 27, 0, 352, 0, 0, 0, 0, 0, 0,
	243, 0, 432, 0, 397, 0, 398, 399, 400, 401,
	402, 403, 404, 0, 247, 0, 0, 42, 0, 303,
	0, 0, 0, 0, 0, 0, 292, 0, 0, 295,
	0, 0, 0, 0, 286, 0, 0, 306, 669, 288,
	0, 290, 291, 42, 0, 0, 38, 39, 0, 45,
	0, 135, 501, 502, 503, 499, 154, 0, 118, 114,
	69, 70, 107, 72, 107, 107, 107, 107, 132, 132,
	132, 132, 98, 99, 100, 101, 102, 0, 0, 85,
	107, 107, 107, 89, 73, 74, 75, 76, 77, 78,
	79, 109, 109, 109, 111, 111, 154, 0, 530, 51,
	0, 57, 0, 62, 0, 170, 0, 189, 507, 712,
	0, 712, 305, 538, 539, 196, 197, 198, 199, 200,
	201, 202, 203, 208, 211, 213, 471, 0, 0, 0,
	0, 0, 462, 464, 465, 470, 30, 243, 0, 451,
	0, 0, 0, 246, 25, 313, 314, 316, 333, 0,
	335, 337, 257, 253, 0, 441, -2, 323, 324, 348,
	349, 350, 0, 0, 0, 0, 346, 328, 0, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 373, 416, 417, 0, 371, 372, 380, 0, 0,
	248, 249, 351, 0, 489, 27, 0, 0, 0, 0,
	0, 0, 438, 435, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 302, 310, 491, 0, 440, 0, 263,
	281, 283, 0, 278, 293, 294, 296, 0, 298, 0,
	300, 301, 267, 268, 269, 0, 0, 0, 0, 289,
	310, 310, 41, 495, 496, 497, 0, 63, 155, 157,
	160, 161, 162, 65, 66, 0, 0, 0, 0, 149,
	150, 121, 119, 0, 116, 115, 71, 0, 132, 132,
	92, 93, 135, 0, 135, 135, 135, 0, 0, 86,
	87, 88, 80, 0, 81, 82, 83, 0, 84, 49,
	509, 0, 0, 712, 53, 0, 55, 56, 711, 0,
	0, 522, 171, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 0, 188, 190, 712, 192, 0, 468,
	469, 0, 461, 23, 0, 504, 505, 452, 453, 260,
	334, 336, 338, 0, 247, 325, 346, 329, 0, 326,
	0, 0, 320, 385, 0, 0, 353, -2, 388, 389,
	0, 0, 0, 0, 458, 0, 436, 0, 0, 396,
	407, 408, 409, 410, 483, 0, 0, -2, 0, 0,
	458, 0, 0, 0, 0, 275, 282, 0, 0, 276,
	0, 277, 297, 299, 0, 0, 0, 0, 273, 458,
	37, 136, 0, 158, 0, 0, 145, 0, 147, 148,
	128, 0, 120, 68, 117, 0, 135, 135, 94, 0,
	95, 96, 97, 0, 105, 0, 0, 0, 0, 531,
	52, 58, 59, 0, 163, 711, 0, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 711, 0,
	0, 711, 523, 524, 525, 526, 0, 191, 472, 0,
	24, 310, 0, 254, 442, 0, 327, 0, 347, 330,
	386, 250, 0, 107, 107, 421, 107, 111, 424, 107,
	426, 107, 429, 0, 0, 0, 433, 395, 439, 0,
	31, 0, 483, 473, 485, 487, 0, 27, 0, 479,
	0, 466, 492, 311, 493, 441, 279, 0, 284, 0,
	0, 0, 287, 0, 466, 156, 159, 0, 151, 107,
	146, 130, 0, 122, 123, 124, 125, 126, 127, 108,
	90, 91, 133, 134, 132, 0, 132, 0, 112, 0,
	712, 0, 0, 164, 0, 165, 167, 168, 169, 0,
	454, 261, 387, 331, 390, 418, 132, 422, 423, 425,
	427, 428, 430, 392, 391, 0, 0, 0, 437, 0,
	32, 0, 488, -2, 0, 0, 0, 43, 35, 0,
	271, 0, 0, 0, 306, 274, 36, 530, 0, 153,
	137, 131, 0, 135, 106, 135, 0, 0, 50, 60,
	61, 0, 0, 456, 0, 419, 420, 411, 394, 434,
	0, 486, 0, -2, 0, 481, 480, 0, 280, 307,
	308, 309, 270, 144, 152, 142, 0, 139, 141, 129,
	103, 104, 110, 113, 0, 0, 26, 0, 0, 0,
	0, 0, 0, 476, 27, 0, 272, 67, 0, 138,
	140, 54, 0, 184, 0, 457, 455, 393, 0, 0,
	0, 484, -2, 482, 143, 57, 183, 0, 0, 412,
	0, 415, 166, 185, 0, 413, 0, 0, 0, 0,
	0, 414, 0, 0, 186, 187,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 226,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:292
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:297
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:298
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:302
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:325
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:337
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:343
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:350
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:356
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:377
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:389
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:401
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:405
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:411
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:417
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:435
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:440
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:444
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
			yyVAL.str = SessionStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:464
		{
			yyVAL.str = GlobalStr
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:470
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:475
		{
			yyVAL.statement = &DDL{Action: CreateDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}, TableSpec: &TableSpec{Options: yyDollar[5].str}}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:479
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:484
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:488
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:492
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:501
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:505
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:511
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:516
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:521
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:532
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:538
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:544
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:551
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:558
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:563
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:567
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:573
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:584
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:594
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 104:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:752
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:757
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:762
		{
			yyVAL.optVal = nil
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:766
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:771
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:775
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:783
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:787
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:793
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:801
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:805
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:810
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:820
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:833
		{
			yyVAL.optVal = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:841
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:849
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:857
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:862
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:866
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:871
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:880
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:884
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:888
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:893
		{
			yyVAL.str = ""
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:897
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:902
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:906
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:910
		{
			yyVAL.colKeyOpt = colKey
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:914
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:918
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:923
		{
			yyVAL.optVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:927
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:933
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:939
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:943
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:947
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:951
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:961
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:967
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:971
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:977
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:982
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:986
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:990
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:998
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 167:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1061
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1066
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 187:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1126
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.statement = &DDL{Action: DropDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1138
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1143
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.str = SessionStr
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.str = GlobalStr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.statement = &Begin{}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.statement = &Begin{}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.statement = &Commit{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.statement = &Rollback{}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.statement = &OtherRead{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.statement = &OtherRead{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.statement = &OtherRead{}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1336
		{
			setAllowComments(yylex, true)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.bytes2 = nil
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.str = UnionStr
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.str = UnionAllStr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.str = UnionDistinctStr
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.str = SQLCacheStr
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = DistinctStr
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.str = ""
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.str = StraightJoinHint
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.selectExprs = nil
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 270:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1556
		{
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1562
		{
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.empty = struct{}{}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.empty = struct{}{}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.str = JoinStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.str = JoinStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.str = JoinStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.str = StraightJoinStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.str = LeftJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.str = LeftJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.str = RightJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.str = RightJoinStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.str = NaturalJoinStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1635
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.indexHints = nil
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.expr = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1731
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.str = IsNullStr
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.str = IsNotNullStr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.str = IsTrueStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.str = IsNotTrueStr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.str = IsFalseStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.str = IsNotFalseStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.str = EqualStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.str = LessThanStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.str = GreaterThanStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.str = LessEqualStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.str = GreaterEqualStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.str = NotEqualStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.expr = nil
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1966
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1974
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1996
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 393:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.str = ""
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.str = BooleanModeStr
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.str = QueryExpansionStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.expr = nil
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.str = string("")
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.expr = nil
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.expr = &NullVal{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.exprs = nil
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.orderBy = nil
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.str = AscScr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.str = AscScr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.str = DescScr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.limit = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.str = ""
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.str = ForUpdateStr
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.str = ShareModeStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2437
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2450
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.updateExprs = nil
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2510
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.bytes = []byte("charset")
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2572
		{
			yyVAL.expr = &Default{}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.byt = 0
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.byt = 1
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.empty = struct{}{}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.str = IgnoreStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2633
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2638
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2867
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2876
		{
			decNesting(yylex)
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2881
		{
			forceEOF(yylex)
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2886
		{
			forceEOF(yylex)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2890
		{
			forceEOF(yylex)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2894
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
