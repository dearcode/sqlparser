// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnOption      columnOption
	columnOptions     []columnOption
	TableOption       TableOption
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	ForeignOptionList []ForeignOption
	ForeignOption     ForeignOption
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const BIT_LITERAL = 57403
const NULL = 57404
const TRUE = 57405
const FALSE = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const BINARY = 57429
const UNDERSCORE_BINARY = 57430
const COLLATE = 57431
const INTERVAL = 57432
const JSON_EXTRACT_OP = 57433
const JSON_UNQUOTE_EXTRACT_OP = 57434
const CREATE = 57435
const ALTER = 57436
const DROP = 57437
const RENAME = 57438
const ANALYZE = 57439
const ADD = 57440
const MODIFY = 57441
const CHANGE = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const REFERENCES = 57456
const CASCADE = 57457
const RESTRICT = 57458
const NO = 57459
const ACTION = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const ENGINE = 57478
const STATUS = 57479
const VARIABLES = 57480
const BEGIN = 57481
const START = 57482
const TRANSACTION = 57483
const COMMIT = 57484
const ROLLBACK = 57485
const BIT = 57486
const TINYINT = 57487
const SMALLINT = 57488
const MEDIUMINT = 57489
const INT = 57490
const INTEGER = 57491
const BIGINT = 57492
const INTNUM = 57493
const REAL = 57494
const DOUBLE = 57495
const FLOAT_TYPE = 57496
const DECIMAL = 57497
const NUMERIC = 57498
const TIME = 57499
const TIMESTAMP = 57500
const DATETIME = 57501
const YEAR = 57502
const CHAR = 57503
const VARCHAR = 57504
const BOOL = 57505
const CHARACTER = 57506
const VARBINARY = 57507
const NCHAR = 57508
const TEXT = 57509
const TINYTEXT = 57510
const MEDIUMTEXT = 57511
const LONGTEXT = 57512
const BLOB = 57513
const TINYBLOB = 57514
const MEDIUMBLOB = 57515
const LONGBLOB = 57516
const JSON = 57517
const ENUM = 57518
const NULLX = 57519
const AUTO_INCREMENT = 57520
const APPROXNUM = 57521
const SIGNED = 57522
const UNSIGNED = 57523
const ZEROFILL = 57524
const DATABASES = 57525
const TABLES = 57526
const VITESS_KEYSPACES = 57527
const VITESS_SHARDS = 57528
const VITESS_TABLETS = 57529
const VSCHEMA_TABLES = 57530
const NAMES = 57531
const CHARSET = 57532
const GLOBAL = 57533
const SESSION = 57534
const CURRENT_TIMESTAMP = 57535
const DATABASE = 57536
const CURRENT_DATE = 57537
const NOW = 57538
const CURRENT_TIME = 57539
const LOCALTIME = 57540
const LOCALTIMESTAMP = 57541
const UTC_DATE = 57542
const UTC_TIME = 57543
const UTC_TIMESTAMP = 57544
const REPLACE = 57545
const CONVERT = 57546
const CAST = 57547
const GROUP_CONCAT = 57548
const SEPARATOR = 57549
const MATCH = 57550
const AGAINST = 57551
const BOOLEAN = 57552
const LANGUAGE = 57553
const WITH = 57554
const QUERY = 57555
const EXPANSION = 57556
const UNUSED = 57557
const ID = 57558

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"BINARY",
	"UNDERSCORE_BINARY",
	"COLLATE",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"CHANGE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"REFERENCES",
	"CASCADE",
	"RESTRICT",
	"NO",
	"ACTION",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"ENGINE",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ID",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 223,
	78, 740,
	-2, 44,
	-1, 224,
	78, 713,
	-2, 45,
	-1, 229,
	78, 700,
	-2, 562,
	-1, 231,
	78, 727,
	-2, 564,
	-1, 327,
	107, 599,
	-2, 595,
	-1, 328,
	107, 600,
	-2, 596,
	-1, 738,
	107, 602,
	-2, 598,
	-1, 754,
	17, 586,
	26, 586,
	31, 586,
	33, 586,
	36, 586,
	37, 586,
	63, 586,
	120, 586,
	125, 586,
	128, 586,
	129, 586,
	130, 586,
	135, 586,
	139, 586,
	141, 586,
	142, 586,
	143, 586,
	145, 586,
	146, 586,
	147, 586,
	148, 586,
	149, 586,
	150, 586,
	151, 586,
	152, 586,
	153, 586,
	154, 586,
	155, 586,
	156, 586,
	157, 586,
	158, 586,
	159, 586,
	160, 586,
	161, 586,
	162, 586,
	163, 586,
	164, 586,
	165, 586,
	166, 586,
	167, 586,
	169, 586,
	170, 586,
	171, 586,
	172, 586,
	173, 586,
	174, 586,
	175, 586,
	176, 586,
	177, 586,
	178, 586,
	179, 586,
	180, 586,
	181, 586,
	182, 586,
	183, 586,
	184, 586,
	185, 586,
	186, 586,
	187, 586,
	188, 586,
	189, 586,
	190, 586,
	191, 586,
	192, 586,
	193, 586,
	197, 586,
	198, 586,
	199, 586,
	202, 586,
	203, 586,
	204, 586,
	205, 586,
	206, 586,
	207, 586,
	208, 586,
	209, 586,
	226, 586,
	228, 586,
	229, 586,
	230, 586,
	231, 586,
	232, 586,
	233, 586,
	-2, 668,
	-1, 758,
	1, 577,
	234, 577,
	-2, 607,
	-1, 759,
	1, 578,
	234, 578,
	-2, 699,
	-1, 760,
	53, 701,
	-2, 579,
	-1, 761,
	1, 580,
	234, 580,
	-2, 621,
	-1, 762,
	1, 581,
	234, 581,
	-2, 665,
	-1, 763,
	1, 582,
	234, 582,
	-2, 613,
	-1, 764,
	1, 583,
	234, 583,
	-2, 732,
	-1, 765,
	1, 584,
	234, 584,
	-2, 760,
	-1, 766,
	1, 585,
	234, 585,
	-2, 612,
	-1, 849,
	5, 25,
	-2, 538,
	-1, 865,
	5, 26,
	-2, 413,
	-1, 1128,
	5, 26,
	-2, 539,
	-1, 1193,
	5, 25,
	-2, 541,
	-1, 1244,
	5, 26,
	-2, 542,
}

const yyPrivate = 57344

const yyLast = 10725

var yyAct = [...]int{

	328, 1275, 1266, 1236, 1046, 527, 744, 602, 380, 644,
	909, 1016, 1047, 1017, 741, 694, 664, 941, 406, 733,
	375, 1063, 1013, 458, 3, 806, 1134, 460, 457, 72,
	702, 816, 852, 165, 228, 737, 165, 979, 1104, 51,
	987, 645, 830, 195, 783, 869, 813, 728, 930, 857,
	683, 818, 369, 436, 684, 430, 222, 323, 462, 165,
	165, 72, 446, 189, 211, 686, 165, 641, 72, 194,
	204, 324, 210, 719, 378, 946, 50, 1054, 679, 614,
	678, 1053, 1052, 1051, 352, 1037, 354, 209, 707, 902,
	899, 809, 747, 535, 524, 1044, 522, 347, 571, 718,
	342, 1283, 1261, 729, 1274, 190, 191, 192, 193, 891,
	892, 1254, 1269, 745, 1260, 351, 353, 1043, 502, 174,
	1117, 875, 1253, 1186, 1143, 1219, 888, 808, 333, 1239,
	567, 566, 577, 578, 569, 570, 572, 573, 574, 575,
	576, 568, 1045, 874, 1066, 220, 579, 1041, 887, 922,
	875, 157, 159, 160, 710, 165, 719, 165, 1059, 1060,
	1061, 1181, 165, 55, 1179, 188, 1065, 1062, 876, 165,
	339, 361, 362, 72, 72, 72, 72, 349, 72, 72,
	706, 1263, 718, 1268, 532, 72, 1207, 57, 58, 59,
	60, 169, 490, 1237, 969, 642, 340, 1286, 171, 350,
	330, 711, 526, 155, 1056, 1055, 177, 173, 954, 165,
	1057, 676, 1229, 154, 1278, 155, 165, 165, 165, 868,
	867, 336, 72, 866, 433, 1171, 331, 72, 503, 168,
	966, 156, 1131, 707, 591, 592, 968, 175, 432, 367,
	179, 991, 936, 601, 158, 521, 665, 667, 372, 431,
	508, 509, 510, 511, 512, 513, 514, 345, 516, 517,
	518, 519, 520, 504, 505, 506, 507, 488, 489, 170,
	1240, 491, 1042, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 730, 676, 553, 890, 719, 172, 178,
	180, 181, 182, 183, 898, 815, 186, 185, 873, 355,
	953, 1142, 1252, 886, 807, 959, 955, 948, 949, 956,
	951, 950, 1066, 718, 748, 1064, 515, 1277, 1276, 1279,
	666, 184, 165, 1105, 1040, 706, 957, 873, 967, 341,
	965, 343, 962, 72, 571, 556, 165, 165, 72, 879,
	165, 1083, 790, 855, 165, 554, 165, 571, 72, 72,
	72, 72, 72, 72, 72, 72, 788, 789, 787, 1107,
	880, 556, 72, 72, 473, 434, 165, 472, 571, 1119,
	831, 831, 1003, 523, 555, 554, 407, 45, 1058, 920,
	540, 538, 579, 569, 570, 572, 573, 574, 575, 576,
	568, 556, 1109, 438, 1113, 579, 1108, 1285, 1106, 972,
	973, 974, 329, 1111, 593, 594, 595, 596, 597, 598,
	599, 568, 1110, 1161, 952, 998, 579, 1112, 1114, 742,
	1160, 997, 45, 996, 48, 368, 559, 776, 778, 779,
	200, 920, 777, 786, 1284, 215, 72, 1210, 555, 554,
	1209, 165, 1039, 935, 165, 165, 165, 165, 165, 630,
	631, 646, 933, 923, 1222, 556, 165, 153, 1158, 603,
	165, 1070, 555, 554, 165, 931, 612, 1233, 165, 165,
	1214, 335, 72, 358, 359, 360, 632, 363, 364, 556,
	853, 72, 1213, 663, 366, 1145, 1262, 1249, 368, 1208,
	324, 1197, 1234, 821, 555, 554, 671, 616, 617, 618,
	619, 620, 621, 622, 623, 634, 558, 555, 554, 648,
	649, 556, 651, 1071, 1121, 208, 647, 659, 677, 650,
	1145, 1206, 669, 72, 556, 674, 48, 165, 673, 675,
	571, 72, 1014, 165, 670, 853, 72, 165, 72, 696,
	735, 1126, 557, 717, 720, 721, 722, 1197, 368, 356,
	356, 356, 356, 443, 356, 356, 738, 555, 554, 1197,
	1198, 356, 1145, 1150, 1082, 731, 732, 1077, 572, 573,
	574, 575, 576, 568, 556, 1145, 1144, 45, 579, 1246,
	784, 782, 985, 571, 791, 792, 793, 794, 795, 796,
	797, 798, 459, 799, 800, 801, 802, 803, 804, 805,
	72, 1035, 368, 739, 1130, 368, 773, 774, 471, 780,
	781, 755, 985, 368, 72, 567, 566, 577, 578, 569,
	570, 572, 573, 574, 575, 576, 568, 469, 663, 1079,
	1078, 579, 525, 1075, 1076, 52, 738, 531, 1075, 1074,
	821, 368, 443, 368, 481, 480, 628, 541, 542, 543,
	544, 545, 546, 547, 548, 22, 603, 854, 20, 825,
	826, 549, 550, 854, 828, 849, 810, 811, 470, 72,
	468, 442, 835, 633, 985, 22, 22, 1012, 847, 72,
	431, 848, 72, 712, 838, 839, 72, 72, 1147, 1148,
	713, 714, 715, 716, 528, 443, 201, 661, 662, 443,
	862, 48, 1192, 871, 872, 853, 725, 726, 727, 356,
	742, 893, 199, 894, 356, 734, 1168, 712, 1155, 742,
	985, 48, 48, 1154, 356, 356, 356, 356, 356, 356,
	356, 356, 897, 882, 900, 901, 1049, 883, 356, 356,
	72, 1029, 48, 72, 72, 729, 72, 881, 895, 165,
	724, 884, 885, 588, 590, 723, 72, 877, 62, 910,
	1267, 72, 1014, 911, 924, 925, 858, 859, 937, 861,
	536, 72, 926, 932, 365, 927, 928, 929, 934, 640,
	658, 600, 452, 453, 604, 605, 606, 607, 608, 609,
	610, 864, 613, 615, 615, 615, 615, 615, 615, 615,
	615, 615, 624, 625, 626, 627, 784, 863, 653, 976,
	977, 978, 882, 944, 652, 1264, 883, 1259, 877, 72,
	215, 215, 215, 215, 215, 971, 884, 958, 960, 961,
	404, 772, 975, 1258, 877, 769, 459, 771, 668, 437,
	656, 165, 822, 654, 215, 657, 205, 206, 655, 844,
	843, 72, 72, 435, 370, 833, 646, 1015, 889, 70,
	478, 348, 646, 196, 1190, 1153, 371, 1018, 1151, 1069,
	1068, 896, 1002, 993, 1020, 1124, 1169, 740, 534, 72,
	382, 456, 437, 1004, 202, 203, 1225, 197, 52, 1224,
	1189, 227, 1024, 325, 72, 1025, 72, 1023, 334, 854,
	1050, 823, 824, 865, 1226, 827, 1026, 1027, 842, 1067,
	1028, 1036, 356, 1030, 356, 552, 841, 1272, 1271, 54,
	834, 56, 836, 837, 395, 394, 397, 398, 399, 400,
	467, 49, 1, 396, 401, 845, 746, 72, 165, 214,
	448, 451, 452, 453, 449, 940, 450, 454, 72, 756,
	858, 859, 448, 451, 452, 453, 449, 1038, 450, 454,
	1235, 1265, 699, 72, 165, 698, 708, 45, 903, 322,
	72, 61, 697, 908, 907, 904, 921, 709, 906, 1072,
	1073, 604, 905, 484, 485, 483, 487, 486, 482, 72,
	176, 221, 455, 474, 986, 64, 964, 963, 749, 587,
	840, 1096, 1097, 227, 227, 227, 227, 226, 227, 227,
	1085, 1021, 629, 165, 1094, 227, 429, 1099, 850, 851,
	357, 1084, 1087, 1115, 1088, 1089, 738, 1102, 1092, 1100,
	72, 1223, 72, 72, 72, 165, 72, 1116, 1125, 1103,
	1118, 1123, 1188, 939, 1122, 1001, 611, 829, 381, 982,
	72, 775, 227, 983, 1149, 1120, 393, 475, 1136, 1137,
	1138, 390, 1139, 994, 995, 392, 391, 999, 1133, 635,
	970, 603, 1005, 846, 1006, 1007, 1008, 1009, 560, 379,
	1141, 225, 72, 72, 72, 373, 213, 1152, 439, 1156,
	447, 445, 444, 218, 860, 856, 214, 212, 1011, 1164,
	1163, 1185, 1238, 639, 23, 53, 207, 18, 17, 1034,
	984, 16, 19, 15, 14, 13, 1170, 27, 12, 11,
	356, 10, 9, 8, 1000, 1157, 7, 1159, 6, 1177,
	5, 72, 72, 4, 198, 21, 2, 0, 0, 0,
	1191, 0, 0, 0, 0, 1018, 72, 356, 1167, 0,
	0, 0, 0, 1193, 0, 1203, 1202, 0, 1205, 1204,
	0, 0, 0, 227, 0, 0, 0, 0, 227, 72,
	0, 0, 72, 1187, 0, 0, 0, 0, 227, 227,
	227, 227, 227, 227, 227, 227, 0, 0, 0, 0,
	0, 0, 227, 227, 0, 1215, 0, 992, 72, 0,
	0, 0, 0, 0, 1227, 1220, 0, 0, 165, 0,
	0, 1018, 1211, 0, 1212, 1231, 0, 0, 1228, 0,
	0, 0, 0, 0, 1098, 1019, 1218, 45, 0, 0,
	72, 0, 0, 1242, 0, 646, 1243, 0, 72, 0,
	1247, 0, 225, 1031, 1032, 1033, 0, 72, 0, 571,
	1146, 1255, 0, 1257, 1256, 0, 0, 0, 589, 1127,
	1128, 1129, 0, 1132, 0, 0, 636, 0, 0, 1270,
	0, 216, 0, 325, 1280, 0, 1241, 603, 0, 0,
	0, 567, 566, 577, 578, 569, 570, 572, 573, 574,
	575, 576, 568, 0, 1281, 0, 954, 579, 0, 0,
	0, 0, 227, 0, 162, 0, 0, 1174, 1175, 954,
	1176, 227, 325, 1178, 0, 1180, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 214, 214, 214, 214, 0,
	0, 219, 980, 0, 0, 0, 0, 332, 0, 0,
	214, 0, 0, 1172, 1173, 0, 0, 0, 214, 0,
	0, 0, 227, 227, 0, 1182, 1183, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 227, 0, 227, 0,
	0, 0, 0, 0, 0, 0, 1199, 1200, 1201, 0,
	0, 1162, 0, 0, 0, 0, 0, 0, 953, 215,
	0, 0, 0, 945, 955, 948, 949, 956, 951, 950,
	0, 953, 0, 0, 0, 0, 959, 955, 948, 949,
	956, 951, 950, 0, 957, 0, 0, 0, 0, 0,
	947, 0, 0, 0, 0, 1221, 337, 957, 338, 0,
	812, 0, 227, 344, 0, 0, 0, 0, 0, 0,
	346, 0, 785, 0, 832, 0, 0, 0, 0, 0,
	918, 914, 0, 0, 0, 0, 0, 0, 356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1244, 0,
	0, 0, 0, 915, 405, 1248, 0, 0, 1251, 0,
	441, 0, 0, 0, 0, 0, 920, 0, 912, 466,
	0, 0, 225, 913, 1184, 0, 0, 0, 0, 870,
	0, 695, 952, 1019, 0, 0, 1194, 163, 0, 227,
	187, 0, 227, 0, 0, 952, 227, 227, 0, 0,
	571, 1287, 1288, 0, 0, 0, 0, 0, 676, 0,
	0, 0, 1095, 163, 163, 0, 0, 326, 0, 0,
	163, 0, 736, 695, 0, 0, 1216, 919, 917, 0,
	0, 695, 567, 566, 577, 578, 569, 570, 572, 573,
	574, 575, 576, 568, 0, 0, 0, 0, 579, 1019,
	227, 45, 0, 938, 227, 0, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 227, 0, 479, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 719, 0, 0, 529, 530, 0,
	0, 533, 0, 0, 0, 537, 368, 0, 916, 571,
	0, 0, 820, 0, 0, 0, 0, 0, 0, 163,
	718, 163, 0, 0, 0, 0, 163, 551, 0, 0,
	0, 0, 0, 163, 0, 1273, 0, 0, 0, 989,
	0, 567, 566, 577, 578, 569, 570, 572, 573, 574,
	575, 576, 568, 0, 0, 0, 0, 579, 785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 1022, 870, 163, 325, 0, 0, 0, 0, 0,
	163, 464, 163, 571, 0, 0, 0, 0, 0, 695,
	0, 0, 695, 0, 0, 0, 695, 695, 0, 227,
	0, 571, 643, 0, 0, 0, 0, 0, 0, 22,
	46, 24, 25, 981, 1048, 0, 1048, 577, 578, 569,
	570, 572, 573, 574, 575, 576, 568, 40, 0, 0,
	672, 579, 26, 567, 566, 577, 578, 569, 570, 572,
	573, 574, 575, 576, 568, 0, 0, 0, 0, 579,
	695, 35, 0, 0, 0, 48, 942, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 0, 1086, 0,
	0, 695, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 571, 163, 0, 743, 0,
	1093, 0, 0, 0, 768, 0, 0, 0, 770, 0,
	163, 163, 0, 0, 163, 0, 0, 0, 163, 989,
	539, 0, 227, 28, 29, 31, 30, 33, 566, 577,
	578, 569, 570, 572, 573, 574, 575, 576, 568, 0,
	163, 0, 0, 579, 0, 0, 0, 0, 0, 34,
	41, 42, 0, 0, 43, 44, 32, 0, 0, 0,
	1135, 0, 1135, 1135, 1135, 0, 1140, 0, 0, 36,
	37, 0, 38, 39, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 0, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 227, 227, 163, 0, 326, 163, 163,
	163, 163, 163, 0, 0, 0, 0, 0, 0, 0,
	660, 0, 0, 47, 163, 0, 0, 0, 464, 0,
	0, 0, 163, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 1080, 0, 0,
	0, 1195, 1196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 0, 0, 1135,
	571, 163, 227, 0, 0, 0, 0, 163, 0, 0,
	0, 163, 820, 562, 0, 565, 0, 0, 0, 0,
	943, 580, 581, 582, 583, 584, 585, 586, 1230, 563,
	564, 561, 567, 566, 577, 578, 569, 570, 572, 573,
	574, 575, 576, 568, 0, 0, 0, 0, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	1245, 0, 0, 0, 0, 0, 0, 0, 1250, 0,
	0, 0, 0, 0, 0, 819, 539, 1048, 0, 0,
	819, 819, 0, 0, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	819, 819, 819, 942, 695, 0, 0, 0, 0, 0,
	0, 0, 1010, 0, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 1081,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 98,
	0, 100, 0, 163, 122, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 566, 577,
	578, 569, 570, 572, 573, 574, 575, 576, 568, 819,
	0, 0, 0, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 114, 0, 163, 125, 93, 92, 0,
	0, 0, 326, 129, 0, 0, 0, 84, 326, 119,
	112, 139, 0, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 0,
	146, 147, 148, 149, 108, 81, 94, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 73, 0, 99, 150, 116, 90,
	141, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 539, 819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1232,
	0, 0, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 300, 273, 312, 251, 265, 320,
	266, 267, 762, 239, 281, 111, 263, 0, 254, 234,
	260, 235, 252, 275, 88, 278, 761, 302, 284, 98,
	318, 100, 289, 0, 122, 107, 0, 0, 277, 304,
	279, 299, 272, 295, 244, 288, 313, 264, 292, 314,
	0, 0, 0, 0, 692, 693, 0, 0, 0, 0,
	0, 760, 0, 291, 309, 262, 293, 233, 290, 0,
	237, 240, 319, 307, 257, 258, 690, 0, 0, 0,
	0, 0, 0, 276, 280, 296, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 287, 0, 0,
	0, 238, 0, 766, 274, 0, 0, 0, 243, 757,
	753, 754, 163, 750, 751, 752, 305, 271, 166, 308,
	269, 268, 311, 114, 0, 0, 125, 93, 92, 0,
	0, 326, 0, 129, 303, 253, 261, 84, 259, 119,
	112, 139, 286, 764, 767, 101, 131, 115, 138, 167,
	145, 681, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 759,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 758, 0, 123, 140, 152, 249, 306,
	146, 147, 148, 149, 108, 687, 94, 121, 247, 248,
	245, 0, 246, 282, 283, 315, 316, 317, 298, 763,
	0, 0, 301, 285, 73, 0, 99, 150, 116, 90,
	765, 691, 310, 300, 273, 312, 251, 265, 320, 266,
	267, 294, 239, 281, 111, 263, 0, 254, 234, 260,
	235, 252, 275, 88, 278, 682, 302, 284, 98, 318,
	100, 289, 0, 122, 107, 0, 0, 277, 304, 279,
	299, 272, 295, 244, 288, 313, 264, 292, 314, 0,
	878, 0, 0, 692, 693, 0, 0, 0, 0, 0,
	685, 0, 291, 309, 262, 293, 233, 290, 0, 237,
	240, 319, 307, 257, 258, 690, 0, 0, 0, 0,
	0, 0, 276, 280, 296, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 287, 0, 0, 0,
	238, 0, 689, 274, 0, 0, 0, 243, 0, 256,
	297, 0, 232, 0, 0, 305, 271, 166, 308, 269,
	268, 311, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 303, 253, 261, 84, 259, 119, 112,
	139, 286, 113, 118, 101, 131, 115, 138, 167, 145,
	681, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 688, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 680, 0, 123, 140, 152, 249, 306, 146,
	147, 148, 149, 108, 687, 94, 121, 247, 248, 245,
	0, 246, 282, 283, 315, 316, 317, 298, 242, 0,
	0, 301, 285, 73, 0, 99, 150, 116, 90, 141,
	691, 310, 300, 273, 312, 251, 265, 320, 266, 267,
	294, 239, 281, 111, 263, 0, 254, 234, 260, 235,
	252, 275, 88, 278, 682, 302, 284, 98, 318, 100,
	289, 0, 122, 107, 0, 0, 277, 304, 279, 299,
	272, 295, 244, 288, 313, 264, 292, 314, 0, 0,
	0, 0, 692, 693, 0, 0, 0, 0, 0, 685,
	0, 291, 309, 262, 293, 233, 290, 0, 237, 240,
	319, 307, 257, 258, 690, 0, 0, 0, 0, 0,
	0, 276, 280, 296, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 287, 0, 0, 0, 238,
	0, 689, 274, 0, 0, 0, 243, 0, 256, 297,
	0, 232, 0, 0, 305, 271, 166, 308, 269, 268,
	311, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 303, 253, 261, 84, 259, 119, 112, 139,
	286, 113, 118, 101, 131, 115, 138, 167, 145, 681,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 688, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 680, 0, 123, 140, 152, 249, 306, 146, 147,
	148, 149, 108, 687, 94, 121, 247, 248, 245, 0,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 73, 0, 99, 150, 116, 90, 141, 691,
	310, 300, 273, 312, 251, 265, 320, 266, 267, 294,
	239, 281, 111, 263, 0, 254, 234, 260, 235, 252,
	275, 88, 278, 250, 302, 284, 98, 318, 100, 289,
	0, 122, 107, 0, 0, 277, 304, 279, 299, 272,
	295, 244, 288, 313, 264, 292, 314, 0, 0, 0,
	0, 692, 693, 0, 0, 0, 0, 0, 82, 0,
	291, 309, 262, 293, 233, 290, 0, 237, 240, 319,
	307, 257, 258, 690, 0, 0, 0, 0, 0, 0,
	276, 280, 296, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 287, 0, 0, 0, 238, 0,
	241, 274, 0, 0, 0, 243, 0, 256, 297, 0,
	232, 0, 0, 305, 271, 166, 308, 269, 268, 311,
	114, 0, 0, 125, 93, 92, 0, 0, 0, 0,
	129, 303, 253, 261, 84, 259, 119, 112, 139, 286,
	113, 118, 101, 131, 115, 138, 167, 145, 127, 128,
	144, 74, 126, 137, 83, 120, 76, 135, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 132,
	133, 85, 151, 79, 143, 78, 80, 142, 109, 130,
	136, 106, 103, 77, 134, 104, 102, 97, 89, 0,
	236, 0, 123, 140, 152, 249, 306, 146, 147, 148,
	149, 108, 81, 94, 121, 247, 248, 245, 0, 246,
	282, 283, 315, 316, 317, 298, 242, 0, 0, 301,
	285, 73, 0, 99, 150, 116, 90, 141, 691, 310,
	300, 273, 312, 251, 265, 320, 266, 267, 294, 239,
	281, 111, 263, 0, 254, 234, 260, 235, 252, 275,
	88, 278, 250, 302, 284, 98, 318, 100, 289, 0,
	122, 107, 0, 0, 277, 304, 279, 299, 272, 295,
	244, 288, 313, 264, 292, 314, 0, 0, 0, 0,
	1165, 1166, 0, 0, 0, 0, 0, 82, 0, 291,
	309, 262, 293, 233, 290, 0, 237, 240, 319, 307,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 276,
	280, 296, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 287, 0, 0, 0, 238, 0, 241,
	274, 0, 0, 0, 243, 0, 256, 297, 0, 232,
	0, 0, 305, 271, 166, 308, 269, 268, 311, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	303, 253, 261, 84, 259, 119, 112, 139, 286, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 236,
	0, 123, 140, 152, 249, 306, 146, 147, 148, 149,
	108, 81, 94, 121, 247, 248, 245, 0, 246, 282,
	283, 315, 316, 317, 298, 242, 0, 0, 301, 285,
	73, 0, 99, 150, 116, 90, 141, 71, 310, 300,
	273, 312, 251, 265, 320, 266, 267, 294, 239, 281,
	111, 263, 0, 254, 234, 260, 235, 252, 275, 88,
	278, 250, 302, 284, 98, 318, 100, 289, 0, 122,
	107, 0, 0, 277, 304, 279, 299, 272, 295, 244,
	288, 313, 264, 292, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 291, 309,
	262, 293, 233, 290, 0, 237, 240, 319, 307, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 276, 280,
	296, 270, 0, 0, 0, 0, 0, 0, 1217, 0,
	255, 0, 287, 0, 0, 0, 238, 0, 241, 274,
	0, 0, 0, 243, 0, 256, 297, 0, 232, 0,
	0, 305, 271, 166, 308, 269, 268, 311, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 303,
	253, 261, 84, 259, 119, 112, 139, 286, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 236, 0,
	123, 140, 152, 249, 306, 146, 147, 148, 149, 108,
	81, 94, 121, 247, 248, 245, 0, 246, 282, 283,
	315, 316, 317, 298, 242, 0, 0, 301, 285, 73,
	0, 99, 150, 116, 90, 141, 71, 310, 300, 273,
	312, 251, 265, 320, 266, 267, 294, 239, 281, 111,
	263, 0, 254, 234, 260, 235, 252, 275, 88, 278,
	250, 302, 284, 98, 318, 100, 289, 0, 122, 107,
	0, 0, 277, 304, 279, 299, 272, 295, 244, 288,
	313, 264, 292, 314, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 291, 309, 262,
	293, 233, 290, 0, 237, 240, 319, 307, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 276, 280, 296,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 287, 0, 0, 0, 238, 0, 241, 274, 0,
	0, 0, 243, 0, 256, 297, 0, 232, 0, 0,
	305, 271, 166, 308, 269, 268, 311, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 303, 253,
	261, 84, 259, 119, 112, 139, 286, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 236, 0, 123,
	140, 152, 249, 306, 146, 147, 148, 149, 108, 81,
	94, 121, 247, 248, 245, 0, 246, 282, 283, 315,
	316, 317, 298, 242, 0, 0, 301, 285, 73, 0,
	99, 150, 116, 90, 141, 71, 310, 300, 273, 312,
	251, 265, 320, 266, 267, 294, 239, 281, 111, 263,
	0, 254, 234, 260, 235, 252, 275, 88, 278, 250,
	302, 284, 98, 318, 100, 289, 0, 122, 107, 0,
	0, 277, 304, 279, 299, 272, 295, 244, 288, 313,
	264, 292, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 291, 309, 262, 293,
	233, 290, 0, 237, 240, 319, 307, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 276, 280, 296, 270,
	0, 0, 0, 0, 0, 0, 1101, 0, 255, 0,
	287, 0, 0, 0, 238, 0, 241, 274, 0, 0,
	0, 243, 0, 256, 297, 0, 232, 0, 0, 305,
	271, 166, 308, 269, 268, 311, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 303, 253, 261,
	84, 259, 119, 112, 139, 286, 113, 118, 101, 131,
	115, 138, 167, 145, 127, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 80, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 0, 236, 0, 123, 140,
	152, 249, 306, 146, 147, 148, 149, 108, 81, 94,
	121, 247, 248, 245, 0, 246, 282, 283, 315, 316,
	317, 298, 242, 0, 0, 301, 285, 73, 0, 99,
	150, 116, 90, 141, 327, 310, 300, 273, 312, 251,
	265, 320, 266, 267, 294, 239, 281, 111, 263, 0,
	254, 234, 260, 235, 252, 275, 88, 278, 250, 302,
	284, 98, 318, 100, 289, 0, 122, 107, 0, 0,
	277, 304, 279, 299, 272, 295, 244, 288, 313, 264,
	292, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 291, 309, 262, 293, 233,
	290, 0, 237, 240, 319, 307, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 276, 280, 296, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 287,
	0, 0, 0, 238, 0, 241, 274, 0, 0, 0,
	243, 0, 256, 297, 0, 232, 0, 0, 305, 271,
	166, 308, 269, 268, 311, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 303, 253, 261, 84,
	259, 119, 112, 139, 286, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 236, 0, 123, 140, 152,
	249, 306, 146, 147, 148, 149, 108, 81, 94, 121,
	247, 248, 245, 0, 246, 282, 283, 315, 316, 317,
	298, 242, 0, 0, 301, 285, 73, 0, 99, 150,
	116, 90, 141, 71, 310, 300, 273, 312, 251, 265,
	320, 266, 267, 294, 239, 281, 111, 263, 0, 254,
	234, 260, 235, 252, 275, 88, 278, 250, 302, 284,
	98, 318, 100, 289, 0, 122, 107, 0, 0, 277,
	304, 279, 299, 272, 295, 244, 288, 313, 264, 292,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 291, 309, 262, 293, 233, 290,
	0, 237, 240, 319, 307, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 276, 280, 296, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 287, 0,
	0, 0, 238, 0, 241, 274, 0, 0, 0, 243,
	0, 256, 297, 0, 232, 0, 0, 305, 271, 166,
	308, 269, 268, 311, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 303, 253, 261, 84, 259,
	119, 112, 139, 286, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 236, 0, 123, 140, 152, 249,
	306, 146, 147, 148, 149, 108, 81, 94, 121, 247,
	248, 245, 0, 246, 282, 283, 315, 316, 317, 298,
	242, 0, 0, 301, 285, 73, 0, 99, 150, 116,
	90, 141, 327, 310, 300, 273, 312, 251, 265, 320,
	266, 267, 294, 239, 281, 111, 263, 0, 254, 234,
	260, 235, 252, 275, 88, 278, 250, 302, 284, 98,
	318, 100, 289, 0, 122, 107, 0, 0, 277, 304,
	279, 299, 272, 295, 244, 288, 313, 264, 292, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 291, 309, 262, 293, 233, 290, 0,
	237, 240, 319, 307, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 276, 280, 296, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 287, 0, 0,
	0, 238, 0, 241, 274, 0, 0, 0, 243, 0,
	256, 297, 0, 232, 0, 0, 305, 271, 166, 308,
	269, 268, 311, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 303, 253, 261, 84, 259, 119,
	112, 139, 286, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 230,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 236, 0, 123, 140, 152, 249, 306,
	146, 147, 148, 149, 231, 229, 94, 121, 247, 248,
	245, 0, 246, 282, 283, 315, 316, 317, 298, 242,
	0, 0, 301, 285, 73, 0, 99, 150, 116, 90,
	141, 71, 310, 300, 273, 312, 251, 265, 320, 266,
	267, 294, 239, 281, 111, 263, 0, 254, 234, 260,
	235, 252, 275, 88, 278, 250, 302, 284, 98, 318,
	100, 289, 0, 122, 107, 0, 0, 277, 304, 279,
	299, 272, 295, 244, 288, 313, 264, 292, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 291, 309, 262, 293, 233, 290, 0, 237,
	240, 319, 307, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 276, 280, 296, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 287, 0, 0, 0,
	238, 0, 241, 274, 0, 0, 0, 243, 0, 256,
	297, 0, 232, 0, 0, 305, 271, 166, 308, 269,
	268, 311, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 303, 253, 261, 84, 259, 119, 112,
	139, 286, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 236, 0, 123, 140, 152, 249, 306, 146,
	147, 148, 149, 108, 81, 94, 121, 247, 248, 245,
	0, 246, 282, 283, 315, 316, 317, 298, 242, 0,
	0, 301, 285, 73, 0, 99, 150, 116, 90, 141,
	164, 310, 300, 273, 312, 251, 265, 320, 266, 267,
	294, 239, 281, 111, 263, 0, 254, 234, 260, 235,
	252, 275, 88, 278, 250, 302, 284, 98, 318, 100,
	289, 0, 122, 107, 0, 0, 277, 304, 279, 299,
	272, 295, 244, 288, 313, 264, 292, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 291, 309, 262, 293, 233, 290, 0, 237, 240,
	319, 307, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 276, 280, 296, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 287, 0, 0, 0, 238,
	0, 241, 274, 0, 0, 0, 243, 0, 256, 297,
	0, 232, 0, 0, 305, 271, 166, 308, 269, 268,
	311, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	0, 129, 303, 253, 261, 84, 259, 119, 112, 139,
	286, 113, 118, 101, 131, 115, 138, 167, 145, 127,
	128, 144, 74, 126, 137, 83, 120, 76, 135, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	132, 133, 85, 151, 79, 143, 78, 230, 142, 109,
	130, 136, 106, 103, 77, 134, 104, 102, 97, 89,
	0, 236, 0, 123, 140, 152, 249, 306, 146, 147,
	148, 149, 231, 229, 224, 223, 247, 248, 245, 0,
	246, 282, 283, 315, 316, 317, 298, 242, 0, 0,
	301, 285, 73, 0, 99, 150, 116, 90, 141, 71,
	111, 0, 0, 814, 0, 377, 0, 0, 0, 88,
	0, 376, 0, 0, 98, 415, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 408, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 395, 394,
	397, 398, 399, 400, 0, 0, 82, 396, 401, 402,
	403, 0, 0, 374, 388, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 385, 386, 817, 0,
	0, 0, 427, 0, 387, 0, 383, 384, 0, 389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 425, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 0, 146, 147, 148, 149, 108,
	81, 94, 121, 416, 426, 423, 421, 424, 420, 422,
	419, 418, 417, 428, 410, 411, 413, 0, 412, 73,
	0, 99, 150, 116, 90, 141, 327, 111, 0, 0,
	0, 0, 377, 0, 0, 0, 88, 0, 376, 0,
	0, 98, 415, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 408, 409, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 368, 395, 394, 397, 398, 399,
	400, 0, 0, 82, 396, 401, 402, 403, 0, 0,
	374, 388, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 0, 0, 0, 0, 427,
	0, 387, 0, 383, 384, 0, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 425, 0, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 0, 0, 0, 84,
	0, 119, 112, 139, 0, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 0, 0, 123, 140, 152,
	0, 0, 146, 147, 148, 149, 108, 81, 94, 121,
	416, 426, 423, 421, 424, 420, 422, 419, 418, 417,
	428, 410, 411, 413, 0, 412, 73, 0, 99, 150,
	116, 90, 141, 327, 111, 0, 0, 0, 0, 377,
	0, 0, 0, 88, 0, 376, 0, 0, 98, 415,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 408,
	409, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 395, 394, 397, 398, 399, 400, 0, 0,
	82, 396, 401, 402, 403, 0, 0, 374, 388, 0,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 817, 0, 0, 0, 427, 0, 387, 0,
	383, 384, 0, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	425, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 0, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 0, 146,
	147, 148, 149, 108, 81, 94, 121, 416, 426, 423,
	421, 424, 420, 422, 419, 418, 417, 428, 410, 411,
	413, 22, 412, 73, 0, 99, 150, 116, 90, 141,
	327, 0, 111, 0, 0, 0, 0, 377, 0, 0,
	0, 88, 0, 376, 0, 0, 98, 415, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 408, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	395, 394, 397, 398, 399, 400, 0, 0, 82, 396,
	401, 402, 403, 0, 0, 374, 388, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	0, 0, 0, 0, 427, 0, 387, 0, 383, 384,
	0, 389, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 425, 0,
	114, 0, 0, 125, 93, 92, 0, 0, 0, 0,
	129, 0, 0, 0, 84, 0, 119, 112, 139, 0,
	113, 118, 101, 131, 115, 138, 167, 145, 127, 128,
	144, 74, 126, 137, 83, 120, 76, 135, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 132,
	133, 85, 151, 79, 143, 78, 80, 142, 109, 130,
	136, 106, 103, 77, 134, 104, 102, 97, 89, 0,
	0, 0, 123, 140, 152, 0, 0, 146, 147, 148,
	149, 108, 81, 94, 121, 416, 426, 423, 421, 424,
	420, 422, 419, 418, 417, 428, 410, 411, 413, 0,
	412, 73, 0, 99, 150, 116, 90, 141, 327, 111,
	0, 0, 0, 0, 377, 0, 0, 0, 88, 0,
	376, 0, 0, 98, 415, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 408, 409, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 0, 0, 395, 394, 397,
	398, 399, 400, 0, 0, 82, 396, 401, 402, 403,
	0, 0, 374, 388, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 0, 0, 0,
	0, 427, 0, 387, 0, 383, 384, 0, 389, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 425, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 0, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 0, 146, 147, 148, 149, 108, 81,
	94, 121, 416, 426, 423, 421, 424, 420, 422, 419,
	418, 417, 428, 410, 411, 413, 0, 412, 73, 111,
	99, 150, 116, 90, 141, 327, 0, 0, 88, 0,
	0, 0, 0, 98, 415, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 408, 409, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 0, 0, 395, 394, 397,
	398, 399, 400, 0, 0, 82, 396, 401, 402, 403,
	0, 0, 0, 388, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 0, 0, 0,
	0, 427, 0, 387, 0, 383, 384, 0, 389, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 425, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 1282, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 0, 146, 147, 148, 149, 108, 81,
	94, 121, 416, 426, 423, 421, 424, 420, 422, 419,
	418, 417, 428, 410, 411, 413, 0, 412, 73, 111,
	99, 150, 116, 90, 141, 327, 0, 0, 88, 0,
	0, 0, 0, 98, 415, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 408, 409, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 0, 0, 395, 394, 397,
	398, 399, 400, 0, 0, 82, 396, 401, 402, 403,
	0, 0, 0, 388, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 0, 0, 0,
	0, 427, 0, 387, 0, 383, 384, 0, 389, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 425, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 0, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 0, 146, 147, 148, 149, 108, 81,
	94, 121, 416, 426, 423, 421, 424, 420, 422, 419,
	418, 417, 428, 410, 411, 413, 0, 412, 73, 0,
	99, 150, 116, 90, 141, 327, 111, 0, 0, 0,
	988, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 990, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 0, 0, 0, 84, 0,
	119, 112, 139, 0, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 0, 0, 123, 140, 152, 0,
	111, 146, 147, 148, 149, 108, 81, 94, 121, 88,
	707, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 73, 0, 99, 150, 116,
	90, 141, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 706, 166, 0, 0, 0, 701, 700, 0,
	705, 704, 703, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 111, 146, 147, 148, 149, 108,
	81, 94, 121, 88, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 73,
	0, 99, 150, 116, 90, 141, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 65, 0, 0,
	0, 69, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 0, 113, 118, 101, 131, 115, 138, 67, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 0, 146,
	147, 148, 149, 108, 81, 94, 121, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 99, 150, 116, 90, 141,
	71, 111, 0, 0, 0, 463, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	465, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 0, 146, 147, 148, 149,
	108, 81, 94, 121, 0, 0, 0, 0, 22, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	73, 0, 99, 150, 116, 90, 141, 164, 88, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 0, 129, 0, 0,
	0, 84, 0, 119, 112, 139, 0, 113, 118, 101,
	131, 115, 138, 167, 145, 127, 128, 144, 74, 126,
	137, 83, 120, 76, 135, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 132, 133, 85, 151,
	79, 143, 78, 80, 142, 109, 130, 136, 106, 103,
	77, 134, 104, 102, 97, 89, 0, 0, 0, 123,
	140, 152, 0, 0, 146, 147, 148, 149, 108, 81,
	94, 121, 0, 0, 0, 0, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 73, 0,
	99, 150, 116, 90, 141, 71, 88, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 0, 129, 0, 0, 0, 84,
	0, 119, 112, 139, 0, 113, 118, 101, 131, 115,
	138, 167, 145, 127, 128, 144, 74, 126, 137, 83,
	120, 76, 135, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 132, 133, 85, 151, 79, 143,
	78, 80, 142, 109, 130, 136, 106, 103, 77, 134,
	104, 102, 97, 89, 0, 0, 0, 123, 140, 152,
	0, 111, 146, 147, 148, 149, 108, 81, 94, 121,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 73, 0, 99, 150,
	116, 90, 141, 164, 0, 0, 0, 0, 0, 0,
	0, 637, 0, 0, 638, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 0, 129,
	0, 0, 0, 84, 0, 119, 112, 139, 0, 113,
	118, 101, 131, 115, 138, 167, 145, 127, 128, 144,
	74, 126, 137, 83, 120, 76, 135, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 132, 133,
	85, 151, 79, 143, 78, 80, 142, 109, 130, 136,
	106, 103, 77, 134, 104, 102, 97, 89, 0, 0,
	0, 123, 140, 152, 0, 111, 146, 147, 148, 149,
	108, 81, 94, 121, 88, 0, 477, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	73, 0, 99, 150, 116, 90, 141, 71, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 0, 129, 0, 0, 0, 84, 0, 119,
	112, 139, 0, 113, 118, 101, 131, 115, 138, 167,
	145, 127, 128, 144, 74, 126, 137, 83, 120, 76,
	135, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 132, 133, 85, 151, 79, 143, 78, 80,
	142, 109, 130, 136, 106, 103, 77, 134, 104, 102,
	97, 89, 0, 0, 0, 123, 140, 152, 0, 0,
	146, 147, 148, 149, 108, 81, 94, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 99, 150, 116, 90,
	141, 71, 111, 0, 0, 0, 463, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	114, 0, 0, 125, 93, 92, 0, 0, 0, 0,
	129, 0, 0, 0, 84, 0, 119, 112, 139, 0,
	461, 118, 101, 131, 115, 138, 167, 145, 127, 128,
	144, 74, 126, 137, 83, 120, 76, 135, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 132,
	133, 85, 151, 79, 143, 78, 80, 142, 109, 130,
	136, 106, 103, 77, 134, 104, 102, 97, 89, 0,
	0, 0, 123, 140, 152, 0, 111, 146, 147, 148,
	149, 108, 81, 94, 121, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 73, 0, 99, 150, 116, 90, 141, 164, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 0, 0, 0, 84, 0,
	119, 112, 139, 0, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 0, 0, 123, 140, 152, 0,
	111, 146, 147, 148, 149, 108, 81, 94, 121, 88,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 73, 0, 99, 150, 116,
	90, 141, 164, 0, 0, 0, 0, 0, 0, 990,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 111, 146, 147, 148, 149, 108,
	81, 94, 121, 88, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 73,
	0, 99, 150, 116, 90, 141, 71, 0, 0, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 0, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 0, 146,
	147, 148, 149, 108, 81, 94, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 111, 99, 150, 116, 90, 141,
	164, 0, 440, 88, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 0, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 111, 146,
	147, 148, 149, 108, 81, 94, 121, 88, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 73, 0, 99, 150, 116, 90, 141,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 0, 0, 0,
	84, 0, 119, 112, 139, 0, 113, 118, 101, 131,
	115, 138, 167, 145, 127, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 80, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 217, 0, 0, 123, 140,
	152, 0, 111, 146, 147, 148, 149, 108, 81, 94,
	121, 88, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 73, 0, 99,
	150, 116, 90, 141, 327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	114, 0, 0, 125, 93, 92, 0, 0, 0, 0,
	129, 0, 0, 0, 84, 0, 119, 112, 139, 0,
	113, 118, 101, 131, 115, 138, 167, 145, 127, 128,
	144, 74, 126, 137, 83, 120, 76, 135, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 132,
	133, 85, 151, 79, 143, 78, 80, 142, 109, 130,
	136, 106, 103, 77, 134, 104, 102, 97, 89, 0,
	0, 0, 123, 140, 152, 0, 111, 146, 147, 148,
	149, 108, 81, 94, 121, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 73, 0, 99, 150, 116, 90, 141, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 166,
	0, 0, 0, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 0, 129, 0, 0, 0, 84, 0,
	119, 112, 139, 0, 113, 118, 101, 131, 115, 138,
	167, 145, 127, 128, 144, 74, 126, 137, 83, 120,
	76, 135, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 132, 133, 85, 151, 79, 143, 78,
	80, 142, 109, 130, 136, 106, 103, 77, 134, 104,
	102, 97, 89, 0, 0, 0, 123, 140, 152, 0,
	111, 146, 147, 148, 149, 108, 81, 94, 121, 88,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 73, 0, 99, 150, 116,
	90, 141, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 0, 129, 0,
	0, 0, 84, 0, 119, 112, 139, 0, 113, 118,
	101, 131, 115, 138, 167, 145, 127, 128, 144, 74,
	126, 137, 83, 120, 76, 135, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 132, 133, 85,
	151, 79, 143, 78, 80, 142, 109, 130, 136, 106,
	103, 77, 134, 104, 102, 97, 89, 0, 0, 0,
	123, 140, 152, 0, 111, 146, 147, 148, 149, 108,
	81, 94, 121, 88, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 73,
	0, 99, 150, 116, 90, 141, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 0, 129, 0, 0, 0, 84, 0, 119, 112,
	139, 0, 113, 118, 101, 131, 115, 138, 167, 145,
	127, 128, 144, 74, 126, 137, 83, 120, 76, 135,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 132, 133, 85, 151, 79, 143, 78, 80, 142,
	109, 130, 136, 106, 103, 77, 134, 104, 102, 97,
	89, 0, 0, 0, 123, 140, 152, 0, 111, 146,
	147, 148, 149, 108, 81, 94, 121, 88, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 73, 0, 99, 150, 116, 90, 141,
	327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 0, 129, 0, 0, 0,
	84, 0, 119, 112, 139, 0, 113, 118, 101, 131,
	115, 138, 167, 145, 127, 128, 144, 74, 126, 137,
	83, 120, 76, 135, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 132, 133, 85, 151, 79,
	143, 78, 80, 142, 109, 130, 136, 106, 103, 77,
	134, 104, 102, 97, 89, 0, 0, 0, 123, 140,
	152, 0, 0, 146, 147, 148, 149, 108, 81, 94,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 99,
	150, 116, 90, 141, 164,
}
var yyPact = [...]int{

	1713, -1000, -158, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	874, 914, -1000, -1000, -1000, -1000, -1000, 706, 7407, 93,
	113, 33, 9939, 111, 88, 10491, -1000, 7, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 669, -1000, -1000, -1000, -1000,
	-1000, 847, 872, 690, 865, 808, -1000, 81, 8809, 9755,
	5316, -1000, 9571, 77, 107, 10491, -92, 10123, 77, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 103, 10491, -1000, 10491, 73, 73, -133,
	73, 10491, -1000, 150, -1000, -1000, -1000, -1000, 10491, -136,
	832, -34, 3942, 3942, 3942, 3942, 17, 3942, 3942, 724,
	-1000, -1000, -1000, -1000, 3942, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 371, 836, 6402, 6402, 874, -1000,
	669, -1000, -1000, -1000, 819, -1000, -1000, 331, 9387, 642,
	912, -1000, -1000, -1000, 860, 8040, 8625, 10491, 617, -1000,
	555, 4858, -1000, -1000, -1000, 286, 8408, -1000, -1000, -1000,
	831, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10491, 591, -1000, 89, -1000, 138, -1000, -1000, -137,
	303, -139, 3942, 82, 643, 10491, 10491, 3942, 63, 10491,
	856, -140, 720, 10491, -1000, 5087, -1000, 3942, 3942, 3942,
	3942, 3942, 3942, 3942, 3942, -1000, -1000, -1000, -1000, -1000,
	-1000, 3942, 3942, -1000, -1000, 10491, -1000, -1000, -1000, -1000,
	907, 197, 489, -1000, 6402, 1943, 474, 474, -1000, -1000,
	126, -1000, -1000, 6822, 6822, 6822, 6822, 6822, 6822, 6822,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 474, 136, -1000, 6185, 474, 474,
	474, 474, 474, 474, 6402, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, 474, 593,
	-1000, 426, 847, 371, 808, 8224, 738, -1000, -1000, 50,
	10491, -1000, 10307, 8809, 8809, 8809, 8809, 8809, -1000, 774,
	768, -1000, 803, 800, 740, 10491, -1000, 589, 371, 8040,
	198, 474, -1000, 9177, -1000, -1000, 50, 8809, 10491, -1000,
	-1000, 4858, 555, 6402, 179, -1000, -1000, -1000, -1000, 464,
	3026, 7223, -1000, -44, -1000, -1000, 631, -1000, 631, 631,
	631, 631, -25, -25, -25, -25, -1000, -1000, -1000, -1000,
	-1000, 703, 698, -1000, 631, 631, 631, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 693, 51, 693, 663,
	663, 4629, 3026, 855, 668, -1000, 10491, -116, -141, 228,
	2568, -1000, 10491, -1000, -1000, 3942, 10491, 3942, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 795, 6402, 6402, 362, 6402, 6402, 250,
	6822, 372, 270, 6822, 6822, 6822, 6822, 6822, 6822, 6822,
	6822, -1000, 6822, 6822, 6822, 6822, 6822, 6822, 6822, 71,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -142, -1000,
	669, 869, 869, 277, 277, 277, 277, 277, 277, 2188,
	5533, 4629, 587, 306, 6185, 5967, 5967, 6402, 6402, 5967,
	862, 297, 306, 10123, -1000, 371, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5967, 5967, 5967, 5967, 6402, -1000,
	-1000, -1000, 836, -1000, 862, 898, -1000, 818, 817, 5967,
	-1000, 649, 474, -1000, 652, -1000, 265, 912, 716, 719,
	900, -1000, -1000, -1000, -1000, 767, -1000, 751, -1000, -1000,
	-1000, -1000, -1000, 371, -1000, 104, 101, 100, 10123, -1000,
	888, 646, -1000, -1000, 306, -1000, 65, -1000, 2797, -1000,
	282, 3255, 106, -1000, -1000, 3255, 3255, 70, 829, 94,
	53, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 659, 696,
	844, 61, -143, 206, 206, -144, -1000, -1000, 1423, -50,
	-1000, -1000, 396, -25, -25, -1000, -1000, 179, 70, 829,
	179, 179, 179, 409, 409, -1000, -1000, -1000, -1000, 395,
	693, -1000, -1000, -1000, 386, -1000, -1000, 135, -1000, 2797,
	-1000, 718, 10123, 3942, -1000, 4400, -1000, -1000, 10491, -1000,
	1269, 1282, 1282, 181, 209, 2797, -1000, -1000, 282, 829,
	3255, 106, -1000, -1000, -1000, -1000, 94, 49, -1000, -1000,
	3942, -1000, 788, 250, 276, -1000, -1000, 334, -1000, -1000,
	306, 306, 526, -1000, -1000, -1000, -1000, 372, 6822, 6822,
	6822, 1192, 526, 1654, 1636, 1738, 277, 473, 473, 311,
	311, 311, 311, 311, 290, 290, -1000, -1000, -1000, 371,
	-1000, -1000, -1000, 371, 5967, 529, -1000, -1000, 7039, 134,
	474, 6402, -1000, 559, 559, 370, 394, 559, 5967, 296,
	-1000, 6402, 371, -1000, 559, 371, 559, 559, -1000, -1000,
	10491, -1000, -1000, -1000, -1000, 667, 712, 10307, 474, -1000,
	7832, 10123, 874, 10307, 6402, 6402, -1000, -1000, 6402, 689,
	-1000, 6402, -1000, -1000, -1000, -1000, 474, 474, 474, 548,
	-1000, 874, -1000, -1000, -148, -1000, -1000, -1000, 3026, -1000,
	385, -1000, -1000, -1000, -1000, -1000, -1000, 91, -1000, 39,
	-1000, -1000, -1000, 10123, 684, 10123, -150, -151, -1000, -1000,
	-152, -156, 80, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 313, 102, 901, -1000, 843, -1000, 842,
	405, -1000, -1000, 459, 179, 179, -1000, -1000, -1000, -1000,
	585, -1000, 580, 514, -1000, 576, 4400, 10491, -1000, -1000,
	511, -1000, 263, -1000, -1000, 1282, -1000, 10123, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10123, 10491, -1000, -1000, -1000, -1000, -1000, 10123,
	-1000, -1000, -1000, -1000, -1000, -1000, 1192, 526, 1463, -1000,
	6822, 6822, -1000, -1000, 559, 5967, -1000, -1000, 8993, -1000,
	-1000, 4171, 5967, 306, -1000, -1000, 220, 71, 220, -106,
	621, 292, -1000, 6402, 439, -1000, -1000, -1000, -1000, -1000,
	-1000, 888, 8809, -1000, 849, 482, 488, -1000, -1000, 5750,
	371, 551, 125, 548, 847, -1000, 306, 306, 306, 10123,
	306, 10123, 10123, 10123, 7624, 10123, 847, -1000, -1000, -1000,
	-1000, -1000, -1000, 68, -1000, -1000, 522, -1000, 665, 10123,
	509, -1000, -1000, -1000, -1000, 841, 206, 838, -1000, -1000,
	-1000, -1000, -1000, -1000, 671, -1000, 666, -66, -1000, -1000,
	-1000, -1000, -1000, -1000, -25, 402, -25, 363, -1000, 356,
	-1000, 3942, 4400, 3484, -1000, -1000, 664, -1000, -1000, -1000,
	-1000, -1000, -1000, 851, -1000, 6822, 526, 526, -1000, -1000,
	-1000, -1000, 118, 371, 371, 631, 631, -1000, 631, 663,
	-1000, 631, -2, 631, -5, 371, 371, 474, -101, -1000,
	306, 6402, 878, 500, 837, -1000, 474, -1000, -1000, 670,
	10123, 10123, -1000, -1000, 506, -1000, 494, 494, 494, 198,
	-1000, -1000, -1000, -1000, 368, 10123, -1000, -1000, -1000, 467,
	55, -1000, -1000, -1000, 435, 383, -1000, 179, -1000, 179,
	428, 416, -1000, -1000, -1000, -1000, -1000, -1000, 10123, 474,
	526, 3713, -1000, -1000, -1000, -108, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6822, 371, 398, 306, 876, 871,
	896, -1000, 474, -1000, 669, 105, -1000, 10123, -1000, -1000,
	-1000, -1000, -1000, -1000, 316, -1000, -1000, 10491, -1000, 413,
	-1000, -1000, -1000, -1000, -1000, 438, 48, -1000, -1000, -1000,
	41, -1000, -1000, -1000, 6402, 6402, 10307, 488, 371, 10123,
	-1000, -1000, 527, -1000, 643, 434, -1000, 10123, 371, 75,
	-119, 306, 440, 427, -1000, -1000, 10123, -116, -1000, 48,
	801, -1000, 780, -114, -129, 432, -1000, -1000, 34, -1000,
	778, -1000, 710, 35, -117, -1000, 710, 909, 474, -126,
	-1000, 185, 185, 6612, -130, -1000, -1000, -1000, 369, 62,
	-1000, 1562, 371, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1136, 23, 658, 1135, 1134, 1133, 1130, 1128, 1126,
	1123, 1122, 1121, 1119, 1118, 1117, 1115, 1114, 1113, 1112,
	1111, 1108, 1107, 163, 1106, 1105, 1104, 53, 1103, 70,
	1102, 1101, 37, 295, 46, 31, 51, 1098, 28, 72,
	64, 1097, 49, 1095, 1094, 1093, 1092, 62, 1091, 1090,
	1271, 1088, 1086, 16, 32, 1085, 1079, 1078, 1073, 74,
	20, 1069, 1066, 1065, 1061, 1056, 1051, 44, 7, 11,
	18, 13, 1048, 880, 8, 1047, 42, 1046, 1045, 1042,
	1031, 39, 1016, 55, 1012, 43, 52, 1011, 26, 67,
	45, 22, 9, 145, 1007, 41, 56, 1000, 457, 999,
	170, 402, 998, 997, 996, 995, 34, 0, 830, 1020,
	40, 994, 14, 993, 1474, 35, 58, 27, 992, 63,
	299, 25, 991, 990, 38, 988, 987, 986, 985, 984,
	983, 201, 982, 10, 978, 21, 50, 54, 977, 976,
	47, 19, 975, 974, 973, 48, 57, 972, 30, 971,
	969, 968, 966, 15, 78, 80, 965, 962, 961, 2,
	12, 4, 960, 3, 949, 17, 945, 6, 936, 5,
	75, 65, 1, 932, 931, 376, 239, 930, 921, 79,
}
var yyR1 = [...]int{

	0, 173, 174, 174, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 3, 4, 4, 5, 5, 6,
	6, 26, 26, 7, 8, 8, 177, 177, 45, 45,
	89, 89, 9, 9, 122, 122, 10, 10, 10, 10,
	10, 10, 10, 169, 169, 168, 167, 167, 166, 166,
	165, 15, 15, 149, 150, 150, 150, 146, 152, 152,
	151, 151, 151, 151, 151, 151, 151, 151, 125, 125,
	125, 128, 128, 126, 126, 126, 126, 126, 126, 126,
	126, 127, 127, 127, 127, 127, 127, 129, 129, 129,
	129, 129, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 145, 145, 131,
	131, 140, 140, 141, 141, 141, 138, 138, 139, 139,
	142, 142, 132, 132, 132, 132, 132, 132, 132, 132,
	135, 135, 135, 134, 143, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 137, 137, 137, 137, 144, 144,
	144, 144, 133, 147, 147, 147, 147, 147, 147, 147,
	157, 157, 157, 157, 158, 158, 159, 159, 172, 172,
	172, 172, 172, 156, 156, 156, 156, 156, 156, 156,
	148, 148, 161, 161, 160, 160, 160, 155, 155, 155,
	155, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 171, 171, 171, 171, 171, 171, 171, 153, 153,
	153, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 164, 162, 162, 163, 163,
	12, 13, 13, 13, 13, 14, 14, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 123, 123, 123, 18, 18, 20, 20, 21, 22,
	19, 19, 19, 19, 19, 178, 23, 24, 24, 25,
	25, 25, 29, 29, 29, 27, 27, 28, 28, 34,
	34, 33, 33, 35, 35, 35, 35, 111, 111, 111,
	110, 110, 37, 37, 38, 38, 39, 39, 40, 40,
	40, 52, 52, 88, 88, 90, 90, 41, 41, 41,
	41, 42, 42, 43, 43, 44, 44, 118, 118, 117,
	117, 117, 116, 116, 46, 46, 46, 48, 47, 47,
	47, 47, 49, 49, 51, 51, 50, 50, 53, 53,
	53, 53, 54, 54, 36, 36, 36, 36, 36, 36,
	36, 99, 99, 56, 56, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 66, 66, 66, 66, 66,
	66, 57, 57, 57, 57, 57, 57, 57, 32, 32,
	67, 67, 67, 73, 68, 68, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 64, 64,
	64, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 179,
	179, 65, 65, 65, 65, 30, 30, 30, 30, 30,
	121, 121, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 77, 77, 31, 31, 75,
	75, 76, 78, 78, 74, 74, 74, 59, 59, 59,
	59, 59, 59, 59, 59, 61, 61, 61, 79, 79,
	80, 80, 81, 81, 82, 82, 83, 84, 84, 84,
	85, 85, 85, 85, 86, 86, 86, 58, 58, 58,
	58, 58, 58, 87, 87, 87, 87, 91, 91, 69,
	69, 71, 71, 70, 72, 92, 92, 95, 93, 93,
	96, 96, 94, 94, 94, 113, 113, 113, 97, 97,
	100, 100, 101, 101, 98, 98, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 103, 103, 103, 104,
	104, 105, 105, 105, 112, 108, 108, 109, 109, 114,
	114, 115, 115, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 175, 176, 119, 120, 120, 120,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 8, 8, 6, 1, 1, 1, 3,
	0, 4, 3, 4, 1, 1, 2, 5, 5, 8,
	4, 6, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 6, 4, 1, 3, 3, 3, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 4, 2,
	1, 4, 3, 3, 1, 2, 3, 2, 3, 3,
	4, 3, 4, 3, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 5, 6, 5, 5, 4, 4, 10,
	4, 3, 4, 4, 1, 2, 3, 3, 1, 1,
	2, 2, 2, 2, 3, 3, 2, 2, 3, 3,
	1, 1, 1, 3, 2, 2, 2, 0, 1, 2,
	3, 2, 3, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 6, 8, 7, 7, 7, 7, 12, 7, 7,
	7, 4, 5, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 5, 6, 5, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 3, 4, 2, 4, 2, 2, 2, 2,
	3, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -173, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -20, -21, -22, -19,
	-3, -4, 6, -26, 8, 9, 29, -15, 110, 111,
	113, 112, 143, 114, 136, 48, 156, 157, 159, 160,
	24, 137, 138, 141, 142, -175, 7, 220, 52, -174,
	234, -81, 14, -25, 5, -23, -178, -23, -23, -23,
	-23, -149, 52, 211, -105, 120, 68, 151, 118, 124,
	-108, 233, -107, 226, 156, 167, 161, 188, 180, 178,
	181, 207, 63, 159, 139, 176, 172, 170, 26, 193,
	231, 171, 130, 129, 208, 165, 166, 192, 31, 228,
	33, 147, 191, 187, 190, 164, 186, 37, 206, 183,
	173, 17, 142, 145, 125, 149, 230, 169, 146, 141,
	160, 209, 36, 197, 163, 128, 157, 153, 154, 135,
	184, 148, 174, 175, 189, 162, 185, 158, 150, 143,
	198, 232, 182, 179, 155, 152, 202, 203, 204, 205,
	229, 177, 199, -98, 120, 122, 118, 118, 211, 119,
	120, 118, -50, -114, 233, -107, 120, 151, 118, 103,
	181, 110, 200, 119, 31, 149, -123, 118, 201, 152,
	202, 203, 204, 205, 233, 209, 208, -114, 158, -119,
	-119, -119, -119, -119, -2, -85, 16, 15, -5, -3,
	-175, 6, 19, 20, -29, 38, 39, -24, -98, -38,
	-39, -40, -41, -52, -73, -175, -50, 10, -45, -50,
	-93, -122, -96, 209, 208, -109, -94, -108, -106, 207,
	181, 206, 115, 69, 21, 23, 195, 72, 103, 15,
	73, 105, 221, 110, 46, 212, 214, 210, 211, 200,
	28, 9, 24, 137, 20, 97, 112, 76, 77, 140,
	22, 138, 67, 18, 49, 10, 12, 13, 123, 122,
	88, 119, 44, 7, 106, 25, 85, 40, 27, 42,
	86, 16, 215, 216, 30, 225, 144, 99, 47, 34,
	70, 65, 50, 68, 14, 45, 87, 113, 220, 43,
	6, 224, 29, 136, 41, 118, 201, 75, 121, 66,
	5, 124, 8, 48, 51, 217, 218, 219, 32, 74,
	11, 86, -150, -146, -74, -108, -114, 233, -107, -101,
	123, 119, -50, 220, -108, -101, 118, -50, -50, -100,
	123, -100, 233, -100, -50, 107, -50, 233, 29, 211,
	233, 149, 118, 150, 120, -120, -175, -109, -120, -120,
	-120, 154, 155, -120, -120, 50, -120, -176, 54, -86,
	18, 30, -36, -55, 70, -60, 28, 22, -59, -56,
	-74, -72, -73, 103, 104, 93, 94, 101, 71, 106,
	-64, -62, -63, -65, 56, 55, 64, 57, 58, 59,
	60, 65, 66, 67, -108, -114, -70, -175, 42, 43,
	221, 222, 225, 223, 73, 32, 210, 219, 218, 217,
	215, 213, 216, 212, 214, 123, 211, 99, 220, -82,
	-83, -36, -81, -2, -23, 34, -27, 20, 62, -51,
	25, -50, 29, 53, -46, -48, -47, -49, 40, 44,
	46, 41, 42, 43, 47, -118, 21, -38, -2, -175,
	-117, 145, -116, 21, -114, 56, -50, -177, 53, 10,
	51, 53, -93, 78, -113, -108, 56, 28, 29, -50,
	54, 53, -125, -128, -130, -129, -126, -127, 178, 179,
	103, 182, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 29, 139, 174, 175, 176, 177, 161, 162,
	163, 164, 165, 166, 167, 227, 169, 170, 171, 172,
	173, 107, 233, 70, 233, -120, 120, -169, 51, -50,
	-50, -120, 121, -50, 22, 233, 50, -50, -115, -114,
	-106, -120, -120, -120, -120, -120, -120, -120, -120, -120,
	-120, -50, 8, 88, 69, 68, 85, 53, 17, -36,
	-57, 88, 70, 86, 87, 72, 90, 89, 100, 93,
	94, 57, 95, 96, 97, 98, 99, 91, 92, 105,
	78, 79, 80, 81, 82, 83, 84, -99, -175, -73,
	-175, 108, 109, -60, -60, -60, -60, -60, -60, -60,
	-175, 107, -68, -36, -175, -175, -175, -175, -175, -175,
	-175, -77, -36, -175, -179, -175, -179, -179, -179, -179,
	-179, -179, -179, -179, -175, -175, -175, -175, 53, -84,
	23, 24, -85, -176, -29, -61, -108, 57, 60, -28,
	41, -89, 145, -50, -92, -95, -74, -39, -40, -40,
	-39, -40, 40, 40, 40, 45, 40, 45, 40, -47,
	-114, -176, -176, -2, -53, 48, 122, 49, -175, -116,
	-89, -38, -50, -96, -36, -137, 105, 54, -155, -154,
	195, 153, 28, -136, -137, 63, -171, 207, 181, 105,
	78, 233, 56, 57, -153, -109, -146, -147, -156, -157,
	125, 124, -148, 129, 128, 127, 119, 27, -152, -138,
	198, -131, 52, -131, -131, -131, -131, -136, 207, 181,
	-136, -136, -136, 52, 52, -131, -131, -131, -140, 52,
	232, -140, -140, -141, 52, -141, -109, -115, -106, -155,
	22, -112, 51, -50, -167, 229, -168, 233, 86, -102,
	115, 116, 117, 112, 113, -155, -164, 111, 195, 181,
	63, 28, 14, 221, 145, 232, 105, 146, -50, -120,
	-50, -120, 36, -36, -36, -66, 65, 70, 66, 67,
	-36, -36, -60, -67, -70, -73, 61, 88, 86, 87,
	72, -60, -60, -60, -60, -60, -60, -60, -60, -60,
	-60, -60, -60, -60, -60, -60, -121, 233, 56, 233,
	-59, -59, -108, -34, 20, -33, -35, 95, -36, -114,
	-109, 53, -176, -33, -33, -36, -36, -33, -27, -75,
	-76, 74, -108, -176, -33, -34, -33, -33, -83, -86,
	-97, 18, 10, 32, 32, -33, -58, 29, 32, -2,
	-175, -175, -54, 53, 11, 78, -43, -42, 50, 51,
	-44, 50, -42, 40, 40, -176, 119, 119, 119, -90,
	-108, -54, -54, 233, 78, 56, 103, -154, 53, 57,
	78, -171, -136, -137, -171, -171, 233, 78, 56, 29,
	233, 56, 57, 52, -112, 52, 27, -148, 233, 233,
	-148, -148, 233, -151, -142, -132, -134, -143, -144, -133,
	-136, -137, 65, 70, 28, 50, 195, 125, 27, 124,
	63, -139, 199, 57, -136, -136, -137, -137, -137, -137,
	-145, 56, -145, 57, -140, 57, 107, 50, -108, -120,
	-166, -165, -109, -50, -119, 124, -170, 151, 126, 127,
	130, 129, 233, 119, 27, 125, 128, 145, -170, 124,
	-170, -170, 151, -103, -104, 121, 21, 119, 27, 145,
	-120, 37, 65, 66, 67, -67, -60, -60, -60, -32,
	140, 69, -176, -176, -33, 53, -111, -110, 21, -108,
	56, 107, -175, -36, -176, -176, 53, 51, 21, -176,
	-33, -78, -76, 76, -36, -176, -176, -176, -176, -176,
	-50, -37, 10, -91, 50, -92, -69, -71, -70, -175,
	-2, -87, -108, -90, -81, -95, -36, -36, -36, 52,
	-36, -175, -175, -175, -176, 53, -81, 233, -154, 57,
	233, 56, 233, 78, 56, 103, -161, -160, -108, 52,
	-161, 233, 233, 233, 233, 125, 124, 130, 65, 56,
	57, 58, 65, -135, 213, 64, 210, 8, 27, 27,
	56, 54, -137, -137, 54, 53, 54, 53, 54, 53,
	-109, -50, 53, 78, -170, -119, -108, -119, -119, -119,
	-108, -50, -119, -108, -32, 69, -60, -60, -176, -35,
	-110, 95, -115, -34, -124, 103, 178, 139, 176, 172,
	192, 183, 197, 174, 198, -121, -124, 226, -81, 77,
	-36, 75, -54, -38, 26, -91, 53, -176, -176, -176,
	53, 107, -176, -85, -88, -108, -88, -88, -88, -117,
	-108, -85, 233, 56, 54, 53, -131, 23, 24, -161,
	54, 27, -148, 27, 52, 52, -135, -136, 56, -136,
	57, 57, -120, -165, -153, 56, 57, -119, 52, 25,
	-60, 107, -176, -176, -131, -131, -131, -141, -131, 166,
	-131, 166, -176, -176, -175, -31, 224, -36, -79, 12,
	27, -71, 32, -2, -175, -108, -108, 53, 54, -176,
	-176, -176, -53, -133, -112, -160, 54, 131, 54, 57,
	54, -137, -137, 54, 54, -88, -175, 95, -136, 233,
	-60, -176, 56, -80, 13, 15, 8, -69, -2, 107,
	-108, -133, -50, 54, 54, -162, -163, 145, -30, 88,
	229, -36, -68, -92, -176, -108, 52, -169, -176, 53,
	-108, -176, 227, 47, 230, -161, -167, -163, 32, 37,
	228, 231, 54, 147, 37, -158, -159, 50, 148, 229,
	-159, 9, 8, -175, 230, -172, 133, 132, 29, 134,
	-172, -60, 144, 231, 65, 28, 135, -176, -176,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	522, 0, 295, 295, 295, 295, 295, 0, 591, 574,
	0, 0, 0, 0, 281, 285, 286, 0, 288, 289,
	776, 776, 776, 776, 776, 0, 31, 32, 774, 1,
	3, 530, 0, 0, 299, 302, 297, 574, 0, 0,
	0, 46, 0, 572, 0, 764, 0, 765, 572, 592,
	593, 595, 596, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 766, 767, 768, 769, 770,
	771, 772, 773, 0, 0, 575, 0, 570, 570, 0,
	570, 0, 256, 366, 599, 600, 764, 765, 0, 0,
	0, 0, 777, 777, 777, 777, 0, 777, 777, 274,
	276, 277, 278, 279, 777, 282, 283, 284, 287, 290,
	291, 292, 293, 294, 25, 534, 0, 0, 522, 27,
	0, 295, 300, 301, 305, 303, 304, 296, 0, 0,
	324, 326, 327, 328, 347, 0, 349, 0, 0, 38,
	42, 0, 558, -2, -2, 0, 0, 597, 598, -2,
	699, -2, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 0, 0, 64, 0, 504, 0, -2, -2, 0,
	0, 0, 777, 0, 53, 0, 0, 777, 0, 0,
	0, 0, 0, 0, 255, 0, 257, 777, 777, 777,
	777, 777, 777, 777, 777, 266, 778, 779, 267, 268,
	269, 777, 777, 271, 272, 0, 280, 26, 775, 21,
	0, 0, 531, 374, 0, 379, 381, 0, 416, 417,
	418, 419, 420, 0, 0, 0, 0, 0, 0, 0,
	444, 445, 446, 447, 507, 508, 509, 510, 511, 512,
	513, 514, 383, 384, 504, 0, 554, 0, 0, 0,
	0, 0, 0, 0, 495, 0, 469, 469, 469, 469,
	469, 469, 469, 469, 469, 0, 0, 0, 0, 523,
	524, 527, 530, 25, 302, 0, 307, 306, 298, 40,
	0, 365, 0, 0, 0, 0, 0, 0, 354, 0,
	0, 357, 0, 0, 0, 0, 348, 0, 25, 0,
	368, 732, 350, 0, 352, 353, 40, 0, 0, 36,
	37, 0, 43, 0, 0, 565, 566, 567, 563, 0,
	197, 0, 68, 126, 79, 80, 119, 82, 119, 119,
	119, 119, 0, 0, 0, 0, 110, 111, 112, 113,
	114, 0, 0, 97, 119, 119, 119, 101, 83, 84,
	85, 86, 87, 88, 89, 90, 121, 121, 121, 123,
	123, 0, 197, 0, 0, 50, 0, 56, 0, 61,
	197, 231, 0, 251, 571, 777, 0, 777, 367, 601,
	602, 258, 259, 260, 261, 262, 263, 264, 265, 270,
	273, 275, 535, 0, 0, 0, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 0,
	401, 402, 403, 404, 405, 406, 407, 380, 0, 394,
	0, 0, 0, 437, 438, 439, 440, 441, 442, 0,
	309, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	305, 0, 496, 0, 460, 0, 461, 462, 463, 464,
	465, 466, 467, 468, 0, 309, 0, 0, 0, 526,
	528, 529, 534, 28, 305, 0, 515, 0, 0, 0,
	308, 0, 0, 364, 372, 555, 0, 325, 343, 345,
	0, 340, 355, 356, 358, 0, 360, 0, 362, 363,
	329, 330, 413, 25, 331, 0, 0, 0, 0, 351,
	372, 372, 39, 559, 560, 561, 0, 47, 63, 198,
	607, 746, 621, 205, 206, 701, 209, 700, 699, 612,
	0, 214, 215, 216, 217, 218, 65, 66, 0, 0,
	733, 0, 0, 712, 744, 0, 190, 191, 67, 128,
	127, 81, 0, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 100, 91, 0,
	121, 93, 94, 95, 0, 96, 505, 0, -2, 48,
	573, 0, 0, 777, 52, 0, 54, 55, 0, 776,
	603, 0, 0, 627, -2, 232, 233, 576, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 737, 250, 252,
	777, 254, 0, 375, 376, 378, 395, 0, 397, 399,
	532, 533, 385, 386, 410, 411, 412, 0, 0, 0,
	0, 408, 390, 0, 421, 422, 423, 424, 425, 427,
	428, 429, 430, 431, 432, 433, 436, 480, 481, 0,
	434, 435, 443, 0, 0, 310, 311, 313, 317, 0,
	505, 0, 553, 0, 0, 0, 0, 0, 0, 502,
	499, 0, 0, 470, 0, 0, 0, 0, 525, 22,
	0, 568, 569, 516, 517, 322, 547, 0, 0, -2,
	0, 0, 522, 0, 0, 0, 337, 344, 0, 0,
	338, 0, 339, 359, 361, -2, 0, 0, 0, 0,
	335, 522, 35, 154, 0, 156, 157, 199, 0, 201,
	0, 203, 204, 207, 208, 210, 145, 0, 147, 0,
	211, 212, 213, 0, 0, 0, 183, 0, 186, 187,
	0, 0, 0, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 130, 0, 0, 0, 144, 0, 159, 161,
	0, 78, 129, 0, 0, 0, 106, 107, 108, 109,
	0, 117, 0, 0, 92, 0, 0, 0, 594, 51,
	57, 58, 0, 62, 221, 244, 776, 0, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 776, 244,
	776, 776, 0, 0, 776, 587, 588, 589, 590, 0,
	253, 536, 396, 398, 400, 387, 408, 391, 0, 388,
	0, 0, 382, 448, 0, 0, 314, 318, 0, 320,
	321, 0, 309, 415, 451, 452, 0, 0, 0, 0,
	522, 0, 500, 0, 0, 459, 471, 472, 473, 474,
	23, 372, 0, 29, 0, 547, 537, 549, 551, 0,
	25, 0, 543, 0, 530, 556, 373, 557, 341, 0,
	346, 0, 0, 0, 349, 0, 530, 155, 200, 202,
	146, 148, 149, 0, 151, 153, 0, 192, 119, 0,
	0, 184, 185, 188, 189, 0, 171, 0, 131, 132,
	133, 134, 135, 136, 137, 139, 140, 0, 158, 160,
	162, 120, 102, 103, 0, 0, 0, 0, 124, 0,
	506, 777, 0, 0, 776, 223, 0, 224, 225, 226,
	228, 229, 230, 0, 389, 0, 409, 392, 449, 312,
	319, 315, 0, 0, 0, 119, 119, 485, 119, 123,
	488, 119, 490, 119, 493, 0, 0, 0, 497, 458,
	503, 0, 518, 323, 0, 30, 0, 552, -2, 0,
	0, 0, 41, 33, 0, 333, 0, 0, 0, 368,
	336, 34, 150, 152, 167, 0, 194, 195, 196, 0,
	168, 170, 172, 173, 0, 0, 143, 0, 118, 0,
	0, 0, 49, 59, 60, 219, 220, 222, 0, 0,
	393, 0, 450, 453, 482, 0, 486, 487, 489, 491,
	492, 494, 455, 454, 0, 0, 0, 501, 520, 0,
	0, 550, 0, -2, 0, 545, 544, 0, 342, 369,
	370, 371, 332, 163, 165, 193, 166, 0, 138, 0,
	142, 115, 116, 122, 125, 0, 0, 316, 483, 484,
	475, 457, 498, 24, 0, 0, 0, 540, 25, 0,
	334, 164, 0, 141, 53, 0, 246, 0, 0, 0,
	0, 521, 519, 548, -2, 546, 0, 56, 245, 0,
	0, 456, 0, 0, 0, 0, 227, 247, 0, 476,
	0, 479, 0, 0, 477, 169, 174, 0, 0, 0,
	175, 0, 0, 0, 0, 176, 178, 179, 0, 0,
	177, 0, 0, 478, 180, 182, 181, 248, 249,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	52, 54, 95, 93, 53, 94, 107, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 234,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 106, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:302
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:307
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:308
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:312
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:334
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:342
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:346
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:354
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:360
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:364
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:374
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:381
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:393
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:421
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:425
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:439
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:444
		{
			yyVAL.partitions = nil
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:448
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.str = SessionStr
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
			yyVAL.str = GlobalStr
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:474
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = yyDollar[1].ddl
			yyDollar[1].ddl.Table = yyDollar[4].tableName
			yyDollar[1].ddl.LikeTable = yyDollar[4].tableName
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &DDL{Action: CreateDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}, TableSpec: &TableSpec{Option: yyDollar[5].TableOption}}
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:489
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:511
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:521
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:526
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:542
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:554
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:559
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName, Table: yyDollar[6].tableName, LikeTable: yyDollar[6].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Option = yyDollar[4].TableOption
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:578
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:588
		{

			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colName.Name, Type: yyDollar[2].columnType, options: yyDollar[3].columnOptions}
			yyVAL.columnDefinition.mergeOptions()
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:595
		{
			yyVAL.columnOptions = []columnOption{}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:599
		{
			yyVAL.columnOptions = append(yyDollar[1].columnOptions, yyDollar[2].columnOption)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:605
		{
			yyVAL.columnOption = columnOption{key: "null_opt", value: yyDollar[1].boolVal}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:609
		{
			yyVAL.columnOption = columnOption{key: "column_default_opt", value: yyDollar[1].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:613
		{
			yyVAL.columnOption = columnOption{key: "on_update_opt", value: yyDollar[1].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.columnOption = columnOption{key: "auto_increment_opt", value: yyDollar[1].boolVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:621
		{
			yyVAL.columnOption = columnOption{key: "column_key_opt", value: yyDollar[1].colKeyOpt}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:625
		{
			yyVAL.columnOption = columnOption{key: "column_comment_opt", value: yyDollar[1].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.columnOption = columnOption{key: "charset_opt", value: yyDollar[1].str}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.columnOption = columnOption{key: "collate_opt", value: yyDollar[1].str}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:657
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:830
		{
			yyVAL.optVal = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:834
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:839
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:843
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:851
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:861
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:869
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:878
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:899
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:907
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:923
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:927
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:937
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:941
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:949
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:965
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:973
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:977
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:981
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:989
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:993
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:999
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1011
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.colKeyOpt = colKey
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1029
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1041
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1045
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1049
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1053
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[4].indexColumns, Using: yyDollar[2].colIdent}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1057
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1061
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 169:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1065
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
			yyVAL.indexDefinition.ReferencesTable = yyDollar[6].tableName
			yyVAL.indexDefinition.ReferencesColumns = yyDollar[8].indexColumns
			yyVAL.indexDefinition.ReferencesOption = yyDollar[10].ForeignOption

		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1076
		{
			yyVAL.indexInfo = &IndexInfo{Type: "PRIMARY", Name: NewColIdent(string(yyDollar[2].bytes)), Primary: true}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.indexInfo = &IndexInfo{Type: "UNIQUE", Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexInfo = &IndexInfo{Type: "UNIQUE", Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexInfo = &IndexInfo{Type: "FOREIGN", Name: NewColIdent(string(yyDollar[2].bytes)), Foreign: true}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.ForeignOption = yyDollar[1].ForeignOption
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.ForeignOption = yyDollar[1].ForeignOption.Merge(yyDollar[2].ForeignOption)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.ForeignOption = ForeignOption{OnUpdate: yyDollar[3].bytes}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			yyVAL.ForeignOption = ForeignOption{OnDelete: yyDollar[3].bytes}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.bytes = append(append(yyDollar[1].bytes, ' '), yyDollar[2].bytes...)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1168
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1179
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1195
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1208
		{
			yyVAL.TableOption = TableOption{}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.TableOption = yyDollar[1].TableOption
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1216
		{
			yyVAL.TableOption = yyDollar[1].TableOption.Merge(yyDollar[2].TableOption)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.TableOption = yyDollar[1].TableOption.Merge(yyDollar[3].TableOption)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.TableOption = TableOption{AutoIncrement: IntegerPtr(yyDollar[2].bytes)}

		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1234
		{
			yyVAL.TableOption = TableOption{AutoIncrement: IntegerPtr(yyDollar[3].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.TableOption = TableOption{Engine: yyDollar[2].bytes}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1242
		{
			yyVAL.TableOption = TableOption{Charset: []byte(yyDollar[2].str)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.TableOption = TableOption{Charset: []byte(yyDollar[1].str)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1250
		{
			yyVAL.TableOption = TableOption{Collate: []byte(yyDollar[1].str)}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1254
		{
			yyVAL.TableOption = TableOption{Collate: []byte(yyDollar[2].str)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			yyVAL.TableOption = TableOption{Comment: yyDollar[2].bytes}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.TableOption = TableOption{Common: yyDollar[1].bytes}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1266
		{
			yyVAL.TableOption = TableOption{Common: append(append(yyDollar[1].bytes, '='), yyDollar[2].bytes...)}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1272
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1276
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1280
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1307
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1311
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Unique: true, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1364
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1369
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, Option: yyDollar[5].TableOption}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1401
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1407
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1411
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1417
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 249:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1421
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1433
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &DDL{Action: DropDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1445
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1450
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropViewStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1488
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1492
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1496
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1500
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1504
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1508
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1576
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = SessionStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = GlobalStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Begin{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Begin{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Commit{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Rollback{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1630
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1643
		{
			setAllowComments(yylex, true)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1647
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1653
		{
			yyVAL.bytes2 = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1657
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.str = UnionStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.str = UnionAllStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = UnionDistinctStr
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1676
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.str = SQLCacheStr
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = DistinctStr
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1698
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.str = StraightJoinHint
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1707
		{
			yyVAL.selectExprs = nil
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1721
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1731
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1735
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1739
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1744
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1748
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1752
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1764
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1768
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1774
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1778
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1788
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1792
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1802
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 332:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1806
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1816
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1826
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1839
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1843
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1847
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1859
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1863
		{
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1869
		{
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1871
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1874
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.empty = struct{}{}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1879
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1894
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1900
		{
			yyVAL.str = JoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1904
		{
			yyVAL.str = JoinStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1908
		{
			yyVAL.str = JoinStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.str = StraightJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.str = LeftJoinStr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1924
		{
			yyVAL.str = LeftJoinStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1928
		{
			yyVAL.str = RightJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.str = RightJoinStr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1938
		{
			yyVAL.str = NaturalJoinStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1942
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1952
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1971
		{
			yyVAL.indexHints = nil
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1975
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1979
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1983
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.expr = nil
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1998
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2002
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2006
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2010
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2014
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2022
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2048
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2056
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2060
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2064
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2068
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2072
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2076
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2080
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = IsNullStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = IsNotNullStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = IsTrueStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = IsNotTrueStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = IsFalseStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = IsNotFalseStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = EqualStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = LessThanStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = GreaterThanStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = LessEqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = GreaterEqualStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = NotEqualStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2159
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2175
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: NewIntVal(yyDollar[2].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2229
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2237
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2241
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2257
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2261
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2273
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2277
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2285
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 456:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 457:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("now")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2453
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.str = BooleanModeStr
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2461
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 478:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = QueryExpansionStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2475
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2479
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2519
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = nil
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2549
		{
			yyVAL.str = string("")
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2569
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = nil
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2584
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2592
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &NullVal{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2632
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2650
		{
			yyVAL.exprs = nil
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2654
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = nil
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2668
		{
			yyVAL.orderBy = nil
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2693
		{
			yyVAL.str = AscScr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.str = AscScr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.str = DescScr
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2706
		{
			yyVAL.limit = nil
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2714
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2718
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2723
		{
			yyVAL.str = ""
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2727
		{
			yyVAL.str = ForUpdateStr
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.str = ShareModeStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2744
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2757
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2761
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2765
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2772
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2776
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2784
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2789
		{
			yyVAL.updateExprs = nil
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2793
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2803
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2819
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2825
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2839
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.bytes = []byte("charset")
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &Default{}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2896
		{
			yyVAL.byt = 0
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.byt = 1
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = ""
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.str = IgnoreStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2928
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2946
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2954
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2962
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2969
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2979
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2985
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			decNesting(yylex)
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3200
		{
			forceEOF(yylex)
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3205
		{
			forceEOF(yylex)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			forceEOF(yylex)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
