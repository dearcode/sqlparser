// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:54
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnOption      columnOption
	columnOptions     []columnOption
	TableOption       TableOption
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const BIT_LITERAL = 57403
const NULL = 57404
const TRUE = 57405
const FALSE = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const BINARY = 57429
const UNDERSCORE_BINARY = 57430
const COLLATE = 57431
const INTERVAL = 57432
const JSON_EXTRACT_OP = 57433
const JSON_UNQUOTE_EXTRACT_OP = 57434
const CREATE = 57435
const ALTER = 57436
const DROP = 57437
const RENAME = 57438
const ANALYZE = 57439
const ADD = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const COLUMN = 57449
const CONSTRAINT = 57450
const SPATIAL = 57451
const FULLTEXT = 57452
const FOREIGN = 57453
const SHOW = 57454
const DESCRIBE = 57455
const EXPLAIN = 57456
const DATE = 57457
const ESCAPE = 57458
const REPAIR = 57459
const OPTIMIZE = 57460
const TRUNCATE = 57461
const MAXVALUE = 57462
const PARTITION = 57463
const REORGANIZE = 57464
const LESS = 57465
const THAN = 57466
const PROCEDURE = 57467
const TRIGGER = 57468
const VINDEX = 57469
const VINDEXES = 57470
const ENGINE = 57471
const STATUS = 57472
const VARIABLES = 57473
const BEGIN = 57474
const START = 57475
const TRANSACTION = 57476
const COMMIT = 57477
const ROLLBACK = 57478
const BIT = 57479
const TINYINT = 57480
const SMALLINT = 57481
const MEDIUMINT = 57482
const INT = 57483
const INTEGER = 57484
const BIGINT = 57485
const INTNUM = 57486
const REAL = 57487
const DOUBLE = 57488
const FLOAT_TYPE = 57489
const DECIMAL = 57490
const NUMERIC = 57491
const TIME = 57492
const TIMESTAMP = 57493
const DATETIME = 57494
const YEAR = 57495
const CHAR = 57496
const VARCHAR = 57497
const BOOL = 57498
const CHARACTER = 57499
const VARBINARY = 57500
const NCHAR = 57501
const TEXT = 57502
const TINYTEXT = 57503
const MEDIUMTEXT = 57504
const LONGTEXT = 57505
const BLOB = 57506
const TINYBLOB = 57507
const MEDIUMBLOB = 57508
const LONGBLOB = 57509
const JSON = 57510
const ENUM = 57511
const NULLX = 57512
const AUTO_INCREMENT = 57513
const APPROXNUM = 57514
const SIGNED = 57515
const UNSIGNED = 57516
const ZEROFILL = 57517
const DATABASES = 57518
const TABLES = 57519
const VITESS_KEYSPACES = 57520
const VITESS_SHARDS = 57521
const VITESS_TABLETS = 57522
const VSCHEMA_TABLES = 57523
const NAMES = 57524
const CHARSET = 57525
const GLOBAL = 57526
const SESSION = 57527
const CURRENT_TIMESTAMP = 57528
const DATABASE = 57529
const CURRENT_DATE = 57530
const NOW = 57531
const CURRENT_TIME = 57532
const LOCALTIME = 57533
const LOCALTIMESTAMP = 57534
const UTC_DATE = 57535
const UTC_TIME = 57536
const UTC_TIMESTAMP = 57537
const REPLACE = 57538
const CONVERT = 57539
const CAST = 57540
const GROUP_CONCAT = 57541
const SEPARATOR = 57542
const MATCH = 57543
const AGAINST = 57544
const BOOLEAN = 57545
const LANGUAGE = 57546
const WITH = 57547
const QUERY = 57548
const EXPANSION = 57549
const UNUSED = 57550
const ID = 57551

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"BINARY",
	"UNDERSCORE_BINARY",
	"COLLATE",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"ENGINE",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"NOW",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ID",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 222,
	78, 726,
	-2, 44,
	-1, 223,
	78, 699,
	-2, 45,
	-1, 228,
	78, 686,
	-2, 547,
	-1, 230,
	78, 713,
	-2, 549,
	-1, 326,
	107, 585,
	-2, 581,
	-1, 327,
	107, 586,
	-2, 582,
	-1, 734,
	107, 588,
	-2, 584,
	-1, 842,
	5, 25,
	-2, 523,
	-1, 858,
	5, 26,
	-2, 400,
	-1, 1107,
	5, 26,
	-2, 524,
	-1, 1169,
	5, 25,
	-2, 526,
	-1, 1218,
	5, 26,
	-2, 527,
}

const yyPrivate = 57344

const yyLast = 10177

var yyAct = [...]int{

	327, 1210, 740, 599, 525, 640, 898, 456, 3, 379,
	1002, 1003, 660, 729, 1029, 690, 737, 930, 1045, 405,
	194, 458, 999, 1083, 455, 1028, 806, 51, 799, 72,
	1113, 698, 845, 164, 973, 227, 164, 733, 965, 641,
	776, 675, 823, 862, 724, 811, 366, 919, 368, 679,
	434, 850, 377, 193, 809, 934, 680, 674, 322, 164,
	164, 72, 637, 221, 707, 444, 164, 203, 72, 356,
	210, 50, 323, 1026, 682, 460, 428, 209, 867, 1036,
	1035, 1034, 1033, 208, 715, 891, 703, 888, 802, 743,
	188, 351, 942, 353, 1213, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 533, 522, 520,
	714, 576, 801, 878, 881, 725, 867, 350, 352, 346,
	1027, 374, 341, 1242, 500, 868, 1233, 1239, 1227, 1237,
	224, 741, 189, 190, 191, 192, 1194, 1232, 1226, 219,
	1096, 1162, 332, 156, 158, 159, 1048, 911, 706, 672,
	1157, 1155, 187, 1236, 164, 715, 164, 1041, 1042, 1043,
	338, 164, 339, 611, 1234, 1047, 1044, 1211, 164, 955,
	55, 638, 72, 72, 72, 72, 702, 72, 72, 348,
	530, 714, 941, 329, 72, 524, 381, 946, 943, 936,
	937, 944, 939, 938, 57, 58, 59, 60, 488, 942,
	154, 349, 861, 945, 1038, 1037, 860, 431, 164, 948,
	1039, 360, 361, 703, 859, 164, 164, 164, 715, 335,
	153, 72, 154, 330, 167, 430, 72, 501, 1214, 661,
	663, 157, 952, 155, 588, 589, 1204, 1147, 954, 1110,
	977, 371, 429, 1025, 714, 213, 925, 598, 866, 506,
	507, 508, 509, 510, 511, 512, 519, 514, 515, 516,
	517, 518, 502, 503, 504, 505, 486, 487, 344, 672,
	489, 576, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 800, 877, 880, 887, 866, 744, 726, 941,
	224, 940, 808, 551, 946, 943, 936, 937, 944, 939,
	938, 662, 1084, 702, 1048, 554, 871, 1046, 566, 783,
	945, 1225, 1065, 576, 848, 513, 935, 552, 340, 471,
	342, 164, 1098, 781, 782, 780, 824, 872, 953, 521,
	951, 1086, 72, 554, 1040, 164, 164, 72, 909, 164,
	983, 436, 982, 164, 824, 164, 989, 72, 72, 72,
	72, 72, 72, 72, 72, 738, 328, 553, 552, 1138,
	470, 72, 72, 1137, 1088, 164, 1092, 909, 1087, 48,
	1085, 432, 406, 45, 554, 1090, 626, 627, 779, 1024,
	538, 556, 536, 152, 1089, 1185, 553, 552, 1184, 1091,
	1093, 924, 569, 570, 571, 572, 573, 566, 940, 922,
	912, 213, 576, 554, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 1197, 555, 45, 557,
	576, 553, 552, 553, 552, 334, 199, 984, 1135, 1052,
	1100, 214, 553, 552, 72, 958, 959, 960, 554, 164,
	554, 207, 164, 164, 164, 164, 164, 920, 966, 554,
	642, 628, 600, 367, 164, 769, 771, 772, 164, 609,
	770, 1207, 164, 1222, 367, 659, 164, 164, 1173, 1208,
	72, 1122, 1182, 1189, 553, 552, 1173, 367, 629, 72,
	567, 568, 569, 570, 571, 572, 573, 566, 1188, 323,
	667, 554, 576, 1173, 1174, 1122, 1127, 1122, 1121, 1183,
	630, 1053, 657, 658, 590, 591, 592, 593, 594, 595,
	596, 1021, 367, 644, 645, 673, 647, 670, 655, 643,
	52, 72, 646, 1109, 367, 164, 846, 666, 814, 671,
	1105, 164, 731, 669, 72, 164, 72, 665, 692, 224,
	713, 716, 717, 718, 355, 355, 355, 355, 691, 355,
	355, 709, 710, 711, 712, 734, 355, 971, 367, 971,
	727, 728, 22, 586, 1061, 1060, 441, 721, 722, 723,
	1057, 1058, 45, 1057, 1056, 1124, 1125, 22, 735, 777,
	613, 614, 615, 616, 617, 618, 619, 457, 1168, 732,
	691, 814, 367, 441, 367, 479, 478, 72, 766, 767,
	840, 773, 774, 841, 708, 48, 998, 1000, 48, 659,
	846, 72, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 48, 847, 22, 467, 576, 213, 213,
	213, 213, 213, 440, 734, 1064, 1059, 847, 971, 738,
	882, 803, 804, 469, 213, 842, 815, 600, 828, 971,
	818, 819, 213, 20, 624, 708, 200, 441, 821, 826,
	730, 1144, 1132, 1131, 1031, 72, 441, 468, 813, 466,
	429, 48, 1015, 725, 884, 72, 720, 832, 72, 846,
	775, 719, 72, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 855, 864,
	865, 831, 48, 62, 355, 526, 858, 198, 738, 355,
	1000, 883, 851, 852, 926, 854, 869, 534, 364, 355,
	355, 355, 355, 355, 355, 355, 355, 636, 874, 886,
	857, 889, 890, 355, 355, 875, 72, 856, 652, 72,
	72, 649, 72, 653, 691, 164, 778, 691, 585, 587,
	650, 691, 873, 648, 899, 651, 876, 204, 205, 913,
	914, 900, 1235, 654, 72, 450, 451, 1231, 921, 957,
	915, 923, 765, 916, 917, 918, 597, 869, 1230, 601,
	602, 603, 604, 605, 606, 607, 837, 610, 612, 612,
	612, 612, 612, 612, 612, 612, 620, 621, 622, 623,
	777, 836, 879, 947, 476, 691, 435, 347, 1166, 1145,
	1130, 931, 72, 1103, 214, 214, 214, 214, 214, 403,
	433, 961, 446, 449, 450, 451, 447, 369, 448, 452,
	457, 1128, 664, 1051, 164, 1050, 933, 885, 214, 370,
	736, 532, 454, 435, 72, 72, 1001, 195, 70, 968,
	642, 1006, 1200, 969, 201, 202, 642, 196, 835, 52,
	979, 1004, 1199, 980, 981, 988, 834, 985, 1165, 847,
	990, 72, 991, 1010, 992, 993, 994, 995, 1201, 1049,
	226, 550, 324, 72, 54, 72, 1011, 333, 1009, 56,
	465, 49, 1022, 1012, 1013, 816, 817, 1014, 1, 820,
	1016, 742, 929, 962, 963, 964, 355, 749, 355, 1020,
	1032, 1209, 1023, 827, 695, 829, 830, 694, 704, 892,
	394, 393, 396, 397, 398, 399, 72, 164, 838, 395,
	400, 446, 449, 450, 451, 447, 72, 448, 452, 321,
	691, 851, 852, 61, 693, 897, 896, 893, 910, 72,
	164, 705, 895, 894, 482, 483, 72, 481, 485, 484,
	45, 480, 175, 220, 453, 472, 972, 778, 64, 950,
	1054, 1055, 949, 745, 601, 72, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 584, 833, 225, 1007,
	576, 226, 226, 226, 226, 1062, 226, 226, 625, 164,
	427, 1073, 1198, 226, 1164, 1082, 987, 608, 1095, 1079,
	843, 844, 1094, 734, 1097, 1081, 72, 1077, 72, 72,
	72, 164, 72, 1102, 1104, 1066, 1078, 822, 380, 768,
	1101, 1112, 72, 392, 389, 1099, 391, 390, 1068, 631,
	226, 1071, 1118, 1120, 839, 473, 558, 813, 1115, 1116,
	1117, 600, 1106, 1107, 1108, 378, 1111, 1126, 372, 212,
	437, 445, 443, 442, 72, 72, 72, 217, 1133, 853,
	1129, 849, 211, 997, 1161, 1212, 635, 23, 53, 206,
	18, 1141, 1140, 17, 16, 19, 15, 14, 1075, 1076,
	13, 27, 12, 11, 10, 1123, 9, 8, 7, 6,
	970, 5, 1153, 4, 197, 21, 1134, 2, 1136, 0,
	72, 72, 355, 0, 986, 0, 1169, 1167, 0, 0,
	0, 0, 0, 72, 0, 1004, 0, 0, 1179, 1148,
	1149, 1178, 0, 0, 931, 691, 355, 1181, 1180, 0,
	0, 1158, 1159, 0, 0, 72, 1163, 0, 72, 1150,
	1151, 226, 1152, 0, 0, 1154, 226, 1156, 0, 907,
	903, 0, 1175, 1176, 1177, 0, 226, 226, 226, 226,
	226, 226, 226, 226, 72, 1190, 755, 0, 1203, 1202,
	226, 226, 904, 0, 354, 213, 978, 1206, 1004, 0,
	754, 1186, 0, 1187, 0, 909, 1146, 901, 0, 0,
	0, 1193, 902, 0, 1216, 72, 0, 1217, 1196, 0,
	0, 642, 72, 1220, 1005, 0, 45, 1062, 0, 0,
	0, 0, 0, 1228, 1229, 753, 0, 0, 0, 0,
	0, 0, 1017, 1018, 1019, 0, 215, 672, 0, 0,
	0, 0, 0, 0, 0, 1215, 600, 0, 0, 0,
	1218, 0, 0, 632, 908, 906, 1221, 0, 0, 1224,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 404, 0, 750, 747, 748, 0, 746, 0, 0,
	0, 0, 1195, 0, 0, 0, 0, 1243, 1244, 226,
	0, 0, 0, 0, 173, 0, 218, 0, 226, 324,
	757, 760, 331, 0, 162, 0, 715, 186, 565, 564,
	574, 575, 567, 568, 569, 570, 571, 572, 573, 566,
	905, 0, 0, 0, 576, 0, 0, 0, 0, 0,
	162, 162, 714, 0, 325, 0, 752, 162, 0, 226,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 226, 0, 226, 0, 357, 358, 359,
	1240, 362, 363, 0, 0, 0, 168, 0, 365, 0,
	0, 214, 0, 170, 0, 0, 756, 0, 0, 176,
	172, 0, 0, 0, 0, 0, 0, 758, 759, 0,
	336, 0, 337, 0, 0, 0, 0, 343, 0, 0,
	0, 0, 0, 0, 345, 174, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 226, 0,
	0, 0, 0, 0, 0, 162, 0, 162, 0, 0,
	825, 0, 162, 0, 0, 0, 355, 169, 0, 162,
	0, 0, 0, 0, 439, 0, 0, 0, 0, 0,
	0, 0, 0, 464, 0, 0, 171, 177, 179, 180,
	181, 182, 0, 0, 185, 184, 0, 0, 367, 1160,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 162,
	0, 1170, 0, 0, 863, 0, 162, 462, 162, 183,
	0, 0, 0, 0, 226, 0, 0, 226, 0, 0,
	0, 226, 0, 565, 564, 574, 575, 567, 568, 569,
	570, 571, 572, 573, 566, 0, 523, 0, 1191, 576,
	0, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 541, 542, 543, 544, 545, 546, 0,
	0, 1005, 0, 45, 0, 547, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 0, 477, 927, 226,
	0, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 0, 0, 531, 0, 0, 0, 535,
	0, 0, 0, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 1074, 0, 0,
	0, 549, 0, 0, 0, 0, 162, 162, 0, 1238,
	162, 0, 0, 0, 162, 0, 537, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 0,
	0, 975, 0, 576, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	324, 0, 0, 1008, 863, 0, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 639, 565, 564, 574, 575,
	567, 568, 569, 570, 571, 572, 573, 566, 0, 0,
	226, 0, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 668, 1030, 0, 0, 0, 0, 0,
	162, 0, 325, 162, 162, 162, 162, 162, 762, 0,
	764, 0, 0, 0, 0, 656, 0, 0, 0, 162,
	0, 0, 0, 462, 0, 0, 0, 162, 162, 0,
	0, 0, 0, 0, 0, 226, 0, 0, 0, 0,
	0, 325, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 761, 1069, 0,
	0, 763, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 0, 0, 975, 0, 162, 226, 0, 0,
	0, 0, 162, 0, 0, 0, 162, 0, 22, 46,
	24, 25, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 26, 0, 0, 0, 1114, 0, 1114, 1114, 1114,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 1030, 0, 0, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	537, 0, 0, 0, 812, 812, 0, 0, 812, 0,
	0, 0, 0, 226, 226, 226, 0, 0, 0, 0,
	0, 0, 812, 812, 812, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 28, 29, 31, 30, 33, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 1171,
	1172, 34, 41, 42, 0, 0, 43, 44, 32, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 956, 0,
	0, 36, 37, 0, 38, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 560, 0,
	563, 932, 0, 0, 0, 0, 577, 578, 579, 580,
	581, 582, 583, 1205, 561, 562, 559, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 0,
	0, 0, 0, 576, 0, 47, 162, 0, 0, 0,
	0, 324, 0, 0, 1219, 0, 0, 0, 0, 0,
	0, 1223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 0, 0, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 0, 0, 0, 1139, 537,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 309, 299, 272,
	311, 250, 264, 319, 265, 266, 293, 238, 280, 111,
	262, 0, 253, 233, 259, 234, 251, 274, 88, 277,
	678, 301, 283, 98, 317, 100, 288, 0, 122, 107,
	0, 0, 276, 303, 278, 298, 271, 294, 243, 287,
	312, 263, 291, 313, 0, 870, 0, 0, 688, 689,
	0, 0, 0, 0, 0, 681, 0, 290, 308, 261,
	292, 232, 289, 0, 236, 239, 318, 306, 256, 257,
	686, 0, 0, 0, 0, 0, 0, 275, 279, 295,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 286, 0, 0, 0, 237, 0, 685, 273, 0,
	0, 0, 242, 0, 255, 296, 0, 231, 304, 270,
	165, 307, 268, 267, 310, 114, 0, 0, 125, 93,
	92, 302, 252, 260, 84, 258, 119, 112, 138, 285,
	113, 118, 101, 130, 115, 137, 166, 144, 677, 128,
	143, 74, 126, 136, 83, 120, 76, 134, 124, 105,
	95, 96, 75, 325, 117, 87, 91, 86, 110, 131,
	132, 85, 150, 79, 142, 78, 684, 141, 109, 129,
	135, 106, 103, 77, 133, 104, 102, 97, 89, 0,
	676, 0, 123, 139, 151, 248, 305, 145, 146, 147,
	148, 108, 683, 94, 121, 246, 247, 244, 0, 245,
	281, 282, 314, 315, 316, 297, 241, 0, 0, 300,
	284, 73, 0, 99, 149, 116, 90, 140, 687, 309,
	299, 272, 311, 250, 264, 319, 265, 266, 293, 238,
	280, 111, 262, 0, 253, 233, 259, 234, 251, 274,
	88, 277, 678, 301, 283, 98, 317, 100, 288, 0,
	122, 107, 0, 0, 276, 303, 278, 298, 271, 294,
	243, 287, 312, 263, 291, 313, 0, 0, 0, 0,
	688, 689, 0, 0, 0, 0, 0, 681, 0, 290,
	308, 261, 292, 232, 289, 0, 236, 239, 318, 306,
	256, 257, 686, 0, 0, 0, 0, 0, 0, 275,
	279, 295, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 286, 0, 0, 0, 237, 0, 685,
	273, 0, 0, 0, 242, 0, 255, 296, 0, 231,
	304, 270, 165, 307, 268, 267, 310, 114, 0, 0,
	125, 93, 92, 302, 252, 260, 84, 258, 119, 112,
	138, 285, 113, 118, 101, 130, 115, 137, 166, 144,
	677, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 684, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 676, 0, 123, 139, 151, 248, 305, 145,
	146, 147, 148, 108, 683, 94, 121, 246, 247, 244,
	0, 245, 281, 282, 314, 315, 316, 297, 241, 0,
	0, 300, 284, 73, 0, 99, 149, 116, 90, 140,
	687, 309, 299, 272, 311, 250, 264, 319, 265, 266,
	293, 238, 280, 111, 262, 0, 253, 233, 259, 234,
	251, 274, 88, 277, 249, 301, 283, 98, 317, 100,
	288, 0, 122, 107, 0, 0, 276, 303, 278, 298,
	271, 294, 243, 287, 312, 263, 291, 313, 0, 0,
	0, 0, 688, 689, 0, 0, 0, 0, 0, 82,
	0, 290, 308, 261, 292, 232, 289, 0, 236, 239,
	318, 306, 256, 257, 686, 0, 0, 0, 0, 0,
	0, 275, 279, 295, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 286, 0, 0, 0, 237,
	0, 240, 273, 0, 0, 0, 242, 0, 255, 296,
	0, 231, 304, 270, 165, 307, 268, 267, 310, 114,
	0, 0, 125, 93, 92, 302, 252, 260, 84, 258,
	119, 112, 138, 285, 113, 118, 101, 130, 115, 137,
	166, 144, 127, 128, 143, 74, 126, 136, 83, 120,
	76, 134, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 131, 132, 85, 150, 79, 142, 78,
	80, 141, 109, 129, 135, 106, 103, 77, 133, 104,
	102, 97, 89, 0, 235, 0, 123, 139, 151, 248,
	305, 145, 146, 147, 148, 108, 81, 94, 121, 246,
	247, 244, 0, 245, 281, 282, 314, 315, 316, 297,
	241, 0, 0, 300, 284, 73, 0, 99, 149, 116,
	90, 140, 687, 309, 299, 272, 311, 250, 264, 319,
	265, 266, 293, 238, 280, 111, 262, 0, 253, 233,
	259, 234, 251, 274, 88, 277, 249, 301, 283, 98,
	317, 100, 288, 0, 122, 107, 0, 0, 276, 303,
	278, 298, 271, 294, 243, 287, 312, 263, 291, 313,
	0, 0, 0, 0, 1142, 1143, 0, 0, 0, 0,
	0, 82, 0, 290, 308, 261, 292, 232, 289, 0,
	236, 239, 318, 306, 256, 257, 0, 0, 0, 0,
	0, 0, 0, 275, 279, 295, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 286, 0, 0,
	0, 237, 0, 240, 273, 0, 0, 0, 242, 0,
	255, 296, 0, 231, 304, 270, 165, 307, 268, 267,
	310, 114, 0, 0, 125, 93, 92, 302, 252, 260,
	84, 258, 119, 112, 138, 285, 113, 118, 101, 130,
	115, 137, 166, 144, 127, 128, 143, 74, 126, 136,
	83, 120, 76, 134, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 131, 132, 85, 150, 79,
	142, 78, 80, 141, 109, 129, 135, 106, 103, 77,
	133, 104, 102, 97, 89, 0, 235, 0, 123, 139,
	151, 248, 305, 145, 146, 147, 148, 108, 81, 94,
	121, 246, 247, 244, 0, 245, 281, 282, 314, 315,
	316, 297, 241, 0, 0, 300, 284, 73, 0, 99,
	149, 116, 90, 140, 71, 309, 299, 272, 311, 250,
	264, 319, 265, 266, 293, 238, 280, 111, 262, 0,
	253, 233, 259, 234, 251, 274, 88, 277, 249, 301,
	283, 98, 317, 100, 288, 0, 122, 107, 0, 0,
	276, 303, 278, 298, 271, 294, 243, 287, 312, 263,
	291, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 290, 308, 261, 292, 232,
	289, 0, 236, 239, 318, 306, 256, 257, 0, 0,
	0, 0, 0, 0, 0, 275, 279, 295, 269, 0,
	0, 0, 0, 0, 0, 1192, 0, 254, 0, 286,
	0, 0, 0, 237, 0, 240, 273, 0, 0, 0,
	242, 0, 255, 296, 0, 231, 304, 270, 165, 307,
	268, 267, 310, 114, 0, 0, 125, 93, 92, 302,
	252, 260, 84, 258, 119, 112, 138, 285, 113, 118,
	101, 130, 115, 137, 166, 144, 127, 128, 143, 74,
	126, 136, 83, 120, 76, 134, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 131, 132, 85,
	150, 79, 142, 78, 80, 141, 109, 129, 135, 106,
	103, 77, 133, 104, 102, 97, 89, 0, 235, 0,
	123, 139, 151, 248, 305, 145, 146, 147, 148, 108,
	81, 94, 121, 246, 247, 244, 0, 245, 281, 282,
	314, 315, 316, 297, 241, 0, 0, 300, 284, 73,
	0, 99, 149, 116, 90, 140, 71, 309, 299, 272,
	311, 250, 264, 319, 265, 266, 293, 238, 280, 111,
	262, 0, 253, 233, 259, 234, 251, 274, 88, 277,
	249, 301, 283, 98, 317, 100, 288, 0, 122, 107,
	0, 0, 276, 303, 278, 298, 271, 294, 243, 287,
	312, 263, 291, 313, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 290, 308, 261,
	292, 232, 289, 0, 236, 239, 318, 306, 256, 257,
	0, 0, 0, 0, 0, 0, 0, 275, 279, 295,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 286, 0, 0, 0, 237, 0, 240, 273, 0,
	0, 0, 242, 0, 255, 296, 0, 231, 304, 270,
	165, 307, 268, 267, 310, 114, 0, 0, 125, 93,
	92, 302, 252, 260, 84, 258, 119, 112, 138, 285,
	113, 118, 101, 130, 115, 137, 166, 144, 127, 128,
	143, 74, 126, 136, 83, 120, 76, 134, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 131,
	132, 85, 150, 79, 142, 78, 80, 141, 109, 129,
	135, 106, 103, 77, 133, 104, 102, 97, 89, 0,
	235, 0, 123, 139, 151, 248, 305, 145, 146, 147,
	148, 108, 81, 94, 121, 246, 247, 244, 0, 245,
	281, 282, 314, 315, 316, 297, 241, 0, 0, 300,
	284, 73, 0, 99, 149, 116, 90, 140, 71, 309,
	299, 272, 311, 250, 264, 319, 265, 266, 293, 238,
	280, 111, 262, 0, 253, 233, 259, 234, 251, 274,
	88, 277, 249, 301, 283, 98, 317, 100, 288, 0,
	122, 107, 0, 0, 276, 303, 278, 298, 271, 294,
	243, 287, 312, 263, 291, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 290,
	308, 261, 292, 232, 289, 0, 236, 239, 318, 306,
	256, 257, 0, 0, 0, 0, 0, 0, 0, 275,
	279, 295, 269, 0, 0, 0, 0, 0, 0, 1080,
	0, 254, 0, 286, 0, 0, 0, 237, 0, 240,
	273, 0, 0, 0, 242, 0, 255, 296, 0, 231,
	304, 270, 165, 307, 268, 267, 310, 114, 0, 0,
	125, 93, 92, 302, 252, 260, 84, 258, 119, 112,
	138, 285, 113, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 80, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 235, 0, 123, 139, 151, 248, 305, 145,
	146, 147, 148, 108, 81, 94, 121, 246, 247, 244,
	0, 245, 281, 282, 314, 315, 316, 297, 241, 0,
	0, 300, 284, 73, 0, 99, 149, 116, 90, 140,
	326, 309, 299, 272, 311, 250, 264, 319, 265, 266,
	293, 238, 280, 111, 262, 0, 253, 233, 259, 234,
	251, 274, 88, 277, 249, 301, 283, 98, 317, 100,
	288, 0, 122, 107, 0, 0, 276, 303, 278, 298,
	271, 294, 243, 287, 312, 263, 291, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 290, 308, 261, 292, 232, 289, 0, 236, 239,
	318, 306, 256, 257, 0, 0, 0, 0, 0, 0,
	0, 275, 279, 295, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 286, 0, 0, 0, 237,
	0, 240, 273, 0, 0, 0, 242, 0, 255, 296,
	0, 231, 304, 270, 165, 307, 268, 267, 310, 114,
	0, 0, 125, 93, 92, 302, 252, 260, 84, 258,
	119, 112, 138, 285, 113, 118, 101, 130, 115, 137,
	166, 144, 127, 128, 143, 74, 126, 136, 83, 120,
	76, 134, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 131, 132, 85, 150, 79, 142, 78,
	80, 141, 109, 129, 135, 106, 103, 77, 133, 104,
	102, 97, 89, 0, 235, 0, 123, 139, 151, 248,
	305, 145, 146, 147, 148, 108, 81, 94, 121, 246,
	247, 244, 0, 245, 281, 282, 314, 315, 316, 297,
	241, 0, 0, 300, 284, 73, 0, 99, 149, 116,
	90, 140, 71, 309, 299, 272, 311, 250, 264, 319,
	265, 266, 293, 238, 280, 111, 262, 0, 253, 233,
	259, 234, 251, 274, 88, 277, 249, 301, 283, 98,
	317, 100, 288, 0, 122, 107, 0, 0, 276, 303,
	278, 298, 271, 294, 243, 287, 312, 263, 291, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 290, 308, 261, 292, 232, 289, 0,
	236, 239, 318, 306, 256, 257, 0, 0, 0, 0,
	0, 0, 0, 275, 279, 295, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 286, 0, 0,
	0, 237, 0, 240, 273, 0, 0, 0, 242, 0,
	255, 296, 0, 231, 304, 270, 165, 307, 268, 267,
	310, 114, 0, 0, 125, 93, 92, 302, 252, 260,
	84, 258, 119, 112, 138, 285, 113, 118, 101, 130,
	115, 137, 166, 144, 127, 128, 143, 74, 126, 136,
	83, 120, 76, 134, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 131, 132, 85, 150, 79,
	142, 78, 80, 141, 109, 129, 135, 106, 103, 77,
	133, 104, 102, 97, 89, 0, 235, 0, 123, 139,
	151, 248, 305, 145, 146, 147, 148, 108, 81, 94,
	121, 246, 247, 244, 0, 245, 281, 282, 314, 315,
	316, 297, 241, 0, 0, 300, 284, 73, 0, 99,
	149, 116, 90, 140, 326, 309, 299, 272, 311, 250,
	264, 319, 265, 266, 293, 238, 280, 111, 262, 0,
	253, 233, 259, 234, 251, 274, 88, 277, 249, 301,
	283, 98, 317, 100, 288, 0, 122, 107, 0, 0,
	276, 303, 278, 298, 271, 294, 243, 287, 312, 263,
	291, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 290, 308, 261, 292, 232,
	289, 0, 236, 239, 318, 306, 256, 257, 0, 0,
	0, 0, 0, 0, 0, 275, 279, 295, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 286,
	0, 0, 0, 237, 0, 240, 273, 0, 0, 0,
	242, 0, 255, 296, 0, 231, 304, 270, 165, 307,
	268, 267, 310, 114, 0, 0, 125, 93, 92, 302,
	252, 260, 84, 258, 119, 112, 138, 285, 113, 118,
	101, 130, 115, 137, 166, 144, 127, 128, 143, 74,
	126, 136, 83, 120, 76, 134, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 131, 132, 85,
	150, 79, 142, 78, 229, 141, 109, 129, 135, 106,
	103, 77, 133, 104, 102, 97, 89, 0, 235, 0,
	123, 139, 151, 248, 305, 145, 146, 147, 148, 230,
	228, 94, 121, 246, 247, 244, 0, 245, 281, 282,
	314, 315, 316, 297, 241, 0, 0, 300, 284, 73,
	0, 99, 149, 116, 90, 140, 71, 309, 299, 272,
	311, 250, 264, 319, 265, 266, 293, 238, 280, 111,
	262, 0, 253, 233, 259, 234, 251, 274, 88, 277,
	249, 301, 283, 98, 317, 100, 288, 0, 122, 107,
	0, 0, 276, 303, 278, 298, 271, 294, 243, 287,
	312, 263, 291, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 290, 308, 261,
	292, 232, 289, 0, 236, 239, 318, 306, 256, 257,
	0, 0, 0, 0, 0, 0, 0, 275, 279, 295,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 286, 0, 0, 0, 237, 0, 240, 273, 0,
	0, 0, 242, 0, 255, 296, 0, 231, 304, 270,
	165, 307, 268, 267, 310, 114, 0, 0, 125, 93,
	92, 302, 252, 260, 84, 258, 119, 112, 138, 285,
	113, 118, 101, 130, 115, 137, 166, 144, 127, 128,
	143, 74, 126, 136, 83, 120, 76, 134, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 131,
	132, 85, 150, 79, 142, 78, 80, 141, 109, 129,
	135, 106, 103, 77, 133, 104, 102, 97, 89, 0,
	235, 0, 123, 139, 151, 248, 305, 145, 146, 147,
	148, 108, 81, 94, 121, 246, 247, 244, 0, 245,
	281, 282, 314, 315, 316, 297, 241, 0, 0, 300,
	284, 73, 0, 99, 149, 116, 90, 140, 163, 309,
	299, 272, 311, 250, 264, 319, 265, 266, 293, 238,
	280, 111, 262, 0, 253, 233, 259, 234, 251, 274,
	88, 277, 249, 301, 283, 98, 317, 100, 288, 0,
	122, 107, 0, 0, 276, 303, 278, 298, 271, 294,
	243, 287, 312, 263, 291, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 290,
	308, 261, 292, 232, 289, 0, 236, 239, 318, 306,
	256, 257, 0, 0, 0, 0, 0, 0, 0, 275,
	279, 295, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 286, 0, 0, 0, 237, 0, 240,
	273, 0, 0, 0, 242, 0, 255, 296, 0, 231,
	304, 270, 165, 307, 268, 267, 310, 114, 0, 0,
	125, 93, 92, 302, 252, 260, 84, 258, 119, 112,
	138, 285, 113, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 229, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 235, 0, 123, 139, 151, 248, 305, 145,
	146, 147, 148, 230, 228, 223, 222, 246, 247, 244,
	0, 245, 281, 282, 314, 315, 316, 297, 241, 0,
	0, 300, 284, 73, 0, 99, 149, 116, 90, 140,
	71, 111, 0, 0, 807, 0, 376, 0, 0, 0,
	88, 0, 375, 0, 0, 98, 414, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 407, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 0, 0, 394,
	393, 396, 397, 398, 399, 0, 0, 82, 395, 400,
	401, 402, 0, 0, 373, 387, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 385, 810,
	0, 0, 0, 425, 0, 386, 0, 382, 383, 0,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 423, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 84, 0, 119, 112,
	138, 0, 113, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 80, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 0, 0, 123, 139, 151, 0, 0, 145,
	146, 147, 148, 108, 81, 94, 121, 415, 424, 421,
	0, 422, 419, 420, 418, 417, 416, 426, 409, 410,
	412, 0, 411, 73, 0, 99, 149, 116, 90, 140,
	326, 111, 0, 0, 0, 0, 376, 0, 0, 0,
	88, 0, 375, 0, 0, 98, 414, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 407, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 0, 367, 394,
	393, 396, 397, 398, 399, 0, 0, 82, 395, 400,
	401, 402, 0, 0, 373, 387, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 385, 0,
	0, 0, 0, 425, 0, 386, 0, 382, 383, 0,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 423, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 84, 0, 119, 112,
	138, 0, 113, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 80, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 0, 0, 123, 139, 151, 0, 0, 145,
	146, 147, 148, 108, 81, 94, 121, 415, 424, 421,
	0, 422, 419, 420, 418, 417, 416, 426, 409, 410,
	412, 0, 411, 73, 0, 99, 149, 116, 90, 140,
	326, 111, 0, 0, 0, 0, 376, 0, 0, 0,
	88, 0, 375, 0, 0, 98, 414, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 407, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 0, 0, 394,
	393, 396, 397, 398, 399, 0, 0, 82, 395, 400,
	401, 402, 0, 0, 373, 387, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 385, 810,
	0, 0, 0, 425, 0, 386, 0, 382, 383, 0,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 423, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 84, 0, 119, 112,
	138, 0, 113, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 80, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 0, 0, 123, 139, 151, 0, 0, 145,
	146, 147, 148, 108, 81, 94, 121, 415, 424, 421,
	0, 422, 419, 420, 418, 417, 416, 426, 409, 410,
	412, 22, 411, 73, 0, 99, 149, 116, 90, 140,
	326, 0, 111, 0, 0, 0, 0, 376, 0, 0,
	0, 88, 0, 375, 0, 0, 98, 414, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 407, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	394, 393, 396, 397, 398, 399, 0, 0, 82, 395,
	400, 401, 402, 0, 0, 373, 387, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 384, 385,
	0, 0, 0, 0, 425, 0, 386, 0, 382, 383,
	0, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 423, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 84, 0, 119,
	112, 138, 0, 113, 118, 101, 130, 115, 137, 166,
	144, 127, 128, 143, 74, 126, 136, 83, 120, 76,
	134, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 131, 132, 85, 150, 79, 142, 78, 80,
	141, 109, 129, 135, 106, 103, 77, 133, 104, 102,
	97, 89, 0, 0, 0, 123, 139, 151, 0, 0,
	145, 146, 147, 148, 108, 81, 94, 121, 415, 424,
	421, 0, 422, 419, 420, 418, 417, 416, 426, 409,
	410, 412, 0, 411, 73, 0, 99, 149, 116, 90,
	140, 326, 111, 0, 0, 0, 0, 376, 0, 0,
	0, 88, 0, 375, 0, 0, 98, 414, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 407, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	394, 393, 396, 397, 398, 399, 0, 0, 82, 395,
	400, 401, 402, 0, 0, 373, 387, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 384, 385,
	0, 0, 0, 0, 425, 0, 386, 0, 382, 383,
	0, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 423, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 84, 0, 119,
	112, 138, 0, 113, 118, 101, 130, 115, 137, 166,
	144, 127, 128, 143, 74, 126, 136, 83, 120, 76,
	134, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 131, 132, 85, 150, 79, 142, 78, 80,
	141, 109, 129, 135, 106, 103, 77, 133, 104, 102,
	97, 89, 0, 0, 0, 123, 139, 151, 0, 0,
	145, 146, 147, 148, 108, 81, 94, 121, 415, 424,
	421, 0, 422, 419, 420, 418, 417, 416, 426, 409,
	410, 412, 0, 411, 73, 111, 99, 149, 116, 90,
	140, 326, 0, 0, 88, 0, 0, 0, 0, 98,
	414, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	407, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 0, 0, 394, 393, 396, 397, 398, 399, 0,
	0, 82, 395, 400, 401, 402, 0, 0, 0, 387,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 384, 385, 0, 0, 0, 0, 425, 0, 386,
	0, 382, 383, 0, 388, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 423,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	84, 0, 119, 112, 138, 1241, 113, 118, 101, 130,
	115, 137, 166, 144, 127, 128, 143, 74, 126, 136,
	83, 120, 76, 134, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 131, 132, 85, 150, 79,
	142, 78, 80, 141, 109, 129, 135, 106, 103, 77,
	133, 104, 102, 97, 89, 0, 0, 0, 123, 139,
	151, 0, 0, 145, 146, 147, 148, 108, 81, 94,
	121, 415, 424, 421, 0, 422, 419, 420, 418, 417,
	416, 426, 409, 410, 412, 0, 411, 73, 111, 99,
	149, 116, 90, 140, 326, 0, 0, 88, 0, 0,
	0, 0, 98, 414, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 394, 393, 396, 397,
	398, 399, 0, 0, 82, 395, 400, 401, 402, 0,
	0, 0, 387, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 384, 385, 0, 0, 0, 0,
	425, 0, 386, 0, 382, 383, 0, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 423, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 84, 0, 119, 112, 138, 0, 113,
	118, 101, 130, 115, 137, 166, 144, 127, 128, 143,
	74, 126, 136, 83, 120, 76, 134, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 131, 132,
	85, 150, 79, 142, 78, 80, 141, 109, 129, 135,
	106, 103, 77, 133, 104, 102, 97, 89, 0, 0,
	0, 123, 139, 151, 0, 0, 145, 146, 147, 148,
	108, 81, 94, 121, 415, 424, 421, 0, 422, 419,
	420, 418, 417, 416, 426, 409, 410, 412, 0, 411,
	73, 111, 99, 149, 116, 90, 140, 326, 0, 0,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 564, 574, 575, 567, 568, 569,
	570, 571, 572, 573, 566, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 84, 0, 119, 112,
	138, 0, 113, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 80, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 0, 0, 123, 139, 151, 0, 0, 145,
	146, 147, 148, 108, 81, 94, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 99, 149, 116, 90, 140,
	71, 111, 0, 0, 0, 974, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 553, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 84, 0, 119, 112,
	138, 0, 113, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 80, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 0, 0, 123, 139, 151, 0, 111, 145,
	146, 147, 148, 108, 81, 94, 121, 88, 703, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 73, 0, 99, 149, 116, 90, 140,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 165,
	0, 0, 0, 697, 696, 0, 701, 700, 699, 92,
	0, 0, 0, 84, 0, 119, 112, 138, 0, 113,
	118, 101, 130, 115, 137, 166, 144, 127, 128, 143,
	74, 126, 136, 83, 120, 76, 134, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 131, 132,
	85, 150, 79, 142, 78, 80, 141, 109, 129, 135,
	106, 103, 77, 133, 104, 102, 97, 89, 0, 0,
	0, 123, 139, 151, 0, 111, 145, 146, 147, 148,
	108, 81, 94, 121, 88, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	73, 0, 99, 149, 116, 90, 140, 326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 65, 0, 0, 0,
	69, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	84, 0, 119, 112, 138, 0, 113, 118, 101, 130,
	115, 137, 67, 144, 127, 128, 143, 74, 126, 136,
	83, 120, 76, 134, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 131, 132, 85, 150, 79,
	142, 78, 80, 141, 109, 129, 135, 106, 103, 77,
	133, 104, 102, 97, 89, 0, 0, 0, 123, 139,
	151, 0, 0, 145, 146, 147, 148, 108, 81, 94,
	121, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 99,
	149, 116, 90, 140, 71, 111, 0, 0, 0, 461,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	84, 0, 119, 112, 138, 0, 113, 118, 101, 130,
	115, 137, 166, 144, 127, 128, 143, 74, 126, 136,
	83, 120, 76, 134, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 131, 132, 85, 150, 79,
	142, 78, 80, 141, 109, 129, 135, 106, 103, 77,
	133, 104, 102, 97, 89, 0, 0, 0, 123, 139,
	151, 0, 0, 145, 146, 147, 148, 108, 81, 94,
	121, 0, 0, 0, 0, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 73, 0, 99,
	149, 116, 90, 140, 163, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 84, 0, 119, 112, 138, 0, 113, 118, 101,
	130, 115, 137, 166, 144, 127, 128, 143, 74, 126,
	136, 83, 120, 76, 134, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 131, 132, 85, 150,
	79, 142, 78, 80, 141, 109, 129, 135, 106, 103,
	77, 133, 104, 102, 97, 89, 0, 0, 0, 123,
	139, 151, 0, 0, 145, 146, 147, 148, 108, 81,
	94, 121, 0, 0, 0, 0, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 73, 0,
	99, 149, 116, 90, 140, 71, 88, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 84, 0, 119, 112, 138, 0, 113, 118,
	101, 130, 115, 137, 166, 144, 127, 128, 143, 74,
	126, 136, 83, 120, 76, 134, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 131, 132, 85,
	150, 79, 142, 78, 80, 141, 109, 129, 135, 106,
	103, 77, 133, 104, 102, 97, 89, 0, 0, 0,
	123, 139, 151, 0, 111, 145, 146, 147, 148, 108,
	81, 94, 121, 88, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 73,
	0, 99, 149, 116, 90, 140, 163, 0, 0, 0,
	0, 0, 0, 0, 633, 0, 0, 634, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	114, 0, 0, 125, 93, 92, 0, 0, 0, 84,
	0, 119, 112, 138, 0, 113, 118, 101, 130, 115,
	137, 166, 144, 127, 128, 143, 74, 126, 136, 83,
	120, 76, 134, 124, 105, 95, 96, 75, 0, 117,
	87, 91, 86, 110, 131, 132, 85, 150, 79, 142,
	78, 80, 141, 109, 129, 135, 106, 103, 77, 133,
	104, 102, 97, 89, 0, 0, 0, 123, 139, 151,
	0, 111, 145, 146, 147, 148, 108, 81, 94, 121,
	88, 0, 475, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 73, 0, 99, 149,
	116, 90, 140, 71, 0, 0, 0, 0, 0, 0,
	474, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 84, 0, 119, 112,
	138, 0, 113, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 80, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 0, 0, 123, 139, 151, 0, 0, 145,
	146, 147, 148, 108, 81, 94, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 99, 149, 116, 90, 140,
	71, 111, 0, 0, 0, 461, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 114, 0, 0,
	125, 93, 92, 0, 0, 0, 84, 0, 119, 112,
	138, 0, 459, 118, 101, 130, 115, 137, 166, 144,
	127, 128, 143, 74, 126, 136, 83, 120, 76, 134,
	124, 105, 95, 96, 75, 0, 117, 87, 91, 86,
	110, 131, 132, 85, 150, 79, 142, 78, 80, 141,
	109, 129, 135, 106, 103, 77, 133, 104, 102, 97,
	89, 0, 0, 0, 123, 139, 151, 0, 111, 145,
	146, 147, 148, 108, 81, 94, 121, 88, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 73, 0, 99, 149, 116, 90, 140,
	163, 0, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 114, 0, 0, 125, 93, 92,
	0, 0, 0, 84, 0, 119, 112, 138, 0, 113,
	118, 101, 130, 115, 137, 166, 144, 127, 128, 143,
	74, 126, 136, 83, 120, 76, 134, 124, 105, 95,
	96, 75, 0, 117, 87, 91, 86, 110, 131, 132,
	85, 150, 79, 142, 78, 80, 141, 109, 129, 135,
	106, 103, 77, 133, 104, 102, 97, 89, 0, 0,
	0, 123, 139, 151, 0, 111, 145, 146, 147, 148,
	108, 81, 94, 121, 88, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	73, 0, 99, 149, 116, 90, 140, 163, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	84, 0, 119, 112, 138, 0, 113, 118, 101, 130,
	115, 137, 166, 144, 127, 128, 143, 74, 126, 136,
	83, 120, 76, 134, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 131, 132, 85, 150, 79,
	142, 78, 80, 141, 109, 129, 135, 106, 103, 77,
	133, 104, 102, 97, 89, 0, 0, 0, 123, 139,
	151, 0, 111, 145, 146, 147, 148, 108, 81, 94,
	121, 88, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 73, 0, 99,
	149, 116, 90, 140, 71, 0, 0, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 84, 0, 119,
	112, 138, 0, 113, 118, 101, 130, 115, 137, 166,
	144, 127, 128, 143, 74, 126, 136, 83, 120, 76,
	134, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 131, 132, 85, 150, 79, 142, 78, 80,
	141, 109, 129, 135, 106, 103, 77, 133, 104, 102,
	97, 89, 0, 0, 0, 123, 139, 151, 0, 0,
	145, 146, 147, 148, 108, 81, 94, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 111, 99, 149, 116, 90,
	140, 163, 0, 438, 88, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 114, 0, 0, 125, 93, 92, 0, 0, 0,
	84, 0, 119, 112, 138, 0, 113, 118, 101, 130,
	115, 137, 166, 144, 127, 128, 143, 74, 126, 136,
	83, 120, 76, 134, 124, 105, 95, 96, 75, 0,
	117, 87, 91, 86, 110, 131, 132, 85, 150, 79,
	142, 78, 80, 141, 109, 129, 135, 106, 103, 77,
	133, 104, 102, 97, 89, 0, 0, 0, 123, 139,
	151, 0, 111, 145, 146, 147, 148, 108, 81, 94,
	121, 88, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 73, 0, 99,
	149, 116, 90, 140, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 114, 0,
	0, 125, 93, 92, 0, 0, 0, 84, 0, 119,
	112, 138, 0, 113, 118, 101, 130, 115, 137, 166,
	144, 127, 128, 143, 74, 126, 136, 83, 120, 76,
	134, 124, 105, 95, 96, 75, 0, 117, 87, 91,
	86, 110, 131, 132, 85, 150, 79, 142, 78, 80,
	141, 109, 129, 135, 106, 103, 77, 133, 104, 102,
	97, 89, 216, 0, 0, 123, 139, 151, 0, 111,
	145, 146, 147, 148, 108, 81, 94, 121, 88, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 73, 0, 99, 149, 116, 90,
	140, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 114, 0, 0, 125, 93,
	92, 0, 0, 0, 84, 0, 119, 112, 138, 0,
	113, 118, 101, 130, 115, 137, 166, 144, 127, 128,
	143, 74, 126, 136, 83, 120, 76, 134, 124, 105,
	95, 96, 75, 0, 117, 87, 91, 86, 110, 131,
	132, 85, 150, 79, 142, 78, 80, 141, 109, 129,
	135, 106, 103, 77, 133, 104, 102, 97, 89, 0,
	0, 0, 123, 139, 151, 0, 111, 145, 146, 147,
	148, 108, 81, 94, 121, 88, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 73, 0, 99, 149, 116, 90, 140, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 165, 0, 0,
	0, 0, 114, 0, 0, 125, 93, 92, 0, 0,
	0, 84, 0, 119, 112, 138, 0, 113, 118, 101,
	130, 115, 137, 166, 144, 127, 128, 143, 74, 126,
	136, 83, 120, 76, 134, 124, 105, 95, 96, 75,
	0, 117, 87, 91, 86, 110, 131, 132, 85, 150,
	79, 142, 78, 80, 141, 109, 129, 135, 106, 103,
	77, 133, 104, 102, 97, 89, 0, 0, 0, 123,
	139, 151, 0, 111, 145, 146, 147, 148, 108, 81,
	94, 121, 88, 0, 0, 0, 0, 98, 0, 100,
	0, 0, 122, 107, 0, 0, 0, 0, 73, 0,
	99, 149, 116, 90, 140, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 114,
	0, 0, 125, 93, 92, 0, 0, 0, 84, 0,
	119, 112, 138, 0, 113, 118, 101, 130, 115, 137,
	166, 144, 127, 128, 143, 74, 126, 136, 83, 120,
	76, 134, 124, 105, 95, 96, 75, 0, 117, 87,
	91, 86, 110, 131, 132, 85, 150, 79, 142, 78,
	80, 141, 109, 129, 135, 106, 103, 77, 133, 104,
	102, 97, 89, 0, 0, 0, 123, 139, 151, 0,
	111, 145, 146, 147, 148, 108, 81, 94, 121, 88,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 73, 0, 99, 149, 116,
	90, 140, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 114, 0, 0, 125,
	93, 92, 0, 0, 0, 84, 0, 119, 112, 138,
	0, 113, 118, 101, 130, 115, 137, 166, 144, 127,
	128, 143, 74, 126, 136, 83, 120, 76, 134, 124,
	105, 95, 96, 75, 0, 117, 87, 91, 86, 110,
	131, 132, 85, 150, 79, 142, 78, 80, 141, 109,
	129, 135, 106, 103, 77, 133, 104, 102, 97, 89,
	0, 0, 0, 123, 139, 151, 0, 111, 145, 146,
	147, 148, 108, 81, 94, 121, 88, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 73, 0, 99, 149, 116, 90, 140, 326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 114, 0, 0, 125, 93, 92, 0,
	0, 0, 84, 0, 119, 112, 138, 0, 113, 118,
	101, 130, 115, 137, 166, 144, 127, 128, 143, 74,
	126, 136, 83, 120, 76, 134, 124, 105, 95, 96,
	75, 0, 117, 87, 91, 86, 110, 131, 132, 85,
	150, 79, 142, 78, 80, 141, 109, 129, 135, 106,
	103, 77, 133, 104, 102, 97, 89, 0, 0, 0,
	123, 139, 151, 0, 0, 145, 146, 147, 148, 108,
	81, 94, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 99, 149, 116, 90, 140, 163,
}
var yyPact = [...]int{

	1802, -1000, -156, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	845, 879, -1000, -1000, -1000, -1000, -1000, 651, 6978, 102,
	117, 27, 9419, 108, 1263, 9950, -1000, 1, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 619, -1000, -1000, -1000, -1000,
	-1000, 831, 842, 650, 835, 719, -1000, 80, 8331, 9242,
	4754, -1000, 9065, 62, 106, 9950, -71, 9596, 62, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 103, 9950, -1000, 9950, 41, 41, -104, 41,
	9950, -1000, 161, -1000, -1000, -1000, -1000, 9950, -107, 778,
	-25, 3422, 3422, 3422, 3422, 64, 3422, 3422, 668, -1000,
	-1000, -1000, -1000, 3422, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 399, 809, 5805, 5805, 845, -1000, 619,
	-1000, -1000, -1000, 786, -1000, -1000, 279, 8888, 604, 782,
	-1000, -1000, -1000, 821, 7590, 8154, 9950, 616, -1000, 590,
	4310, -1000, -1000, -1000, 241, 7944, -1000, -1000, -1000, 775,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9950, 542, -1000, 95, -1000, 149, -1000, -1000, -117, 259,
	-118, 3422, 67, 654, 9950, 9950, 3422, 61, 9950, 819,
	-119, 667, 9950, -1000, 4532, -1000, 3422, 3422, 3422, 3422,
	3422, 3422, 3422, 3422, -1000, -1000, -1000, -1000, -1000, -1000,
	3422, 3422, -1000, -1000, 9950, -1000, -1000, -1000, -1000, 873,
	205, 364, -1000, 5805, 1908, 553, 553, -1000, -1000, 126,
	-1000, -1000, 6211, 6211, 6211, 6211, 6211, 6211, 6211, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 553, 140, -1000, 5595, 553, 553, 553,
	553, 553, 553, 5805, 553, 553, 553, 553, 553, 553,
	553, 553, 553, 553, 553, 553, 553, 601, -1000, 353,
	831, 399, 719, 7767, 686, -1000, -1000, 33, 9950, -1000,
	9773, 8331, 8331, 8331, 8331, 8331, -1000, 713, 701, -1000,
	710, 698, 723, 9950, -1000, 540, 399, 7590, 181, 553,
	-1000, 8685, -1000, -1000, 33, 8331, 9950, -1000, -1000, 4310,
	590, 5805, 164, -1000, -1000, -1000, -1000, 461, 2534, 6801,
	-1000, -43, -1000, -1000, 603, -1000, 603, 603, 603, 603,
	-19, -19, -19, -19, -1000, -1000, -1000, -1000, -1000, 629,
	624, -1000, 603, 603, 603, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 621, 63, 621, 608, 608, 4088,
	2534, 818, 657, -1000, 9950, -91, -137, 201, 1162, -1000,
	9950, -1000, -1000, 3422, 9950, 3422, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 736, 5805, 5805, 390, 5805, 5805, 220, 6211, 317,
	237, 6211, 6211, 6211, 6211, 6211, 6211, 6211, 6211, 6211,
	6211, 6211, 6211, 6211, 6211, 6211, 56, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -138, -1000, 619, 865, 865,
	166, 166, 166, 166, 166, 166, 6414, 4964, 4088, 538,
	318, 5595, 5384, 5384, 5805, 5805, 5384, 823, 252, 318,
	9596, -1000, 399, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5384, 5384, 5384, 5384, 5805, -1000, -1000, -1000, 809, -1000,
	823, 848, -1000, 769, 754, 5384, -1000, 571, 553, -1000,
	626, -1000, 236, 782, 662, 665, 891, -1000, -1000, -1000,
	-1000, 697, -1000, 690, -1000, -1000, -1000, -1000, -1000, 399,
	-1000, 97, 89, 85, 9596, -1000, 858, 613, -1000, -1000,
	318, -1000, 22, -1000, 2312, -1000, 249, 2756, 44, -1000,
	-1000, 2756, -1000, 57, 773, 60, 58, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 588, 622, 810, 59, -139, 186,
	186, -141, -1000, -1000, 1132, -45, -1000, -1000, 343, -19,
	-19, -1000, -1000, 164, 57, 773, 164, 164, 164, 391,
	391, -1000, -1000, -1000, -1000, 342, 621, -1000, -1000, -1000,
	334, -1000, -1000, 139, -1000, 2312, -1000, 664, 9596, 3422,
	-1000, 3866, -1000, -1000, 9950, -1000, 172, 65, 211, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31, -1000, -1000, 3422, -1000, 732, 220, 248, -1000, -1000,
	370, -1000, -1000, 318, 318, 1219, -1000, -1000, -1000, -1000,
	317, 6211, 6211, 6211, 315, 1219, 1587, 885, 522, 166,
	297, 297, 208, 208, 208, 208, 208, 387, 387, -1000,
	-1000, -1000, 399, -1000, -1000, -1000, 399, 5384, 585, -1000,
	-1000, 6624, 133, 553, 5805, -1000, 504, 504, 289, 406,
	504, 5384, 270, -1000, 5805, 399, -1000, 504, 399, 504,
	504, -1000, -1000, 9950, -1000, -1000, -1000, -1000, 596, 660,
	9773, 553, -1000, 7389, 9596, 845, 9773, 5805, 5805, -1000,
	-1000, 5805, 620, -1000, 5805, -1000, -1000, -1000, -1000, 553,
	553, 553, 458, -1000, 845, -1000, -1000, -1000, -1000, -1000,
	2534, -1000, 322, -1000, -1000, -1000, -1000, -1000, -1000, 17,
	-1000, -1000, 9596, 612, 9596, -144, -145, -1000, -1000, -146,
	-147, 82, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 269, 101, 871, -1000, 808, -1000, 806, 373,
	-1000, -1000, 447, 164, 164, -1000, -1000, -1000, -1000, 520,
	-1000, 517, 583, -1000, 511, 3866, 9950, -1000, -1000, 582,
	-1000, 234, -1000, -1000, -1000, 9596, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9596, 9950,
	-1000, -1000, -1000, -1000, -1000, 9596, -1000, -1000, -1000, -1000,
	-1000, -1000, 315, 1219, 1528, -1000, 6211, 6211, -1000, -1000,
	504, 5384, -1000, -1000, 8508, -1000, -1000, 3644, 5384, 318,
	-1000, -1000, 199, 56, 199, -79, 506, 245, -1000, 5805,
	355, -1000, -1000, -1000, -1000, -1000, -1000, 858, 8331, -1000,
	787, 557, 477, -1000, -1000, 5174, 399, 470, 132, 458,
	831, -1000, 318, 318, 318, 9596, 318, 9596, 9596, 9596,
	7188, 9596, 831, -1000, -1000, -1000, -1000, -1000, 444, -1000,
	552, 9596, 442, -1000, -1000, -1000, -1000, 804, 186, 783,
	-1000, -1000, -1000, -1000, -1000, -1000, 611, -1000, 610, -57,
	-1000, -1000, -1000, -1000, -1000, -1000, -19, 372, -19, 306,
	-1000, 302, -1000, 3422, 3866, 2978, -1000, 609, -1000, -1000,
	-1000, -1000, 784, -1000, 6211, 1219, 1219, -1000, -1000, -1000,
	-1000, 130, 399, 399, 603, 603, -1000, 603, 608, -1000,
	603, -8, 603, -9, 399, 399, 553, -76, -1000, 318,
	5805, 856, 513, 781, -1000, 553, -1000, -1000, 556, 9596,
	9596, -1000, -1000, 440, -1000, 423, 423, 423, 181, -1000,
	-1000, 304, 9596, -1000, -1000, -1000, 418, -1000, -1000, -1000,
	-1000, 445, 331, -1000, 164, -1000, 164, 434, 419, -1000,
	-1000, -1000, -1000, -1000, 9596, 553, 1219, 3200, -1000, -1000,
	-1000, -90, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6211, 399, 360, 318, 849, 837, 870, -1000, 553, -1000,
	619, 129, -1000, 9596, -1000, -1000, -1000, -1000, -1000, -1000,
	275, -1000, -1000, -1000, 407, -1000, -1000, -1000, -1000, -1000,
	415, 29, -1000, -1000, -1000, 6, -1000, -1000, -1000, 5805,
	5805, 9773, 477, 399, 9596, -1000, -1000, -1000, 654, 410,
	-1000, 9596, 399, 91, -95, 318, 475, 473, -1000, -1000,
	-91, -1000, 29, 746, -1000, 730, -84, -98, -1000, -1000,
	24, -1000, 725, -1000, 12, -93, 553, -96, 6008, -101,
	1414, 399, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1107, 7, 653, 1105, 1104, 1103, 1101, 1099, 1098,
	1097, 1096, 1094, 1093, 1092, 1091, 1090, 1087, 1086, 1085,
	1084, 1083, 1080, 170, 1079, 1078, 1077, 50, 1076, 67,
	1075, 1074, 38, 292, 26, 54, 45, 1073, 24, 77,
	70, 1072, 51, 1071, 1069, 1067, 1063, 65, 1062, 1061,
	1236, 1060, 1059, 12, 32, 1058, 1055, 1046, 1044, 52,
	121, 1039, 1037, 1036, 1034, 1033, 1029, 40, 3, 10,
	19, 11, 1028, 186, 9, 1027, 42, 1007, 1006, 1004,
	1002, 27, 1000, 76, 998, 20, 48, 989, 30, 62,
	43, 22, 5, 139, 988, 39, 63, 987, 383, 986,
	160, 356, 973, 972, 969, 968, 35, 0, 819, 69,
	34, 966, 16, 965, 1271, 37, 75, 21, 964, 90,
	1184, 28, 963, 962, 23, 961, 959, 958, 957, 955,
	954, 64, 953, 6, 952, 18, 49, 56, 951, 948,
	44, 13, 947, 946, 945, 47, 58, 944, 31, 943,
	939, 919, 918, 15, 41, 57, 917, 914, 14, 25,
	911, 1, 907, 17, 902, 2, 901, 4, 55, 74,
	898, 891, 372, 46, 890, 889, 163,
}
var yyR1 = [...]int{

	0, 170, 171, 171, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 3, 4, 4, 5, 5, 6,
	6, 26, 26, 7, 8, 8, 174, 174, 45, 45,
	89, 89, 9, 9, 122, 122, 10, 10, 10, 10,
	10, 10, 10, 167, 167, 166, 165, 165, 164, 164,
	163, 15, 15, 149, 150, 150, 150, 146, 152, 152,
	151, 151, 151, 151, 151, 151, 151, 151, 125, 125,
	125, 128, 128, 126, 126, 126, 126, 126, 126, 126,
	126, 127, 127, 127, 127, 127, 127, 129, 129, 129,
	129, 129, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 145, 145, 131,
	131, 140, 140, 141, 141, 141, 138, 138, 139, 139,
	142, 142, 142, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 135, 135, 135, 134, 134, 143, 143, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 144,
	144, 144, 144, 144, 133, 133, 147, 147, 147, 147,
	147, 147, 157, 157, 157, 157, 156, 156, 156, 156,
	156, 156, 156, 148, 148, 159, 159, 158, 158, 158,
	155, 155, 155, 155, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 169, 169, 169, 169, 169, 169, 153,
	153, 153, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 162, 160, 160, 161, 161, 12, 13, 13,
	13, 13, 14, 14, 16, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 123, 123,
	123, 18, 18, 20, 20, 21, 22, 19, 19, 19,
	19, 19, 175, 23, 24, 24, 25, 25, 25, 29,
	29, 29, 27, 27, 28, 28, 34, 34, 33, 33,
	35, 35, 35, 35, 111, 111, 111, 110, 110, 37,
	37, 38, 38, 39, 39, 40, 40, 40, 52, 52,
	88, 88, 90, 90, 41, 41, 41, 41, 42, 42,
	43, 43, 44, 44, 118, 118, 117, 117, 117, 116,
	116, 46, 46, 46, 48, 47, 47, 47, 47, 49,
	49, 51, 51, 50, 50, 53, 53, 53, 53, 54,
	54, 36, 36, 36, 36, 36, 36, 36, 99, 99,
	56, 56, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 66, 66, 66, 66, 66, 66, 57, 57,
	57, 57, 57, 57, 57, 32, 32, 67, 67, 67,
	73, 68, 68, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 64, 64, 64, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 63, 63, 63, 63,
	63, 63, 63, 63, 176, 176, 65, 65, 65, 65,
	30, 30, 30, 30, 30, 121, 121, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	77, 77, 31, 31, 75, 75, 76, 78, 78, 74,
	74, 74, 59, 59, 59, 59, 59, 59, 59, 59,
	61, 61, 61, 79, 79, 80, 80, 81, 81, 82,
	82, 83, 84, 84, 84, 85, 85, 85, 85, 86,
	86, 86, 58, 58, 58, 58, 58, 58, 87, 87,
	87, 87, 91, 91, 69, 69, 71, 71, 70, 72,
	92, 92, 95, 93, 93, 96, 96, 94, 94, 94,
	113, 113, 113, 97, 97, 100, 100, 101, 101, 98,
	98, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 103, 103, 103, 104, 104, 105, 105, 105, 112,
	112, 108, 108, 109, 109, 114, 114, 115, 115, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 172,
	173, 119, 120, 120, 120,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 8, 8, 6, 1, 1, 1, 3,
	0, 4, 3, 4, 1, 1, 2, 5, 5, 8,
	4, 6, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 6, 4, 1, 3, 3, 3, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	4, 2, 1, 4, 3, 0, 3, 0, 1, 0,
	2, 2, 3, 3, 3, 0, 2, 2, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 6, 5, 5,
	4, 4, 4, 3, 4, 4, 2, 3, 3, 2,
	2, 3, 3, 1, 1, 1, 3, 2, 2, 2,
	0, 1, 2, 3, 2, 3, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 6, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 5,
	6, 5, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 3,
	4, 2, 4, 2, 2, 2, 2, 3, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -170, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -20, -21, -22, -19,
	-3, -4, 6, -26, 8, 9, 29, -15, 110, 111,
	113, 112, 136, 114, 129, 48, 149, 150, 152, 153,
	24, 130, 131, 134, 135, -172, 7, 213, 52, -171,
	227, -81, 14, -25, 5, -23, -175, -23, -23, -23,
	-23, -149, 52, 204, -105, 118, 68, 144, 116, 122,
	-108, 226, -107, 219, 149, 160, 154, 181, 173, 171,
	174, 200, 63, 152, 132, 169, 165, 163, 26, 186,
	224, 164, 128, 127, 201, 158, 159, 185, 31, 221,
	33, 140, 184, 180, 183, 157, 179, 37, 199, 176,
	166, 17, 135, 138, 123, 142, 223, 162, 139, 134,
	153, 202, 36, 190, 156, 126, 150, 146, 147, 177,
	141, 167, 168, 182, 155, 178, 151, 143, 136, 191,
	225, 175, 172, 148, 145, 195, 196, 197, 198, 222,
	170, 192, -98, 118, 120, 116, 116, 204, 117, 118,
	116, -50, -114, 226, -107, 118, 144, 116, 103, 174,
	110, 193, 117, 31, 142, -123, 116, 194, 145, 195,
	196, 197, 198, 226, 202, 201, -114, 151, -119, -119,
	-119, -119, -119, -2, -85, 16, 15, -5, -3, -172,
	6, 19, 20, -29, 38, 39, -24, -98, -38, -39,
	-40, -41, -52, -73, -172, -50, 10, -45, -50, -93,
	-122, -96, 202, 201, -109, -94, -108, -106, 200, 174,
	199, 115, 69, 21, 23, 188, 72, 103, 15, 73,
	105, 214, 110, 46, 205, 207, 203, 204, 193, 28,
	9, 24, 130, 20, 97, 112, 76, 77, 133, 22,
	131, 67, 18, 49, 10, 12, 13, 121, 120, 88,
	117, 44, 7, 106, 25, 85, 40, 27, 42, 86,
	16, 208, 209, 30, 218, 137, 99, 47, 34, 70,
	65, 50, 68, 14, 45, 87, 113, 213, 43, 6,
	217, 29, 129, 41, 116, 194, 75, 119, 66, 5,
	122, 8, 48, 51, 210, 211, 212, 32, 74, 11,
	86, -150, -146, -74, -108, -114, 226, -107, -101, 121,
	117, -50, 213, -108, -101, 116, -50, -50, -100, 121,
	-100, 226, -100, -50, 107, -50, 226, 29, 204, 226,
	142, 116, 143, 118, -120, -172, -109, -120, -120, -120,
	147, 148, -120, -120, 50, -120, -173, 54, -86, 18,
	30, -36, -55, 70, -60, 28, 22, -59, -56, -74,
	-72, -73, 103, 104, 93, 94, 101, 71, 106, -64,
	-62, -63, -65, 56, 55, 64, 57, 58, 59, 60,
	65, 66, 67, -108, -114, -70, -172, 42, 43, 214,
	215, 218, 216, 73, 32, 203, 212, 211, 210, 208,
	209, 205, 207, 121, 204, 99, 213, -82, -83, -36,
	-81, -2, -23, 34, -27, 20, 62, -51, 25, -50,
	29, 53, -46, -48, -47, -49, 40, 44, 46, 41,
	42, 43, 47, -118, 21, -38, -2, -172, -117, 138,
	-116, 21, -114, 56, -50, -174, 53, 10, 51, 53,
	-93, 78, -113, -108, 56, 28, 29, -50, 54, 53,
	-125, -128, -130, -129, -126, -127, 171, 172, 103, 175,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	29, 132, 167, 168, 169, 170, 154, 155, 156, 157,
	158, 159, 160, 220, 162, 163, 164, 165, 166, 107,
	226, 70, 226, -120, 118, -167, 51, -50, -50, -120,
	119, -50, 22, 226, 50, -50, -115, -114, -106, -120,
	-120, -120, -120, -120, -120, -120, -120, -120, -120, -50,
	8, 88, 69, 68, 85, 53, 17, -36, -57, 88,
	70, 86, 87, 72, 90, 89, 100, 93, 94, 95,
	96, 97, 98, 99, 91, 92, 105, 78, 79, 80,
	81, 82, 83, 84, -99, -172, -73, -172, 108, 109,
	-60, -60, -60, -60, -60, -60, -60, -172, 107, -68,
	-36, -172, -172, -172, -172, -172, -172, -172, -77, -36,
	-172, -176, -172, -176, -176, -176, -176, -176, -176, -176,
	-172, -172, -172, -172, 53, -84, 23, 24, -85, -173,
	-29, -61, -108, 57, 60, -28, 41, -89, 138, -50,
	-92, -95, -74, -39, -40, -40, -39, -40, 40, 40,
	40, 45, 40, 45, 40, -47, -114, -173, -173, -2,
	-53, 48, 120, 49, -172, -116, -89, -38, -50, -96,
	-36, -137, 105, 54, -155, -154, 188, 146, 28, -136,
	-137, 63, -169, 200, 174, 105, 78, 226, 56, 57,
	-153, -109, -146, -147, -156, -157, 123, 122, -148, 127,
	126, 125, 117, 27, -152, -138, 191, -131, 52, -131,
	-131, -131, -131, -136, 200, 174, -136, -136, -136, 52,
	52, -131, -131, -131, -140, 52, 225, -140, -140, -141,
	52, -141, -109, -115, -106, -155, 22, -112, 51, -50,
	-165, 222, -166, 226, 86, -102, 115, 112, 113, -162,
	111, 188, 174, 63, 28, 14, 214, 138, 225, 226,
	139, -50, -120, -50, -120, 36, -36, -36, -66, 65,
	70, 66, 67, -36, -36, -60, -67, -70, -73, 61,
	88, 86, 87, 72, -60, -60, -60, -60, -60, -60,
	-60, -60, -60, -60, -60, -60, -60, -60, -60, -121,
	226, 56, 226, -59, -59, -108, -34, 20, -33, -35,
	95, -36, -114, -109, 53, -173, -33, -33, -36, -36,
	-33, -27, -75, -76, 74, -108, -173, -33, -34, -33,
	-33, -83, -86, -97, 18, 10, 32, 32, -33, -58,
	29, 32, -2, -172, -172, -54, 53, 11, 78, -43,
	-42, 50, 51, -44, 50, -42, 40, 40, -173, 117,
	117, 117, -90, -108, -54, -54, 226, 56, 103, -154,
	53, 57, 78, -169, -136, -137, -169, 226, 56, 29,
	226, 56, 52, -112, 52, 27, -148, 226, 226, -148,
	-148, 226, -151, -142, -132, -134, -143, -144, -133, -136,
	-137, 65, 70, 28, 50, 188, 123, 27, 122, 63,
	-139, 192, 57, -136, -136, -137, -137, -137, -137, -145,
	56, -145, 57, -140, 57, 107, 50, -108, -120, -164,
	-163, -109, -50, -119, -168, 144, 124, 125, 128, 127,
	226, 117, 27, 123, 126, 138, 122, -168, 144, -103,
	-104, 119, 21, 117, 27, 138, -120, 37, 65, 66,
	67, -67, -60, -60, -60, -32, 133, 69, -173, -173,
	-33, 53, -111, -110, 21, -108, 56, 107, -172, -36,
	-173, -173, 53, 51, 21, -173, -33, -78, -76, 76,
	-36, -173, -173, -173, -173, -173, -50, -37, 10, -91,
	50, -92, -69, -71, -70, -172, -2, -87, -108, -90,
	-81, -95, -36, -36, -36, 52, -36, -172, -172, -172,
	-173, 53, -81, -154, 57, 226, 56, 103, -159, -158,
	-108, 52, -159, 226, 226, 226, 226, 123, 122, 128,
	65, 56, 57, 58, 65, -135, 206, 64, 203, 8,
	27, 27, 56, 54, -137, -137, 54, 53, 54, 53,
	54, 53, -109, -50, 53, 78, -119, -108, -119, -108,
	-50, -119, -108, -32, 69, -60, -60, -173, -35, -110,
	95, -115, -34, -124, 103, 171, 132, 169, 165, 185,
	176, 190, 167, 191, -121, -124, 219, -81, 77, -36,
	75, -54, -38, 26, -91, 53, -173, -173, -173, 53,
	107, -173, -85, -88, -108, -88, -88, -88, -117, -108,
	-85, 54, 53, -131, 23, 24, -159, 54, 27, -148,
	27, 52, 52, -135, -136, 56, -136, 57, 57, -120,
	-163, -153, 56, 57, 52, 25, -60, 107, -173, -173,
	-131, -131, -131, -141, -131, 159, -131, 159, -173, -173,
	-172, -31, 217, -36, -79, 12, 27, -71, 32, -2,
	-172, -108, -108, 53, 54, -173, -173, -173, -53, -133,
	-112, -158, 54, 54, 57, 54, -137, -137, 54, 54,
	-88, -172, 95, -136, 226, -60, -173, 56, -80, 13,
	15, 8, -69, -2, 107, -108, -133, 54, 54, -160,
	-161, 138, -30, 88, 222, -36, -68, -92, -173, -108,
	-167, -173, 53, -108, -173, 220, 47, 223, -165, -161,
	32, 37, 221, 224, 140, 37, 141, 222, -172, 223,
	-60, 137, 224, -173, -173,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	507, 0, 282, 282, 282, 282, 282, 0, 576, 559,
	0, 0, 0, 0, 268, 272, 273, 0, 275, 276,
	761, 761, 761, 761, 761, 0, 31, 32, 759, 1,
	3, 515, 0, 0, 286, 289, 284, 559, 0, 0,
	0, 46, 0, 557, 0, 749, 0, 750, 557, 577,
	578, 581, 582, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 751, 752, 753, 754, 755, 756,
	757, 758, 0, 0, 560, 0, 555, 555, 0, 555,
	0, 243, 353, 585, 586, 749, 750, 0, 0, 0,
	0, 762, 762, 762, 762, 0, 762, 762, 261, 263,
	264, 265, 266, 762, 269, 270, 271, 274, 277, 278,
	279, 280, 281, 25, 519, 0, 0, 507, 27, 0,
	282, 287, 288, 292, 290, 291, 283, 0, 0, 311,
	313, 314, 315, 334, 0, 336, 0, 0, 38, 42,
	0, 543, -2, -2, 0, 0, 583, 584, -2, 685,
	-2, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	0, 0, 64, 0, 489, 0, -2, -2, 0, 0,
	0, 762, 0, 53, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 242, 0, 244, 762, 762, 762, 762,
	762, 762, 762, 762, 253, 763, 764, 254, 255, 256,
	762, 762, 258, 259, 0, 267, 26, 760, 21, 0,
	0, 516, 361, 0, 366, 368, 0, 403, 404, 405,
	406, 407, 0, 0, 0, 0, 0, 0, 0, 430,
	431, 432, 433, 492, 493, 494, 495, 496, 497, 498,
	499, 370, 371, 489, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 480, 0, 454, 454, 454, 454, 454,
	454, 454, 454, 0, 0, 0, 0, 508, 509, 512,
	515, 25, 289, 0, 294, 293, 285, 40, 0, 352,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 344,
	0, 0, 0, 0, 335, 0, 25, 0, 355, 718,
	337, 0, 339, 340, 40, 0, 0, 36, 37, 0,
	43, 0, 155, 550, 551, 552, 548, 0, 149, 0,
	68, 126, 79, 80, 119, 82, 119, 119, 119, 119,
	149, 149, 149, 149, 110, 111, 112, 113, 114, 0,
	0, 97, 119, 119, 119, 101, 83, 84, 85, 86,
	87, 88, 89, 90, 121, 121, 121, 123, 123, 0,
	149, 0, 579, 50, 0, 56, 0, 61, 0, 219,
	0, 238, 556, 762, 0, 762, 354, 587, 588, 245,
	246, 247, 248, 249, 250, 251, 252, 257, 260, 262,
	520, 0, 0, 0, 0, 0, 0, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 388, 389, 390,
	391, 392, 393, 394, 367, 0, 381, 0, 0, 0,
	423, 424, 425, 426, 427, 428, 0, 296, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 292, 0, 481,
	0, 446, 0, 447, 448, 449, 450, 451, 452, 453,
	0, 296, 0, 0, 0, 511, 513, 514, 519, 28,
	292, 0, 500, 0, 0, 0, 295, 0, 0, 351,
	359, 540, 0, 312, 330, 332, 0, 327, 342, 343,
	345, 0, 347, 0, 349, 350, 316, 317, 400, 25,
	318, 0, 0, 0, 0, 338, 359, 359, 39, 544,
	545, 546, 0, 47, 63, 191, 593, 732, 149, 198,
	199, 687, 202, 686, 685, 598, 0, 205, 206, 207,
	208, 209, 65, 66, 0, 0, 719, 0, 0, 698,
	730, 0, 183, 184, 67, 128, 127, 81, 0, 149,
	149, 104, 105, 155, 0, 0, 155, 155, 155, 0,
	0, 98, 99, 100, 91, 0, 121, 93, 94, 95,
	0, 96, 490, 0, -2, 48, 558, 0, 0, 762,
	52, 0, 54, 55, 0, 761, 0, 0, 571, 220,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	0, 237, 239, 762, 241, 0, 362, 363, 365, 382,
	0, 384, 386, 517, 518, 372, 373, 397, 398, 399,
	0, 0, 0, 0, 395, 377, 0, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 422,
	465, 466, 0, 420, 421, 429, 0, 0, 297, 298,
	300, 304, 0, 490, 0, 538, 0, 0, 0, 0,
	0, 0, 487, 484, 0, 0, 455, 0, 0, 0,
	0, 510, 22, 0, 553, 554, 501, 502, 309, 532,
	0, 0, -2, 0, 0, 507, 0, 0, 0, 324,
	331, 0, 0, 325, 0, 326, 346, 348, -2, 0,
	0, 0, 0, 322, 507, 35, 156, 157, 158, 192,
	149, 194, 0, 196, 197, 200, 201, 150, 151, 0,
	203, 204, 0, 0, 0, 176, 0, 179, 180, 0,
	0, 0, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 131, 0, 0, 0, 148, 0, 161, 163, 0,
	78, 129, 0, 155, 155, 106, 107, 108, 109, 0,
	117, 0, 0, 92, 0, 0, 0, 580, 51, 57,
	58, 0, 62, 212, 761, 0, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 761, 0, 0,
	761, 572, 573, 574, 575, 0, 240, 521, 383, 385,
	387, 374, 395, 378, 0, 375, 0, 0, 369, 434,
	0, 0, 301, 305, 0, 307, 308, 0, 296, 402,
	437, 438, 0, 0, 0, 0, 507, 0, 485, 0,
	0, 445, 456, 457, 458, 459, 23, 359, 0, 29,
	0, 532, 522, 534, 536, 0, 25, 0, 528, 0,
	515, 541, 360, 542, 328, 0, 333, 0, 0, 0,
	336, 0, 515, 193, 195, 152, 153, 154, 0, 185,
	119, 0, 0, 177, 178, 181, 182, 0, 173, 0,
	132, 134, 135, 136, 137, 138, 139, 141, 142, 0,
	160, 162, 165, 120, 102, 103, 149, 0, 149, 0,
	124, 0, 491, 762, 0, 0, 213, 0, 214, 216,
	217, 218, 0, 376, 0, 396, 379, 435, 299, 306,
	302, 0, 0, 0, 119, 119, 470, 119, 123, 473,
	119, 475, 119, 478, 0, 0, 0, 482, 444, 488,
	0, 503, 310, 0, 30, 0, 537, -2, 0, 0,
	0, 41, 33, 0, 320, 0, 0, 0, 355, 323,
	34, 164, 0, 187, 188, 189, 0, 171, 172, 174,
	175, 0, 0, 146, 155, 118, 155, 0, 0, 49,
	59, 60, 210, 211, 0, 0, 380, 0, 436, 439,
	467, 149, 471, 472, 474, 476, 477, 479, 441, 440,
	0, 0, 0, 486, 505, 0, 0, 535, 0, -2,
	0, 530, 529, 0, 329, 356, 357, 358, 319, 166,
	164, 186, 169, 140, 0, 144, 115, 116, 122, 125,
	0, 0, 303, 468, 469, 460, 443, 483, 24, 0,
	0, 0, 525, 25, 0, 321, 167, 143, 53, 0,
	233, 0, 0, 0, 0, 506, 504, 533, -2, 531,
	56, 232, 0, 0, 442, 0, 0, 0, 215, 234,
	0, 461, 0, 464, 0, 462, 0, 0, 0, 0,
	0, 0, 463, 235, 236,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	52, 54, 95, 93, 53, 94, 107, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 227,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 106, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:300
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:305
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:306
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:310
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:332
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:340
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:344
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:352
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:358
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:362
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:368
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:372
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:379
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:391
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:413
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:419
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:423
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:428
		{
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:429
		{
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:433
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:437
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:442
		{
			yyVAL.partitions = nil
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:446
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:456
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:462
		{
			yyVAL.str = SessionStr
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:466
		{
			yyVAL.str = GlobalStr
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:472
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = yyDollar[1].ddl
			yyDollar[1].ddl.Table = yyDollar[4].tableName
			yyDollar[1].ddl.LikeTable = yyDollar[4].tableName
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &DDL{Action: CreateDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}, TableSpec: &TableSpec{Option: yyDollar[5].TableOption}}
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:487
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:509
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:513
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:524
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:540
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:546
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:552
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:557
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName, Table: yyDollar[6].tableName, LikeTable: yyDollar[6].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:564
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Option = yyDollar[4].TableOption
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:580
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:586
		{

			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colName.Name, Type: yyDollar[2].columnType, options: yyDollar[3].columnOptions}
			yyVAL.columnDefinition.mergeOptions()
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:593
		{
			yyVAL.columnOptions = []columnOption{}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:597
		{
			yyVAL.columnOptions = append(yyDollar[1].columnOptions, yyDollar[2].columnOption)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:603
		{
			yyVAL.columnOption = columnOption{key: "null_opt", value: yyDollar[1].boolVal}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:607
		{
			yyVAL.columnOption = columnOption{key: "column_default_opt", value: yyDollar[1].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.columnOption = columnOption{key: "on_update_opt", value: yyDollar[1].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:615
		{
			yyVAL.columnOption = columnOption{key: "auto_increment_opt", value: yyDollar[1].boolVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:619
		{
			yyVAL.columnOption = columnOption{key: "column_key_opt", value: yyDollar[1].colKeyOpt}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:623
		{
			yyVAL.columnOption = columnOption{key: "column_comment_opt", value: yyDollar[1].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.columnOption = columnOption{key: "charset_opt", value: yyDollar[1].str}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.columnOption = columnOption{key: "collate_opt", value: yyDollar[1].str}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:640
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:823
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:828
		{
			yyVAL.optVal = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:837
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:841
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:849
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:853
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:859
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:867
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:876
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:886
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:894
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:899
		{
			yyVAL.optVal = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:907
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:923
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:927
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:931
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:941
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:945
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.optVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:956
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:961
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:970
		{
			yyVAL.str = ""
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:974
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:978
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:982
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:986
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:990
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:995
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:999
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1012
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1016
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1020
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1024
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1043
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1047
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1051
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1055
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[4].indexColumns, Using: yyDollar[2].colIdent}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1059
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1063
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1069
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1073
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("UNIQUE"), Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1077
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("UNIQUE"), Unique: true}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1081
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("FOREIGN")}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1100
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1108
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1143
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1156
		{
			yyVAL.TableOption = TableOption{}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.TableOption = yyDollar[1].TableOption
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1164
		{
			yyVAL.TableOption = yyDollar[1].TableOption.Merge(yyDollar[2].TableOption)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1168
		{
			yyVAL.TableOption = yyDollar[1].TableOption.Merge(yyDollar[3].TableOption)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			yyVAL.TableOption = TableOption{AutoIncrement: IntegerPtr(yyDollar[2].bytes)}

		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1182
		{
			yyVAL.TableOption = TableOption{AutoIncrement: IntegerPtr(yyDollar[3].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1186
		{
			yyVAL.TableOption = TableOption{Engine: yyDollar[2].bytes}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.TableOption = TableOption{Charset: []byte(yyDollar[2].str)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.TableOption = TableOption{Charset: []byte(yyDollar[1].str)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.TableOption = TableOption{Collate: []byte(yyDollar[1].str)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.TableOption = TableOption{Collate: []byte(yyDollar[2].str)}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1206
		{
			yyVAL.TableOption = TableOption{Comment: yyDollar[2].bytes}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.TableOption = TableOption{Common: yyDollar[1].bytes}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1216
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1220
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1257
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1261
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1265
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1269
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1282
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1292
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1306
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1325
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1331
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1335
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 235:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1341
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 236:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1345
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1351
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &DDL{Action: DropDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}}
		}
	case 240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1369
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1374
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropViewStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1468
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1472
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1484
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1504
		{
			yyVAL.str = SessionStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1508
		{
			yyVAL.str = GlobalStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &Begin{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &Begin{}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Commit{}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Rollback{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &OtherRead{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1567
		{
			setAllowComments(yylex, true)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1577
		{
			yyVAL.bytes2 = nil
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1587
		{
			yyVAL.str = UnionStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1591
		{
			yyVAL.str = UnionAllStr
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1595
		{
			yyVAL.str = UnionDistinctStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1604
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = SQLCacheStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = DistinctStr
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1626
		{
			yyVAL.str = StraightJoinHint
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1631
		{
			yyVAL.selectExprs = nil
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1635
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1645
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1655
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1659
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1663
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1668
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1676
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1688
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1692
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1698
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1702
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1720
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1726
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1730
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1740
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1746
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1750
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1763
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1767
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1771
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1781
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1783
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1787
		{
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1793
		{
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1795
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1798
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1803
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1824
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1828
		{
			yyVAL.str = JoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1832
		{
			yyVAL.str = JoinStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = StraightJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = LeftJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1848
		{
			yyVAL.str = LeftJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = RightJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = RightJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1862
		{
			yyVAL.str = NaturalJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1866
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1876
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1890
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1895
		{
			yyVAL.indexHints = nil
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1899
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1903
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1907
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1912
		{
			yyVAL.expr = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1916
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1926
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1934
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1938
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1946
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1972
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1976
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1980
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1984
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1988
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1992
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1996
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2004
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2008
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = IsNullStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = IsNotNullStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = IsTrueStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = IsNotTrueStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = IsFalseStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2034
		{
			yyVAL.str = IsNotFalseStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = EqualStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = LessThanStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = GreaterThanStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = LessEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = GreaterEqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = NotEqualStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2069
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2093
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2103
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2197
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2205
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2223
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2227
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2263
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2267
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2271
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2275
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 442:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2295
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2369
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2373
		{
			yyVAL.str = BooleanModeStr
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2377
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 463:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2381
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2385
		{
			yyVAL.str = QueryExpansionStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2405
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2409
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2427
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2443
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2447
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = nil
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = string("")
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2475
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2485
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2500
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2504
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2508
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &NullVal{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2548
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2566
		{
			yyVAL.exprs = nil
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2570
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = nil
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2584
		{
			yyVAL.orderBy = nil
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2598
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2604
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = AscScr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.str = AscScr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.str = DescScr
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2622
		{
			yyVAL.limit = nil
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2626
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2630
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2634
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2639
		{
			yyVAL.str = ""
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2643
		{
			yyVAL.str = ForUpdateStr
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2647
		{
			yyVAL.str = ShareModeStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2673
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2677
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 527:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2681
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2696
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2700
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2705
		{
			yyVAL.updateExprs = nil
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2709
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2719
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2725
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2729
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2735
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2741
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2771
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2777
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2781
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.bytes = []byte("charset")
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &Default{}
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2812
		{
			yyVAL.byt = 0
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.byt = 1
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2817
		{
			yyVAL.empty = struct{}{}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2819
		{
			yyVAL.empty = struct{}{}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2822
		{
			yyVAL.str = ""
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.str = IgnoreStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.empty = struct{}{}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.empty = struct{}{}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2832
		{
			yyVAL.empty = struct{}{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.empty = struct{}{}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2836
		{
			yyVAL.empty = struct{}{}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.empty = struct{}{}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2844
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2846
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2849
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2859
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2862
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2869
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2871
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2875
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			decNesting(yylex)
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3116
		{
			forceEOF(yylex)
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3121
		{
			forceEOF(yylex)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			forceEOF(yylex)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
