// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const SHOW = 57456
const DESCRIBE = 57457
const EXPLAIN = 57458
const DATE = 57459
const ESCAPE = 57460
const REPAIR = 57461
const OPTIMIZE = 57462
const TRUNCATE = 57463
const MAXVALUE = 57464
const PARTITION = 57465
const REORGANIZE = 57466
const LESS = 57467
const THAN = 57468
const PROCEDURE = 57469
const TRIGGER = 57470
const VINDEX = 57471
const VINDEXES = 57472
const STATUS = 57473
const VARIABLES = 57474
const BEGIN = 57475
const START = 57476
const TRANSACTION = 57477
const COMMIT = 57478
const ROLLBACK = 57479
const BIT = 57480
const TINYINT = 57481
const SMALLINT = 57482
const MEDIUMINT = 57483
const INT = 57484
const INTEGER = 57485
const BIGINT = 57486
const INTNUM = 57487
const REAL = 57488
const DOUBLE = 57489
const FLOAT_TYPE = 57490
const DECIMAL = 57491
const NUMERIC = 57492
const TIME = 57493
const TIMESTAMP = 57494
const DATETIME = 57495
const YEAR = 57496
const CHAR = 57497
const VARCHAR = 57498
const BOOL = 57499
const CHARACTER = 57500
const VARBINARY = 57501
const NCHAR = 57502
const TEXT = 57503
const TINYTEXT = 57504
const MEDIUMTEXT = 57505
const LONGTEXT = 57506
const BLOB = 57507
const TINYBLOB = 57508
const MEDIUMBLOB = 57509
const LONGBLOB = 57510
const JSON = 57511
const ENUM = 57512
const NULLX = 57513
const AUTO_INCREMENT = 57514
const APPROXNUM = 57515
const SIGNED = 57516
const UNSIGNED = 57517
const ZEROFILL = 57518
const DATABASES = 57519
const TABLES = 57520
const VITESS_KEYSPACES = 57521
const VITESS_SHARDS = 57522
const VITESS_TABLETS = 57523
const VSCHEMA_TABLES = 57524
const NAMES = 57525
const CHARSET = 57526
const GLOBAL = 57527
const SESSION = 57528
const CURRENT_TIMESTAMP = 57529
const DATABASE = 57530
const CURRENT_DATE = 57531
const CURRENT_TIME = 57532
const LOCALTIME = 57533
const LOCALTIMESTAMP = 57534
const UTC_DATE = 57535
const UTC_TIME = 57536
const UTC_TIMESTAMP = 57537
const REPLACE = 57538
const CONVERT = 57539
const CAST = 57540
const GROUP_CONCAT = 57541
const SEPARATOR = 57542
const MATCH = 57543
const AGAINST = 57544
const BOOLEAN = 57545
const LANGUAGE = 57546
const WITH = 57547
const QUERY = 57548
const EXPANSION = 57549
const UNUSED = 57550

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 217,
	109, 537,
	-2, 533,
	-1, 218,
	109, 538,
	-2, 534,
	-1, 284,
	80, 678,
	-2, 46,
	-1, 285,
	80, 651,
	-2, 47,
	-1, 290,
	80, 638,
	-2, 499,
	-1, 292,
	80, 665,
	-2, 501,
	-1, 656,
	109, 540,
	-2, 536,
	-1, 848,
	5, 28,
	-2, 352,
	-1, 868,
	5, 27,
	-2, 475,
	-1, 1065,
	5, 28,
	-2, 476,
	-1, 1105,
	5, 27,
	-2, 478,
	-1, 1154,
	5, 28,
	-2, 479,
}

const yyPrivate = 57344

const yyLast = 9012

var yyAct = [...]int{

	218, 794, 1145, 745, 601, 714, 222, 985, 492, 247,
	734, 1071, 1010, 215, 986, 791, 772, 491, 3, 749,
	537, 535, 923, 196, 982, 871, 964, 748, 681, 715,
	840, 75, 927, 688, 888, 166, 224, 691, 166, 758,
	786, 914, 877, 289, 703, 425, 190, 747, 431, 782,
	658, 383, 524, 53, 283, 711, 220, 539, 822, 445,
	205, 281, 166, 166, 75, 195, 272, 437, 504, 166,
	52, 75, 1173, 1163, 1171, 1152, 1169, 795, 1162, 690,
	271, 977, 1151, 270, 1059, 389, 158, 160, 161, 1121,
	191, 192, 193, 194, 905, 809, 765, 209, 275, 1083,
	406, 773, 395, 1098, 1015, 1016, 1017, 1054, 1052, 808,
	189, 1168, 1020, 1018, 1132, 458, 457, 467, 468, 460,
	461, 462, 463, 464, 465, 466, 459, 417, 418, 469,
	1170, 1146, 423, 948, 712, 396, 813, 1119, 735, 737,
	57, 386, 155, 156, 156, 807, 606, 600, 887, 886,
	885, 387, 1137, 392, 169, 157, 166, 1068, 166, 481,
	482, 951, 408, 166, 410, 59, 60, 61, 62, 63,
	166, 875, 834, 159, 75, 75, 75, 75, 630, 75,
	75, 760, 449, 401, 746, 760, 75, 1024, 407, 409,
	945, 469, 627, 804, 801, 802, 947, 800, 467, 468,
	460, 461, 462, 463, 464, 465, 466, 459, 442, 899,
	469, 736, 75, 384, 459, 798, 704, 469, 1034, 434,
	811, 814, 773, 444, 444, 874, 550, 979, 23, 24,
	48, 26, 27, 1120, 1118, 965, 597, 1025, 629, 483,
	484, 485, 486, 487, 488, 489, 1133, 42, 1140, 405,
	1019, 665, 28, 433, 1150, 806, 479, 704, 903, 858,
	439, 1089, 397, 967, 399, 663, 664, 662, 762, 805,
	166, 37, 759, 763, 628, 50, 759, 166, 166, 166,
	1088, 757, 756, 75, 852, 918, 851, 946, 75, 944,
	443, 442, 853, 917, 810, 969, 906, 973, 50, 968,
	1156, 966, 443, 442, 1101, 812, 971, 444, 661, 443,
	442, 1086, 682, 275, 683, 970, 981, 915, 385, 444,
	972, 974, 443, 442, 1012, 766, 444, 506, 507, 508,
	509, 510, 511, 512, 30, 31, 33, 32, 35, 444,
	443, 442, 154, 435, 549, 648, 650, 651, 900, 892,
	649, 633, 634, 36, 43, 44, 797, 444, 45, 46,
	34, 831, 832, 833, 684, 211, 462, 463, 464, 465,
	466, 459, 38, 39, 469, 40, 41, 458, 457, 467,
	468, 460, 461, 462, 463, 464, 465, 466, 459, 75,
	391, 469, 166, 166, 75, 609, 166, 443, 442, 598,
	166, 596, 166, 269, 75, 75, 75, 75, 75, 75,
	75, 75, 1159, 424, 444, 1109, 1143, 424, 75, 75,
	403, 841, 166, 457, 467, 468, 460, 461, 462, 463,
	464, 465, 466, 459, 398, 49, 469, 75, 1109, 424,
	1125, 166, 384, 248, 47, 614, 1124, 75, 460, 461,
	462, 463, 464, 465, 466, 459, 983, 635, 469, 872,
	612, 21, 659, 1109, 1110, 657, 1021, 413, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 1080, 1079, 1005, 424, 1067, 424, 660,
	75, 47, 954, 656, 1031, 1030, 637, 1027, 1028, 201,
	1027, 1026, 846, 424, 75, 276, 652, 872, 654, 23,
	521, 424, 695, 693, 424, 557, 556, 200, 693, 166,
	520, 1063, 166, 166, 166, 166, 166, 716, 546, 521,
	873, 286, 1033, 866, 166, 846, 867, 166, 685, 686,
	1029, 166, 873, 54, 521, 166, 166, 23, 708, 75,
	893, 846, 548, 23, 695, 935, 50, 75, 275, 275,
	275, 275, 275, 428, 432, 631, 741, 636, 701, 547,
	1014, 545, 521, 275, 1104, 696, 697, 50, 1093, 700,
	450, 275, 846, 933, 872, 731, 774, 775, 776, 720,
	721, 767, 723, 707, 50, 709, 710, 75, 739, 740,
	50, 166, 719, 743, 787, 722, 999, 166, 896, 753,
	75, 166, 75, 783, 493, 878, 879, 412, 412, 412,
	412, 502, 412, 412, 692, 694, 778, 777, 202, 412,
	65, 602, 792, 983, 935, 919, 788, 881, 706, 610,
	421, 643, 784, 785, 789, 47, 934, 819, 884, 883,
	725, 939, 936, 929, 930, 937, 932, 931, 724, 728,
	478, 726, 933, 480, 729, 1167, 727, 938, 733, 206,
	207, 1161, 659, 941, 656, 50, 950, 837, 838, 839,
	823, 824, 526, 529, 530, 531, 527, 1166, 528, 532,
	490, 829, 494, 495, 496, 497, 498, 499, 500, 660,
	503, 505, 505, 505, 505, 505, 505, 505, 505, 513,
	514, 515, 516, 836, 730, 828, 530, 531, 910, 555,
	536, 404, 830, 438, 246, 934, 426, 902, 1142, 868,
	939, 936, 929, 930, 937, 932, 931, 436, 427, 75,
	1141, 1102, 897, 1061, 1094, 790, 938, 857, 608, 75,
	286, 534, 928, 203, 204, 73, 438, 197, 1130, 198,
	54, 1129, 827, 1096, 873, 882, 890, 891, 894, 845,
	826, 411, 440, 1134, 1084, 626, 909, 56, 911, 912,
	913, 855, 58, 544, 51, 907, 908, 1, 288, 796,
	922, 803, 1144, 75, 75, 390, 75, 898, 1009, 166,
	755, 237, 236, 239, 240, 241, 242, 382, 645, 646,
	238, 243, 64, 754, 1117, 1082, 761, 843, 75, 904,
	916, 844, 764, 1013, 1139, 901, 166, 560, 848, 849,
	850, 561, 412, 854, 940, 75, 559, 412, 860, 563,
	861, 862, 863, 864, 562, 558, 926, 412, 412, 412,
	412, 412, 412, 412, 412, 960, 961, 177, 282, 533,
	493, 412, 412, 698, 699, 551, 441, 67, 958, 957,
	75, 75, 984, 716, 943, 942, 799, 987, 477, 716,
	976, 975, 825, 287, 963, 990, 632, 989, 430, 1128,
	768, 769, 770, 771, 75, 1095, 75, 75, 288, 288,
	288, 288, 994, 288, 288, 992, 779, 780, 781, 978,
	288, 1022, 1023, 856, 501, 1008, 744, 655, 702, 656,
	166, 1007, 223, 647, 47, 993, 235, 232, 234, 75,
	233, 638, 865, 451, 221, 213, 447, 274, 494, 517,
	525, 523, 75, 166, 1006, 522, 414, 415, 416, 75,
	419, 420, 75, 279, 880, 166, 876, 422, 273, 953,
	1058, 1131, 642, 25, 55, 276, 276, 276, 276, 276,
	208, 19, 18, 1045, 1035, 17, 1043, 20, 962, 1042,
	536, 16, 738, 15, 14, 29, 13, 1037, 276, 12,
	1040, 275, 11, 10, 820, 821, 9, 432, 8, 7,
	75, 6, 75, 75, 75, 166, 75, 288, 75, 1062,
	1050, 5, 552, 1073, 1074, 1075, 286, 1070, 4, 199,
	22, 1004, 2, 0, 750, 1076, 0, 894, 0, 0,
	1078, 0, 0, 75, 75, 75, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 412, 1092, 412, 1091, 0, 0, 847,
	0, 0, 0, 0, 750, 1097, 0, 0, 75, 75,
	859, 1099, 0, 987, 0, 0, 0, 0, 1103, 0,
	0, 75, 0, 0, 1105, 0, 0, 1114, 0, 1122,
	1044, 1123, 0, 1116, 75, 1115, 0, 1046, 655, 835,
	0, 0, 0, 0, 0, 1126, 0, 0, 1055, 1056,
	75, 0, 1135, 288, 987, 0, 0, 0, 288, 0,
	0, 1064, 1065, 1066, 1136, 1069, 0, 0, 288, 288,
	288, 288, 288, 288, 288, 288, 0, 0, 75, 1148,
	1153, 716, 288, 288, 0, 0, 0, 75, 1157, 0,
	0, 0, 0, 0, 0, 869, 870, 0, 0, 1164,
	599, 639, 1165, 0, 0, 605, 0, 0, 0, 0,
	0, 447, 0, 0, 288, 615, 616, 617, 618, 619,
	620, 621, 622, 0, 0, 0, 1174, 0, 429, 623,
	624, 1100, 526, 529, 530, 531, 527, 0, 528, 532,
	0, 0, 878, 879, 0, 0, 1111, 1112, 1113, 0,
	0, 0, 0, 0, 687, 0, 750, 0, 0, 277,
	0, 0, 0, 164, 980, 0, 188, 0, 705, 0,
	0, 0, 0, 0, 0, 0, 0, 412, 0, 995,
	996, 0, 0, 0, 998, 717, 0, 1000, 212, 0,
	164, 164, 0, 0, 163, 0, 0, 164, 0, 0,
	0, 412, 0, 924, 1149, 0, 0, 0, 0, 1154,
	0, 0, 0, 288, 0, 0, 0, 1158, 0, 175,
	0, 288, 280, 0, 0, 0, 0, 0, 388, 0,
	0, 1047, 1048, 0, 1049, 0, 0, 1051, 0, 1053,
	0, 0, 956, 185, 0, 0, 0, 1176, 1177, 0,
	0, 988, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 0, 0, 0, 0, 0, 0, 1001,
	1002, 1003, 0, 0, 288, 0, 288, 1081, 0, 0,
	0, 0, 0, 997, 164, 0, 164, 1060, 0, 0,
	0, 164, 0, 170, 493, 288, 0, 0, 164, 172,
	0, 750, 0, 750, 424, 178, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 0, 394, 0, 0,
	0, 816, 400, 818, 0, 0, 0, 0, 0, 402,
	0, 176, 0, 0, 180, 0, 0, 0, 276, 0,
	458, 457, 467, 468, 460, 461, 462, 463, 464, 465,
	466, 459, 0, 0, 469, 0, 0, 0, 0, 956,
	0, 1057, 171, 458, 457, 467, 468, 460, 461, 462,
	463, 464, 465, 466, 459, 0, 0, 469, 0, 0,
	0, 173, 179, 181, 182, 183, 184, 0, 0, 187,
	186, 0, 0, 0, 0, 0, 0, 959, 164, 0,
	0, 0, 0, 889, 0, 164, 541, 164, 0, 0,
	0, 0, 0, 288, 0, 750, 412, 458, 457, 467,
	468, 460, 461, 462, 463, 464, 465, 466, 459, 519,
	0, 469, 0, 0, 0, 1147, 493, 0, 543, 0,
	0, 924, 750, 842, 0, 0, 0, 988, 0, 0,
	1106, 0, 0, 0, 0, 0, 0, 920, 288, 0,
	288, 0, 0, 458, 457, 467, 468, 460, 461, 462,
	463, 464, 465, 466, 459, 0, 0, 469, 1127, 0,
	0, 0, 288, 0, 0, 0, 0, 0, 988, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 164, 0, 0, 164, 0, 0, 0, 164, 949,
	613, 717, 0, 0, 991, 889, 0, 717, 0, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 603, 604, 0, 1172, 607, 0, 0, 288, 611,
	288, 1011, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1036, 0, 0, 0, 0, 0, 0,
	644, 0, 0, 0, 0, 0, 1038, 0, 0, 0,
	0, 0, 0, 1041, 0, 0, 288, 0, 0, 212,
	0, 0, 0, 0, 212, 212, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 212, 212, 212, 0, 164, 0, 718,
	164, 164, 164, 164, 164, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 1072, 164, 1072, 1072, 1072, 541,
	1077, 0, 288, 164, 164, 0, 0, 0, 713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 288, 288,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 0, 1107, 1108, 0, 164, 0, 114, 0, 164,
	0, 446, 0, 0, 1090, 1011, 91, 0, 0, 0,
	0, 101, 0, 103, 0, 0, 125, 110, 1072, 613,
	793, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	817, 212, 0, 0, 1138, 74, 0, 448, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 443,
	442, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 1155, 0, 0, 0, 444, 0, 0, 0,
	0, 1160, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 117, 0, 0, 128, 96, 95,
	0, 0, 0, 87, 0, 122, 115, 140, 0, 116,
	121, 104, 132, 118, 139, 168, 146, 130, 145, 77,
	129, 138, 86, 123, 79, 136, 127, 108, 98, 99,
	78, 0, 120, 90, 94, 89, 113, 133, 134, 88,
	152, 82, 144, 81, 83, 143, 112, 131, 137, 109,
	106, 80, 135, 107, 105, 100, 92, 0, 0, 0,
	126, 141, 153, 0, 0, 147, 148, 149, 150, 111,
	84, 97, 124, 0, 0, 0, 0, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	102, 151, 119, 93, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 925, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 0,
	578, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 453, 0, 456,
	0, 718, 0, 0, 613, 470, 471, 472, 473, 474,
	475, 476, 0, 454, 455, 452, 458, 457, 467, 468,
	460, 461, 462, 463, 464, 465, 466, 459, 0, 0,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 566, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 0, 579, 0, 0, 0, 0, 1032,
	0, 0, 0, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 585, 586, 587, 588,
	589, 590, 1039, 591, 592, 593, 594, 595, 580, 581,
	582, 583, 564, 565, 0, 0, 567, 0, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 371, 361, 0, 334, 373, 312, 326, 381, 327,
	328, 355, 300, 342, 114, 324, 0, 315, 295, 321,
	296, 313, 336, 91, 339, 311, 363, 345, 101, 379,
	103, 350, 0, 125, 110, 0, 0, 338, 365, 340,
	360, 333, 356, 305, 349, 374, 325, 353, 375, 0,
	0, 0, 74, 0, 751, 752, 0, 0, 0, 0,
	0, 85, 0, 352, 370, 323, 354, 294, 351, 0,
	298, 301, 380, 368, 318, 319, 895, 0, 0, 0,
	0, 0, 0, 337, 341, 357, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 348, 0, 0,
	0, 302, 299, 0, 335, 0, 0, 0, 304, 0,
	317, 358, 0, 293, 366, 332, 167, 369, 330, 329,
	372, 117, 0, 718, 128, 96, 95, 364, 314, 322,
	87, 320, 122, 115, 140, 347, 116, 121, 104, 132,
	118, 139, 168, 146, 130, 145, 77, 129, 138, 86,
	123, 79, 136, 127, 108, 98, 99, 78, 0, 120,
	90, 94, 89, 113, 133, 134, 88, 152, 82, 144,
	81, 83, 143, 112, 131, 137, 109, 106, 80, 135,
	107, 105, 100, 92, 0, 297, 0, 126, 141, 153,
	310, 367, 147, 148, 149, 150, 111, 84, 97, 124,
	308, 309, 306, 307, 343, 344, 376, 377, 378, 359,
	303, 0, 0, 362, 346, 76, 0, 102, 151, 119,
	93, 142, 371, 361, 0, 334, 373, 312, 326, 381,
	327, 328, 355, 300, 342, 114, 324, 0, 315, 295,
	321, 296, 313, 336, 91, 339, 311, 363, 345, 101,
	379, 103, 350, 0, 125, 110, 0, 0, 338, 365,
	340, 360, 333, 356, 305, 349, 374, 325, 353, 375,
	0, 0, 0, 74, 0, 751, 752, 0, 0, 0,
	0, 0, 85, 0, 352, 370, 323, 354, 294, 351,
	0, 298, 301, 380, 368, 318, 319, 0, 0, 0,
	0, 0, 0, 0, 337, 341, 357, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 348, 0,
	0, 0, 302, 299, 0, 335, 0, 0, 0, 304,
	0, 317, 358, 0, 293, 366, 332, 167, 369, 330,
	329, 372, 117, 0, 0, 128, 96, 95, 364, 314,
	322, 87, 320, 122, 115, 140, 347, 116, 121, 104,
	132, 118, 139, 168, 146, 130, 145, 77, 129, 138,
	86, 123, 79, 136, 127, 108, 98, 99, 78, 0,
	120, 90, 94, 89, 113, 133, 134, 88, 152, 82,
	144, 81, 83, 143, 112, 131, 137, 109, 106, 80,
	135, 107, 105, 100, 92, 0, 297, 0, 126, 141,
	153, 310, 367, 147, 148, 149, 150, 111, 84, 97,
	124, 308, 309, 306, 307, 343, 344, 376, 377, 378,
	359, 303, 0, 0, 362, 346, 76, 0, 102, 151,
	119, 93, 142, 371, 361, 0, 334, 373, 312, 326,
	381, 327, 328, 355, 300, 342, 114, 324, 0, 315,
	295, 321, 296, 313, 336, 91, 339, 311, 363, 345,
	101, 379, 103, 350, 0, 125, 110, 0, 0, 338,
	365, 340, 360, 333, 356, 305, 349, 374, 325, 353,
	375, 50, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 352, 370, 323, 354, 294,
	351, 0, 298, 301, 380, 368, 318, 319, 0, 0,
	0, 0, 0, 0, 0, 337, 341, 357, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 348,
	0, 0, 0, 302, 299, 0, 335, 0, 0, 0,
	304, 0, 317, 358, 0, 293, 366, 332, 167, 369,
	330, 329, 372, 117, 0, 0, 128, 96, 95, 364,
	314, 322, 87, 320, 122, 115, 140, 347, 116, 121,
	104, 132, 118, 139, 168, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 297, 0, 126,
	141, 153, 310, 367, 147, 148, 149, 150, 111, 84,
	97, 124, 308, 309, 306, 307, 343, 344, 376, 377,
	378, 359, 303, 0, 0, 362, 346, 76, 0, 102,
	151, 119, 93, 142, 371, 361, 0, 334, 373, 312,
	326, 381, 327, 328, 355, 300, 342, 114, 324, 0,
	315, 295, 321, 296, 313, 336, 91, 339, 311, 363,
	345, 101, 379, 103, 350, 0, 125, 110, 0, 0,
	338, 365, 340, 360, 333, 356, 305, 349, 374, 325,
	353, 375, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 352, 370, 323, 354,
	294, 351, 0, 298, 301, 380, 368, 318, 319, 0,
	0, 0, 0, 0, 0, 0, 337, 341, 357, 331,
	0, 0, 0, 0, 0, 0, 955, 0, 316, 0,
	348, 0, 0, 0, 302, 299, 0, 335, 0, 0,
	0, 304, 0, 317, 358, 0, 293, 366, 332, 167,
	369, 330, 329, 372, 117, 0, 0, 128, 96, 95,
	364, 314, 322, 87, 320, 122, 115, 140, 347, 116,
	121, 104, 132, 118, 139, 168, 146, 130, 145, 77,
	129, 138, 86, 123, 79, 136, 127, 108, 98, 99,
	78, 0, 120, 90, 94, 89, 113, 133, 134, 88,
	152, 82, 144, 81, 83, 143, 112, 131, 137, 109,
	106, 80, 135, 107, 105, 100, 92, 0, 297, 0,
	126, 141, 153, 310, 367, 147, 148, 149, 150, 111,
	84, 97, 124, 308, 309, 306, 307, 343, 344, 376,
	377, 378, 359, 303, 0, 0, 362, 346, 76, 0,
	102, 151, 119, 93, 142, 371, 361, 0, 334, 373,
	312, 326, 381, 327, 328, 355, 300, 342, 114, 324,
	0, 315, 295, 321, 296, 313, 336, 91, 339, 311,
	363, 345, 101, 379, 103, 350, 0, 125, 110, 0,
	0, 338, 365, 340, 360, 333, 356, 305, 349, 374,
	325, 353, 375, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 352, 370, 323,
	354, 294, 351, 0, 298, 301, 380, 368, 318, 319,
	0, 0, 0, 0, 0, 0, 0, 337, 341, 357,
	331, 0, 0, 0, 0, 0, 0, 653, 0, 316,
	0, 348, 0, 0, 0, 302, 299, 0, 335, 0,
	0, 0, 304, 0, 317, 358, 0, 293, 366, 332,
	167, 369, 330, 329, 372, 117, 0, 0, 128, 96,
	95, 364, 314, 322, 87, 320, 122, 115, 140, 347,
	116, 121, 104, 132, 118, 139, 168, 146, 130, 145,
	77, 129, 138, 86, 123, 79, 136, 127, 108, 98,
	99, 78, 0, 120, 90, 94, 89, 113, 133, 134,
	88, 152, 82, 144, 81, 83, 143, 112, 131, 137,
	109, 106, 80, 135, 107, 105, 100, 92, 0, 297,
	0, 126, 141, 153, 310, 367, 147, 148, 149, 150,
	111, 84, 97, 124, 308, 309, 306, 307, 343, 344,
	376, 377, 378, 359, 303, 0, 0, 362, 346, 76,
	0, 102, 151, 119, 93, 142, 371, 361, 0, 334,
	373, 312, 326, 381, 327, 328, 355, 300, 342, 114,
	324, 0, 315, 295, 321, 296, 313, 336, 91, 339,
	311, 363, 345, 101, 379, 103, 350, 0, 125, 110,
	0, 0, 338, 365, 340, 360, 333, 356, 305, 349,
	374, 325, 353, 375, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 352, 370,
	323, 354, 294, 351, 0, 298, 301, 380, 368, 318,
	319, 0, 0, 0, 0, 0, 0, 0, 337, 341,
	357, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 348, 0, 0, 0, 302, 299, 0, 335,
	0, 0, 0, 304, 0, 317, 358, 0, 293, 366,
	332, 167, 369, 330, 329, 372, 117, 0, 0, 128,
	96, 95, 364, 314, 322, 87, 320, 122, 115, 140,
	347, 116, 121, 104, 132, 118, 139, 168, 146, 130,
	145, 77, 129, 138, 86, 123, 79, 136, 127, 108,
	98, 99, 78, 0, 120, 90, 94, 89, 113, 133,
	134, 88, 152, 82, 144, 81, 83, 143, 112, 131,
	137, 109, 106, 80, 135, 107, 105, 100, 92, 0,
	297, 0, 126, 141, 153, 310, 367, 147, 148, 149,
	150, 111, 84, 97, 124, 308, 309, 306, 307, 343,
	344, 376, 377, 378, 359, 303, 0, 0, 362, 346,
	76, 0, 102, 151, 119, 93, 142, 371, 361, 0,
	334, 373, 312, 326, 381, 327, 328, 355, 300, 342,
	114, 324, 0, 315, 295, 321, 296, 313, 336, 91,
	339, 311, 363, 345, 101, 379, 103, 350, 0, 125,
	110, 0, 0, 338, 365, 340, 360, 333, 356, 305,
	349, 374, 325, 353, 375, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 352,
	370, 323, 354, 294, 351, 0, 298, 301, 380, 368,
	318, 319, 0, 0, 0, 0, 0, 0, 0, 337,
	341, 357, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 348, 0, 0, 0, 302, 299, 0,
	335, 0, 0, 0, 304, 0, 317, 358, 0, 293,
	366, 332, 167, 369, 330, 329, 372, 117, 0, 0,
	128, 96, 95, 364, 314, 322, 87, 320, 122, 115,
	140, 347, 116, 121, 104, 132, 118, 139, 168, 146,
	130, 145, 77, 129, 138, 86, 123, 79, 136, 127,
	108, 98, 99, 78, 0, 120, 90, 94, 89, 113,
	133, 134, 88, 152, 82, 144, 81, 83, 143, 112,
	131, 137, 109, 106, 80, 135, 107, 105, 100, 92,
	0, 297, 0, 126, 141, 153, 310, 367, 147, 148,
	149, 150, 111, 84, 97, 124, 308, 309, 306, 307,
	343, 344, 376, 377, 378, 359, 303, 0, 0, 362,
	346, 76, 0, 102, 151, 119, 93, 142, 371, 361,
	0, 334, 373, 312, 326, 381, 327, 328, 355, 300,
	342, 114, 324, 0, 315, 295, 321, 296, 313, 336,
	91, 339, 311, 363, 345, 101, 379, 103, 350, 0,
	125, 110, 0, 0, 338, 365, 340, 360, 333, 356,
	305, 349, 374, 325, 353, 375, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	352, 370, 323, 354, 294, 351, 0, 298, 301, 380,
	368, 318, 319, 0, 0, 0, 0, 0, 0, 0,
	337, 341, 357, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 348, 0, 0, 0, 302, 299,
	0, 335, 0, 0, 0, 304, 0, 317, 358, 0,
	293, 366, 332, 167, 369, 330, 329, 372, 117, 0,
	0, 128, 96, 95, 364, 314, 322, 87, 320, 122,
	115, 140, 347, 116, 121, 104, 132, 118, 139, 168,
	146, 130, 145, 77, 129, 138, 86, 123, 79, 136,
	127, 108, 98, 99, 78, 0, 120, 90, 94, 89,
	113, 133, 134, 88, 152, 82, 144, 81, 291, 143,
	112, 131, 137, 109, 106, 80, 135, 107, 105, 100,
	92, 0, 297, 0, 126, 141, 153, 310, 367, 147,
	148, 149, 150, 292, 290, 97, 124, 308, 309, 306,
	307, 343, 344, 376, 377, 378, 359, 303, 0, 0,
	362, 346, 76, 0, 102, 151, 119, 93, 142, 371,
	361, 0, 334, 373, 312, 326, 381, 327, 328, 355,
	300, 342, 114, 324, 0, 315, 295, 321, 296, 313,
	336, 91, 339, 311, 363, 345, 101, 379, 103, 350,
	0, 125, 110, 0, 0, 338, 365, 340, 360, 333,
	356, 305, 349, 374, 325, 353, 375, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 352, 370, 323, 354, 294, 351, 0, 298, 301,
	380, 368, 318, 319, 0, 0, 0, 0, 0, 0,
	0, 337, 341, 357, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 348, 0, 0, 0, 302,
	299, 0, 335, 0, 0, 0, 304, 0, 317, 358,
	0, 293, 366, 332, 167, 369, 330, 329, 372, 117,
	0, 0, 128, 96, 95, 364, 314, 322, 87, 320,
	122, 115, 140, 347, 116, 121, 104, 132, 118, 139,
	168, 146, 130, 145, 77, 129, 138, 86, 123, 79,
	136, 127, 108, 98, 99, 78, 0, 120, 90, 94,
	89, 113, 133, 134, 88, 152, 82, 144, 81, 83,
	143, 112, 131, 137, 109, 106, 80, 135, 107, 105,
	100, 92, 0, 297, 0, 126, 141, 153, 310, 367,
	147, 148, 149, 150, 111, 84, 97, 124, 308, 309,
	306, 307, 343, 344, 376, 377, 378, 359, 303, 0,
	0, 362, 346, 76, 0, 102, 151, 119, 93, 142,
	371, 361, 0, 334, 373, 312, 326, 381, 327, 328,
	355, 300, 342, 114, 324, 0, 315, 295, 321, 296,
	313, 336, 91, 339, 311, 363, 345, 101, 379, 103,
	350, 0, 125, 110, 0, 0, 338, 365, 340, 360,
	333, 356, 305, 349, 374, 325, 353, 375, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 352, 370, 323, 354, 294, 351, 0, 298,
	301, 380, 368, 318, 319, 0, 0, 0, 0, 0,
	0, 0, 337, 341, 357, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 348, 0, 0, 0,
	302, 299, 0, 335, 0, 0, 0, 304, 0, 317,
	358, 0, 293, 366, 332, 167, 369, 330, 329, 372,
	117, 0, 0, 128, 96, 95, 364, 314, 322, 87,
	320, 122, 115, 140, 347, 116, 121, 104, 132, 118,
	139, 168, 146, 130, 145, 77, 129, 138, 86, 123,
	79, 136, 127, 108, 98, 99, 78, 0, 120, 90,
	94, 89, 113, 133, 134, 88, 152, 82, 144, 81,
	291, 143, 112, 131, 137, 109, 106, 80, 135, 107,
	105, 100, 92, 0, 297, 0, 126, 141, 153, 310,
	367, 147, 148, 149, 150, 292, 290, 285, 284, 308,
	309, 306, 307, 343, 344, 376, 377, 378, 359, 303,
	0, 0, 362, 346, 76, 0, 102, 151, 119, 93,
	142, 114, 0, 0, 689, 0, 219, 0, 0, 0,
	91, 0, 216, 0, 0, 101, 256, 103, 0, 0,
	125, 110, 0, 0, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 217,
	237, 236, 239, 240, 241, 242, 0, 0, 85, 238,
	243, 244, 245, 0, 0, 214, 230, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	210, 0, 0, 0, 267, 0, 229, 0, 0, 225,
	226, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 0, 265, 0, 117, 0,
	0, 128, 96, 95, 0, 0, 0, 87, 0, 122,
	115, 140, 0, 116, 121, 104, 132, 118, 139, 168,
	146, 130, 145, 77, 129, 138, 86, 123, 79, 136,
	127, 108, 98, 99, 78, 0, 120, 90, 94, 89,
	113, 133, 134, 88, 152, 82, 144, 81, 83, 143,
	112, 131, 137, 109, 106, 80, 135, 107, 105, 100,
	92, 0, 0, 0, 126, 141, 153, 0, 0, 147,
	148, 149, 150, 111, 84, 97, 124, 257, 266, 263,
	264, 261, 262, 260, 259, 258, 268, 251, 252, 254,
	0, 253, 76, 0, 102, 151, 119, 93, 142, 114,
	0, 0, 0, 0, 219, 0, 0, 0, 91, 0,
	216, 0, 0, 101, 256, 103, 0, 0, 125, 110,
	0, 0, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 424, 217, 237, 236,
	239, 240, 241, 242, 0, 0, 85, 238, 243, 244,
	245, 0, 0, 214, 230, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 0, 0,
	0, 0, 267, 0, 229, 0, 0, 225, 226, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 0, 265, 0, 117, 0, 0, 128,
	96, 95, 0, 0, 0, 87, 0, 122, 115, 140,
	0, 116, 121, 104, 132, 118, 139, 168, 146, 130,
	145, 77, 129, 138, 86, 123, 79, 136, 127, 108,
	98, 99, 78, 0, 120, 90, 94, 89, 113, 133,
	134, 88, 152, 82, 144, 81, 83, 143, 112, 131,
	137, 109, 106, 80, 135, 107, 105, 100, 92, 0,
	0, 0, 126, 141, 153, 0, 0, 147, 148, 149,
	150, 111, 84, 97, 124, 257, 266, 263, 264, 261,
	262, 260, 259, 258, 268, 251, 252, 254, 0, 253,
	76, 0, 102, 151, 119, 93, 142, 114, 0, 0,
	0, 0, 219, 0, 0, 0, 91, 0, 216, 0,
	0, 101, 256, 103, 0, 0, 125, 110, 0, 0,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 217, 237, 236, 239, 240,
	241, 242, 0, 0, 85, 238, 243, 244, 245, 0,
	0, 214, 230, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 210, 0, 0, 0,
	267, 0, 229, 0, 0, 225, 226, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 265, 0, 117, 0, 0, 128, 96, 95,
	0, 0, 0, 87, 0, 122, 115, 140, 0, 116,
	121, 104, 132, 118, 139, 168, 146, 130, 145, 77,
	129, 138, 86, 123, 79, 136, 127, 108, 98, 99,
	78, 0, 120, 90, 94, 89, 113, 133, 134, 88,
	152, 82, 144, 81, 83, 143, 112, 131, 137, 109,
	106, 80, 135, 107, 105, 100, 92, 0, 0, 0,
	126, 141, 153, 0, 0, 147, 148, 149, 150, 111,
	84, 97, 124, 257, 266, 263, 264, 261, 262, 260,
	259, 258, 268, 251, 252, 254, 23, 253, 76, 0,
	102, 151, 119, 93, 142, 0, 0, 0, 114, 0,
	0, 0, 0, 219, 0, 0, 0, 91, 0, 216,
	0, 0, 101, 256, 103, 0, 0, 125, 110, 0,
	0, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 217, 237, 236, 239,
	240, 241, 242, 0, 0, 85, 238, 243, 244, 245,
	0, 0, 214, 230, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 0, 0, 0,
	0, 267, 0, 229, 0, 0, 225, 226, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 0, 265, 0, 117, 0, 0, 128, 96,
	95, 0, 0, 0, 87, 0, 122, 115, 140, 0,
	116, 121, 104, 132, 118, 139, 168, 146, 130, 145,
	77, 129, 138, 86, 123, 79, 136, 127, 108, 98,
	99, 78, 0, 120, 90, 94, 89, 113, 133, 134,
	88, 152, 82, 144, 81, 83, 143, 112, 131, 137,
	109, 106, 80, 135, 107, 105, 100, 92, 0, 0,
	0, 126, 141, 153, 0, 0, 147, 148, 149, 150,
	111, 84, 97, 124, 257, 266, 263, 264, 261, 262,
	260, 259, 258, 268, 251, 252, 254, 0, 253, 76,
	0, 102, 151, 119, 93, 142, 114, 0, 0, 0,
	0, 219, 0, 0, 0, 91, 0, 216, 0, 0,
	101, 256, 103, 0, 0, 125, 110, 0, 0, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 217, 237, 236, 239, 240, 241,
	242, 0, 0, 85, 238, 243, 244, 245, 0, 0,
	214, 230, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 0, 0, 0, 0, 267,
	0, 229, 0, 0, 225, 226, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	0, 265, 0, 117, 0, 0, 128, 96, 95, 0,
	0, 0, 87, 0, 122, 115, 140, 0, 116, 121,
	104, 132, 118, 139, 168, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 0, 0, 126,
	141, 153, 0, 0, 147, 148, 149, 150, 111, 84,
	97, 124, 257, 266, 263, 264, 261, 262, 260, 259,
	258, 268, 251, 252, 254, 114, 253, 76, 0, 102,
	151, 119, 93, 142, 91, 0, 0, 0, 0, 101,
	256, 103, 0, 0, 125, 110, 0, 0, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 217, 237, 236, 239, 240, 241, 242,
	0, 0, 85, 238, 243, 244, 245, 0, 0, 0,
	230, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 0, 0, 0, 0, 267, 0,
	229, 0, 0, 225, 226, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	265, 0, 117, 0, 0, 128, 96, 95, 0, 0,
	0, 87, 0, 122, 115, 140, 1175, 116, 121, 104,
	132, 118, 139, 168, 146, 130, 145, 77, 129, 138,
	86, 123, 79, 136, 127, 108, 98, 99, 78, 0,
	120, 90, 94, 89, 113, 133, 134, 88, 152, 82,
	144, 81, 83, 143, 112, 131, 137, 109, 106, 80,
	135, 107, 105, 100, 92, 0, 0, 0, 126, 141,
	153, 0, 0, 147, 148, 149, 150, 111, 84, 97,
	124, 257, 266, 263, 264, 261, 262, 260, 259, 258,
	268, 251, 252, 254, 114, 253, 76, 0, 102, 151,
	119, 93, 142, 91, 0, 0, 0, 0, 101, 256,
	103, 0, 0, 125, 110, 0, 0, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 217, 237, 236, 239, 240, 241, 242, 0,
	0, 85, 238, 243, 244, 245, 0, 0, 0, 230,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 0, 0, 0, 0, 267, 0, 229,
	0, 0, 225, 226, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 265,
	0, 117, 0, 0, 128, 96, 95, 0, 0, 0,
	87, 0, 122, 115, 140, 0, 116, 121, 104, 132,
	118, 139, 168, 146, 130, 145, 77, 129, 138, 86,
	123, 79, 136, 127, 108, 98, 99, 78, 0, 120,
	90, 94, 89, 113, 133, 134, 88, 152, 82, 144,
	81, 83, 143, 112, 131, 137, 109, 106, 80, 135,
	107, 105, 100, 92, 0, 0, 0, 126, 141, 153,
	0, 0, 147, 148, 149, 150, 111, 84, 97, 124,
	257, 266, 263, 264, 261, 262, 260, 259, 258, 268,
	251, 252, 254, 114, 253, 76, 0, 102, 151, 119,
	93, 142, 91, 0, 0, 0, 0, 101, 0, 103,
	0, 0, 125, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 458, 457, 467, 468,
	460, 461, 462, 463, 464, 465, 466, 459, 0, 0,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	117, 0, 0, 128, 96, 95, 0, 0, 0, 87,
	0, 122, 115, 140, 0, 116, 121, 104, 132, 118,
	139, 168, 146, 130, 145, 77, 129, 138, 86, 123,
	79, 136, 127, 108, 98, 99, 78, 0, 120, 90,
	94, 89, 113, 133, 134, 88, 152, 82, 144, 81,
	83, 143, 112, 131, 137, 109, 106, 80, 135, 107,
	105, 100, 92, 0, 0, 0, 126, 141, 153, 0,
	114, 147, 148, 149, 150, 111, 84, 97, 124, 91,
	0, 0, 0, 0, 101, 0, 103, 0, 0, 125,
	110, 0, 0, 0, 76, 0, 102, 151, 119, 93,
	142, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 68, 0, 0, 0, 72, 117, 0, 0,
	128, 96, 95, 0, 0, 0, 87, 0, 122, 115,
	140, 0, 116, 121, 104, 132, 118, 139, 70, 146,
	130, 145, 77, 129, 138, 86, 123, 79, 136, 127,
	108, 98, 99, 78, 0, 120, 90, 94, 89, 113,
	133, 134, 88, 152, 82, 144, 81, 83, 143, 112,
	131, 137, 109, 106, 80, 135, 107, 105, 100, 92,
	0, 0, 0, 126, 141, 153, 0, 0, 147, 148,
	149, 150, 111, 84, 97, 124, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 102, 151, 119, 93, 142, 114, 0,
	0, 0, 540, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 101, 0, 103, 0, 0, 125, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 542, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 0, 0, 0, 117, 0, 0, 128, 96,
	95, 0, 0, 0, 87, 0, 122, 115, 140, 0,
	116, 121, 104, 132, 118, 139, 168, 146, 130, 145,
	77, 129, 138, 86, 123, 79, 136, 127, 108, 98,
	99, 78, 0, 120, 90, 94, 89, 113, 133, 134,
	88, 152, 82, 144, 81, 83, 143, 112, 131, 137,
	109, 106, 80, 135, 107, 105, 100, 92, 0, 0,
	0, 126, 141, 153, 0, 0, 147, 148, 149, 150,
	111, 84, 97, 124, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 76,
	0, 102, 151, 119, 93, 142, 91, 0, 0, 0,
	0, 101, 0, 103, 0, 0, 125, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 117, 0, 0, 128, 96, 95,
	0, 0, 0, 87, 0, 122, 115, 140, 0, 116,
	121, 104, 132, 118, 139, 168, 146, 130, 145, 77,
	129, 138, 86, 123, 79, 136, 127, 108, 98, 99,
	78, 0, 120, 90, 94, 89, 113, 133, 134, 88,
	152, 82, 144, 81, 83, 143, 112, 131, 137, 109,
	106, 80, 135, 107, 105, 100, 92, 0, 0, 0,
	126, 141, 153, 0, 0, 147, 148, 149, 150, 111,
	84, 97, 124, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 76, 0,
	102, 151, 119, 93, 142, 91, 0, 0, 0, 0,
	101, 0, 103, 0, 0, 125, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 117, 0, 0, 128, 96, 95, 0,
	0, 0, 87, 0, 122, 115, 140, 0, 116, 121,
	104, 132, 118, 139, 168, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 0, 0, 126,
	141, 153, 0, 114, 147, 148, 149, 150, 111, 84,
	97, 124, 91, 0, 0, 0, 0, 101, 0, 103,
	0, 0, 125, 110, 0, 0, 0, 76, 0, 102,
	151, 119, 93, 142, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 640, 0, 0, 641, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	117, 0, 0, 128, 96, 95, 0, 0, 0, 87,
	0, 122, 115, 140, 0, 116, 121, 104, 132, 118,
	139, 168, 146, 130, 145, 77, 129, 138, 86, 123,
	79, 136, 127, 108, 98, 99, 78, 0, 120, 90,
	94, 89, 113, 133, 134, 88, 152, 82, 144, 81,
	83, 143, 112, 131, 137, 109, 106, 80, 135, 107,
	105, 100, 92, 0, 0, 0, 126, 141, 153, 0,
	114, 147, 148, 149, 150, 111, 84, 97, 124, 91,
	0, 554, 0, 0, 101, 0, 103, 0, 0, 125,
	110, 0, 0, 0, 76, 0, 102, 151, 119, 93,
	142, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	553, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 0, 0, 0, 117, 0, 0,
	128, 96, 95, 0, 0, 0, 87, 0, 122, 115,
	140, 0, 116, 121, 104, 132, 118, 139, 168, 146,
	130, 145, 77, 129, 138, 86, 123, 79, 136, 127,
	108, 98, 99, 78, 0, 120, 90, 94, 89, 113,
	133, 134, 88, 152, 82, 144, 81, 83, 143, 112,
	131, 137, 109, 106, 80, 135, 107, 105, 100, 92,
	0, 0, 0, 126, 141, 153, 0, 0, 147, 148,
	149, 150, 111, 84, 97, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 102, 151, 119, 93, 142, 114, 0,
	0, 0, 540, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 101, 0, 103, 0, 0, 125, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 542, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 0, 0, 0, 117, 0, 0, 128, 96,
	95, 0, 0, 0, 87, 0, 122, 115, 140, 0,
	538, 121, 104, 132, 118, 139, 168, 146, 130, 145,
	77, 129, 138, 86, 123, 79, 136, 127, 108, 98,
	99, 78, 0, 120, 90, 94, 89, 113, 133, 134,
	88, 152, 82, 144, 81, 83, 143, 112, 131, 137,
	109, 106, 80, 135, 107, 105, 100, 92, 0, 0,
	0, 126, 141, 153, 0, 114, 147, 148, 149, 150,
	111, 84, 97, 124, 91, 0, 0, 0, 0, 101,
	0, 103, 0, 0, 125, 110, 0, 0, 0, 76,
	0, 102, 151, 119, 93, 142, 0, 0, 0, 0,
	50, 0, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 117, 0, 0, 128, 96, 95, 0, 0,
	0, 87, 0, 122, 115, 140, 0, 116, 121, 104,
	132, 118, 139, 168, 146, 130, 145, 77, 129, 138,
	86, 123, 79, 136, 127, 108, 98, 99, 78, 0,
	120, 90, 94, 89, 113, 133, 134, 88, 152, 82,
	144, 81, 83, 143, 112, 131, 137, 109, 106, 80,
	135, 107, 105, 100, 92, 0, 0, 0, 126, 141,
	153, 0, 114, 147, 148, 149, 150, 111, 84, 97,
	124, 91, 0, 0, 0, 0, 101, 0, 103, 0,
	0, 125, 110, 0, 0, 0, 76, 0, 102, 151,
	119, 93, 142, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 542, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 0, 0, 0, 117,
	0, 0, 128, 96, 95, 0, 0, 0, 87, 0,
	122, 115, 140, 0, 116, 121, 104, 132, 118, 139,
	168, 146, 130, 145, 77, 129, 138, 86, 123, 79,
	136, 127, 108, 98, 99, 78, 0, 120, 90, 94,
	89, 113, 133, 134, 88, 152, 82, 144, 81, 83,
	143, 112, 131, 137, 109, 106, 80, 135, 107, 105,
	100, 92, 0, 0, 0, 126, 141, 153, 0, 114,
	147, 148, 149, 150, 111, 84, 97, 124, 91, 0,
	0, 0, 0, 101, 0, 103, 0, 0, 125, 110,
	0, 0, 0, 76, 0, 102, 151, 119, 93, 142,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 448,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 0, 0, 0, 117, 0, 0, 128,
	96, 95, 0, 0, 0, 87, 0, 122, 115, 140,
	0, 116, 121, 104, 132, 118, 139, 168, 146, 130,
	145, 77, 129, 138, 86, 123, 79, 136, 127, 108,
	98, 99, 78, 0, 120, 90, 94, 89, 113, 133,
	134, 88, 152, 82, 144, 81, 83, 143, 112, 131,
	137, 109, 106, 80, 135, 107, 105, 100, 92, 0,
	0, 0, 126, 141, 153, 0, 0, 147, 148, 149,
	150, 111, 84, 97, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	76, 0, 102, 151, 119, 93, 142, 518, 91, 0,
	0, 0, 0, 101, 0, 103, 0, 0, 125, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 0, 0, 0, 117, 0, 0, 128,
	96, 95, 0, 0, 0, 87, 0, 122, 115, 140,
	0, 116, 121, 104, 132, 118, 139, 168, 146, 130,
	145, 77, 129, 138, 86, 123, 79, 136, 127, 108,
	98, 99, 78, 0, 120, 90, 94, 89, 113, 133,
	134, 88, 152, 82, 144, 81, 83, 143, 112, 131,
	137, 109, 106, 80, 135, 107, 105, 100, 92, 278,
	0, 0, 126, 141, 153, 0, 114, 147, 148, 149,
	150, 111, 84, 97, 124, 91, 0, 0, 0, 0,
	101, 0, 103, 0, 0, 125, 110, 0, 0, 0,
	76, 0, 102, 151, 119, 93, 142, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 117, 0, 0, 128, 96, 95, 0,
	0, 0, 87, 0, 122, 115, 140, 0, 116, 121,
	104, 132, 118, 139, 168, 146, 130, 145, 77, 129,
	138, 86, 123, 79, 136, 127, 108, 98, 99, 78,
	0, 120, 90, 94, 89, 113, 133, 134, 88, 152,
	82, 144, 81, 83, 143, 112, 131, 137, 109, 106,
	80, 135, 107, 105, 100, 92, 0, 0, 0, 126,
	141, 153, 0, 114, 147, 148, 149, 150, 111, 84,
	97, 124, 91, 0, 0, 0, 0, 101, 0, 103,
	0, 0, 125, 110, 0, 0, 0, 76, 0, 102,
	151, 119, 93, 142, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 167, 0, 0, 0, 0,
	117, 0, 0, 128, 96, 95, 0, 0, 0, 87,
	0, 122, 115, 140, 0, 116, 121, 104, 132, 118,
	139, 168, 146, 130, 145, 77, 129, 138, 86, 123,
	79, 136, 127, 108, 98, 99, 78, 0, 120, 90,
	94, 89, 113, 133, 134, 88, 152, 82, 144, 81,
	83, 143, 112, 131, 137, 109, 106, 80, 135, 107,
	105, 100, 92, 0, 0, 0, 126, 141, 153, 0,
	114, 147, 148, 149, 150, 111, 84, 97, 124, 91,
	0, 0, 0, 0, 101, 0, 103, 0, 0, 125,
	110, 0, 0, 0, 76, 0, 102, 151, 119, 93,
	142, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 0, 0, 0, 117, 0, 0,
	128, 96, 95, 0, 0, 0, 87, 0, 122, 115,
	140, 0, 116, 121, 104, 132, 118, 139, 168, 146,
	130, 145, 77, 129, 138, 86, 123, 79, 136, 127,
	108, 98, 99, 78, 0, 120, 90, 94, 89, 113,
	133, 134, 88, 152, 82, 144, 81, 83, 143, 112,
	131, 137, 109, 106, 80, 135, 107, 105, 100, 92,
	0, 0, 0, 126, 141, 153, 0, 114, 147, 148,
	149, 150, 111, 84, 97, 124, 91, 0, 0, 0,
	0, 101, 0, 103, 0, 0, 125, 110, 0, 0,
	0, 76, 0, 102, 151, 119, 93, 142, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 117, 0, 0, 128, 96, 95,
	0, 0, 0, 87, 0, 122, 115, 140, 0, 116,
	121, 104, 132, 118, 139, 168, 146, 130, 145, 77,
	129, 138, 86, 123, 79, 136, 127, 108, 98, 99,
	78, 0, 120, 90, 94, 89, 113, 133, 134, 88,
	152, 82, 144, 81, 83, 143, 112, 131, 137, 109,
	106, 80, 135, 107, 105, 100, 92, 0, 0, 0,
	126, 141, 153, 0, 114, 147, 148, 149, 150, 111,
	84, 97, 124, 91, 0, 0, 0, 0, 101, 0,
	103, 0, 0, 125, 110, 0, 0, 0, 76, 0,
	102, 151, 119, 93, 142, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 117, 0, 0, 128, 96, 95, 0, 0, 0,
	87, 0, 122, 115, 140, 0, 116, 121, 104, 132,
	118, 139, 168, 146, 130, 145, 77, 129, 138, 86,
	123, 79, 136, 127, 108, 98, 99, 78, 0, 120,
	90, 94, 89, 113, 133, 134, 88, 152, 82, 144,
	81, 83, 143, 112, 131, 137, 109, 106, 80, 135,
	107, 105, 100, 92, 0, 0, 0, 126, 141, 153,
	0, 0, 147, 148, 149, 150, 111, 84, 97, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 102, 151, 119,
	93, 142,
}
var yyPact = [...]int{

	222, -1000, -156, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 745, 772, -1000, -1000, -1000, -1000, -1000, -1000, 577,
	6002, 22, 37, -32, 8255, 36, 1247, 8786, -1000, -42,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 547, -1000, -1000,
	-1000, -1000, -1000, 740, 743, 622, 733, 630, -1000, 4809,
	21, 7347, 8078, 4185, -1000, 386, 18, 32, 8786, -128,
	8432, 18, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35, 8786, -1000, 8786, 12, 12,
	378, 12, 8786, -1000, 74, -1000, -1000, -1000, -1000, 8786,
	364, 691, 44, 2638, 2638, 2638, 2638, -21, 2638, 2638,
	589, -1000, -1000, -1000, -1000, 2638, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 362, 707, 5228, 5228, 745,
	-1000, 547, -1000, -1000, -1000, 702, -1000, -1000, 196, 761,
	-1000, 1779, 73, -1000, 5228, 1985, 524, -1000, -1000, 524,
	-1000, -1000, 49, -1000, -1000, 5626, 5626, 5626, 5626, 5626,
	5626, 5626, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 524, -1000, 5020, 524,
	524, 524, 524, 524, 524, 5228, 524, 524, 524, 524,
	524, 524, 524, 524, 524, 524, 524, 524, 524, 7901,
	490, 641, -1000, -1000, -1000, 729, 6608, 7170, 8786, 517,
	-1000, 498, 3743, -1000, -1000, -1000, 146, 6962, -1000, -1000,
	-1000, 689, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 461, -1000, 2000, 345, 164, 343, 2638, 27,
	579, 8786, 8786, 2638, 25, 8786, 725, 339, 588, 8786,
	-1000, 3964, -1000, 2638, 2638, 2638, 2638, 2638, 2638, 2638,
	2638, -1000, -1000, -1000, -1000, -1000, -1000, 2638, 2638, -1000,
	-1000, 8786, -1000, -1000, -1000, -1000, 766, 102, 220, 69,
	511, -1000, 327, 740, 362, 630, 6785, 599, -1000, -1000,
	8786, -1000, 5228, 5228, 278, -1000, 7701, -1000, -1000, 3080,
	136, 5626, 245, 177, 5626, 5626, 5626, 5626, 5626, 5626,
	5626, 5626, 5626, 5626, 5626, 5626, 5626, 5626, 5626, 256,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 308, -1000,
	547, 744, 744, 86, 86, 86, 86, 86, 86, 5825,
	4393, 362, 459, 252, 5020, 4809, 4809, 5228, 5228, 4809,
	735, 140, 252, 8432, -1000, 362, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4809, 4809, 4809, 4809, -6, 8786, -1000,
	8609, 7347, 7347, 7347, 7347, 7347, -1000, 617, 609, -1000,
	620, 618, 673, 8786, -1000, 456, 6608, 89, 524, -1000,
	7524, -1000, -1000, -6, 7347, 8786, -1000, -1000, 3743, 498,
	5228, 79, -1000, -1000, -1000, -1000, 2417, 157, 201, -96,
	-1000, -1000, 538, -1000, 538, 538, 538, 538, -74, -74,
	-74, -74, -1000, -1000, -1000, -1000, -1000, 574, 573, -1000,
	538, 538, 538, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 560, 560, 560, 551, 551, 2417, 722, 580, -1000,
	8786, -145, 300, 127, 80, -1000, 8786, -1000, -1000, 2638,
	8786, 2638, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 610, 5228, 5228,
	3522, 5228, -1000, -1000, -1000, 707, -1000, 735, 751, -1000,
	682, 658, 4809, -1000, -1000, 136, 137, -1000, -1000, 294,
	-1000, -1000, -1000, -1000, 63, 524, -1000, 1332, -1000, -1000,
	-1000, -1000, 245, 5626, 5626, 5626, 286, 1332, 1432, 105,
	331, 86, 269, 269, 112, 112, 112, 112, 112, 353,
	353, -1000, -1000, -1000, 362, -1000, -1000, -1000, 362, 4809,
	497, -1000, -1000, 5228, -1000, 362, 448, 448, 232, 270,
	448, 4809, 181, -1000, 5228, 362, -1000, 448, 362, 448,
	448, 503, 524, -1000, 530, -1000, 145, -1000, 62, 641,
	564, 586, 1151, -1000, -1000, -1000, -1000, 608, -1000, 607,
	-1000, -1000, -1000, -1000, -1000, 31, 30, 29, 8432, -1000,
	752, 518, -1000, -1000, 252, -1000, 293, 496, 2196, -1000,
	-1000, -1000, -1000, -1000, -1000, 555, 714, 153, 292, -1000,
	-1000, 698, -1000, 191, -99, -1000, -1000, 237, -74, -74,
	-1000, -1000, 79, 688, 79, 79, 79, 259, 259, -1000,
	-1000, -1000, -1000, 234, -1000, -1000, -1000, 226, -1000, 496,
	-1000, 584, 8432, 2638, -1000, 3301, -1000, -1000, 8786, -1000,
	606, 527, 168, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -7, -1000, -1000, 2638, -1000, 638,
	252, 252, 52, -1000, -1000, 8786, -1000, -1000, -1000, -1000,
	481, -1000, -1000, -1000, 2859, 4809, -1000, 286, 1332, 1386,
	-1000, 5626, 5626, -1000, -1000, 448, 4809, 252, -1000, -1000,
	-1000, 129, 256, 129, -138, 528, 148, -1000, 5228, 239,
	-1000, -1000, -1000, -1000, -1000, 582, 8609, 524, -1000, 6409,
	8432, 745, 8609, 5228, 5228, 3522, -1000, -1000, 5228, 553,
	-1000, 5228, -1000, -1000, -1000, 524, 524, 524, 431, -1000,
	745, -1000, -1000, 2417, -1000, 2417, 8432, -1000, 268, -1000,
	-1000, 519, 46, -1000, -1000, -1000, 411, 79, 79, -1000,
	131, -1000, -1000, -1000, 446, -1000, 443, 486, 440, 8786,
	-1000, -1000, 478, -1000, 138, -1000, -1000, -1000, 8432, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 8432, 8786, -1000, -1000, -1000, -1000, -1000, 8432, -1000,
	-1000, 3301, -1000, 752, 7347, -1000, -1000, 362, -1000, 5626,
	1332, 1332, -1000, -1000, 362, 538, 538, -1000, 538, 551,
	-1000, 538, -52, 538, -53, 362, 362, 524, -133, -1000,
	252, 5228, -1000, 716, 405, 467, -1000, -1000, 4601, 362,
	433, 48, 431, 740, -1000, 252, 252, -1000, 252, 8432,
	252, 8432, 8432, 8432, 6210, 8432, 740, 2196, -1000, 429,
	-1000, 538, -1000, -90, 765, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -74, 253, -74, 221,
	-1000, 202, 2638, 3301, 2417, -1000, 525, -1000, -1000, -1000,
	-1000, 718, 750, 475, -1000, 1332, -1000, -1000, 47, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5626, 362, 246,
	252, 713, -1000, 524, -1000, -1000, 541, 8432, 8432, -1000,
	-1000, 409, -1000, 384, 384, 384, 89, -1000, -1000, 580,
	8432, -1000, 109, -1000, -115, 79, -1000, 79, 391, 385,
	-1000, -1000, -1000, 8432, 524, 747, 742, -1000, -1000, 24,
	-1000, -1000, 764, -1000, 524, -1000, 547, 43, -1000, 8432,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 183, 712, -1000,
	700, -1000, -1000, -1000, -1000, -1000, 361, -9, -1000, 5228,
	5228, 362, 34, -148, 8609, 467, 362, 8432, -1000, -1000,
	242, -1000, -1000, 579, 358, -1000, 8432, 252, 464, -1000,
	633, -143, -151, 453, -1000, -1000, -1000, -145, -1000, -9,
	654, -1000, 627, -1000, -1000, -1000, -31, -146, -13, -149,
	524, -152, 5427, -1000, 1309, 362, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1022, 17, 461, 1020, 1019, 1018, 1011, 1001, 999,
	998, 996, 993, 992, 989, 986, 985, 984, 983, 981,
	977, 975, 972, 971, 140, 970, 964, 963, 67, 962,
	60, 961, 960, 30, 79, 33, 37, 365, 959, 21,
	80, 66, 958, 42, 956, 954, 953, 945, 52, 941,
	940, 1219, 939, 937, 10, 25, 935, 934, 933, 932,
	56, 13, 931, 930, 928, 927, 926, 923, 50, 8,
	7, 9, 14, 922, 36, 6, 918, 44, 914, 913,
	895, 889, 53, 888, 48, 886, 23, 45, 885, 11,
	55, 34, 24, 5, 61, 883, 29, 54, 882, 342,
	878, 102, 318, 876, 875, 874, 867, 43, 0, 724,
	467, 59, 866, 15, 865, 1188, 58, 57, 20, 859,
	46, 771, 28, 858, 857, 26, 845, 844, 839, 836,
	831, 827, 325, 825, 824, 823, 16, 3, 822, 819,
	49, 40, 816, 815, 814, 41, 51, 813, 39, 812,
	807, 47, 27, 19, 800, 12, 798, 792, 2, 791,
	22, 790, 1, 789, 4, 32, 787, 784, 443, 132,
	783, 782, 68,
}
var yyR1 = [...]int{

	0, 166, 167, 167, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 170, 170,
	46, 46, 90, 90, 10, 10, 123, 123, 11, 11,
	11, 11, 11, 11, 164, 164, 163, 162, 162, 161,
	161, 160, 16, 16, 149, 150, 150, 150, 146, 126,
	126, 126, 129, 129, 127, 127, 127, 127, 127, 127,
	127, 128, 128, 128, 128, 128, 130, 130, 130, 130,
	130, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 145, 145, 132, 132,
	140, 140, 141, 141, 141, 138, 138, 139, 139, 142,
	142, 142, 133, 133, 133, 133, 133, 133, 133, 135,
	135, 143, 143, 136, 136, 136, 137, 137, 144, 144,
	144, 144, 144, 134, 134, 147, 154, 154, 154, 154,
	148, 148, 156, 156, 155, 151, 151, 151, 152, 152,
	152, 153, 153, 153, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 159, 157, 157, 158, 158, 13,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	124, 124, 124, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 171, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 112, 112, 112, 111,
	111, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 119, 119, 118, 118,
	118, 117, 117, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	100, 100, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 172, 172, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 122, 122, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 78, 78, 32, 32, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 60, 62, 62, 62, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 85, 85, 85, 86, 86, 86,
	86, 87, 87, 87, 59, 59, 59, 59, 59, 59,
	88, 88, 88, 88, 92, 92, 70, 70, 72, 72,
	71, 73, 93, 93, 96, 94, 94, 97, 97, 95,
	95, 95, 114, 114, 114, 98, 98, 101, 101, 102,
	102, 99, 99, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 104, 104, 104, 105, 105, 106, 106,
	106, 113, 113, 109, 109, 110, 110, 115, 115, 116,
	116, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	168, 169, 120, 121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 1, 1, 2, 5,
	8, 4, 6, 5, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 6, 4, 1, 3, 3, 8, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 2, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 5, 6, 5, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 3, 4, 2, 4, 2, 2, 2, 2, 3,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -166, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 138, 116, 131, 49, 150, 151,
	153, 154, 25, 132, 133, 136, 137, -168, 8, 213,
	53, -167, 226, -82, 15, -26, 5, -24, -171, -24,
	-24, -24, -24, -24, -149, 53, 205, -106, 120, 70,
	146, 118, 124, -109, 56, -108, 219, 150, 161, 155,
	182, 174, 172, 175, 201, 65, 153, 134, 170, 166,
	164, 27, 187, 224, 165, 130, 129, 202, 159, 160,
	186, 32, 221, 34, 142, 185, 181, 184, 158, 180,
	38, 200, 177, 167, 18, 137, 140, 125, 144, 223,
	163, 141, 136, 154, 203, 37, 191, 157, 128, 151,
	148, 178, 143, 168, 169, 183, 156, 179, 152, 145,
	138, 192, 225, 176, 173, 149, 147, 196, 197, 198,
	199, 222, 171, 193, -99, 120, 122, 118, 118, 205,
	119, 120, 118, -51, -115, 56, -108, 120, 146, 118,
	106, 175, 112, 194, 119, 32, 144, -124, 118, 195,
	147, 196, 197, 198, 199, 56, 203, 202, -115, 152,
	-120, -120, -120, -120, -120, -2, -86, 17, 16, -5,
	-3, -168, 6, 20, 21, -30, 39, 40, -25, -36,
	97, -37, -115, -56, 72, -61, 29, 56, -108, 23,
	-60, -57, -75, -73, -74, 106, 107, 95, 96, 103,
	73, 108, -65, -63, -64, -66, 58, 57, 66, 59,
	60, 61, 62, 67, 68, 69, -109, -71, -168, 43,
	44, 214, 215, 218, 216, 75, 33, 204, 212, 211,
	210, 208, 209, 206, 207, 123, 205, 101, 213, -99,
	-39, -40, -41, -42, -53, -74, -168, -51, 11, -46,
	-51, -94, -123, -97, 203, 202, -110, -95, -109, -107,
	201, 175, 200, 117, 71, 22, 24, 189, 74, 106,
	16, 75, 105, 214, 112, 47, 206, 207, 204, 205,
	194, 29, 10, 25, 132, 21, 99, 114, 78, 79,
	135, 23, 133, 69, 19, 50, 11, 13, 14, 123,
	122, 90, 119, 45, 8, 108, 26, 87, 41, 28,
	43, 88, 17, 208, 209, 31, 218, 139, 101, 48,
	35, 72, 67, 51, 70, 15, 46, 89, 115, 213,
	44, 6, 217, 30, 131, 42, 118, 195, 77, 121,
	68, 5, 124, 9, 49, 52, 210, 211, 212, 33,
	76, 12, -150, -146, 56, -102, 123, 119, -51, 213,
	-109, -102, 118, -51, -51, -101, 123, -101, 56, -101,
	-51, 109, -51, 56, 30, 205, 56, 144, 118, 145,
	120, -121, -168, -110, -121, -121, -121, 148, 149, -121,
	-121, 51, -121, -169, 55, -87, 19, 31, -37, -115,
	-83, -84, -37, -82, -2, -24, 35, -28, 21, 64,
	11, -112, 71, 70, 87, -111, 22, -109, 58, 109,
	-37, -58, 90, 72, 88, 89, 74, 92, 91, 102,
	95, 96, 97, 98, 99, 100, 101, 93, 94, 105,
	80, 81, 82, 83, 84, 85, 86, -100, -168, -74,
	-168, 110, 111, -61, -61, -61, -61, -61, -61, -61,
	-168, -2, -69, -37, -168, -168, -168, -168, -168, -168,
	-168, -78, -37, -168, -172, -168, -172, -172, -172, -172,
	-172, -172, -172, -168, -168, -168, -168, -52, 26, -51,
	30, 54, -47, -49, -48, -50, 41, 45, 47, 42,
	43, 44, 48, -119, 22, -39, -168, -118, 140, -117,
	22, -115, 58, -51, -170, 54, 11, 52, 54, -94,
	80, -114, -109, 58, 29, 30, 55, 54, -126, -129,
	-131, -130, -127, -128, 172, 173, 106, 176, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 30, 134,
	168, 169, 170, 171, 155, 156, 157, 158, 159, 160,
	161, 163, 164, 165, 166, 167, 56, 72, 56, -121,
	120, -164, 52, -51, -51, -121, 121, -51, 23, 56,
	51, -51, -116, -115, -107, -121, -121, -121, -121, -121,
	-121, -121, -121, -121, -121, -51, 9, 90, 54, 18,
	109, 54, -85, 24, 25, -86, -169, -30, -62, -109,
	59, 62, -29, 42, -51, -37, -37, -67, 67, 72,
	68, 69, -111, 97, -116, -110, -107, -61, -68, -71,
	-74, 63, 90, 88, 89, 74, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -122, 56, 58, 56, -60, -60, -109, -35, 21,
	-34, -36, -169, 54, -169, -2, -34, -34, -37, -37,
	-34, -28, -76, -77, 76, -109, -169, -34, -35, -34,
	-34, -90, 140, -51, -93, -96, -75, -109, -115, -40,
	-41, -41, -40, -41, 41, 41, 41, 46, 41, 46,
	41, -48, -115, -169, -54, 49, 122, 50, -168, -117,
	-90, -39, -51, -97, -37, -137, 105, -151, -152, -153,
	-110, 58, 59, -146, -147, -154, 125, 124, -148, 119,
	28, -142, 67, 72, -138, 192, -132, 53, -132, -132,
	-132, -132, -136, 175, -136, -136, -136, 53, 53, -132,
	-132, -132, -140, 53, -140, -140, -141, 53, -141, -151,
	23, -113, 52, -51, -162, 222, -163, 56, 88, -103,
	117, 114, 115, -159, 113, 189, 175, 65, 29, 15,
	214, 140, 225, 56, 141, -51, -121, -51, -121, 37,
	-37, -37, -116, -84, -87, -98, 19, 11, 33, 33,
	-34, 67, 68, 69, 109, -168, -68, -61, -61, -61,
	-33, 135, 71, -169, -169, -34, 54, -37, -169, -169,
	-169, 54, 52, 22, -169, -34, -79, -77, 78, -37,
	-169, -169, -169, -169, -169, -59, 30, 33, -2, -168,
	-168, -55, 54, 12, 80, 109, -44, -43, 51, 52,
	-45, 51, -43, 41, 41, 119, 119, 119, -91, -109,
	-55, -55, 56, 54, -153, 80, 53, 28, -148, 56,
	56, -133, 29, 67, -139, 193, 59, -136, -136, -137,
	30, -137, -137, -137, -145, 58, -145, 59, 59, 51,
	-109, -121, -161, -160, -110, -51, -120, -165, 146, 126,
	127, 130, 129, 56, 119, 28, 125, 128, 140, 124,
	-165, 146, -104, -105, 121, 22, 119, 28, 140, -121,
	38, 109, -51, -38, 11, 97, -110, -35, -33, 71,
	-61, -61, -169, -36, -125, 106, 172, 134, 170, 166,
	186, 177, 191, 168, 192, -122, -125, 219, -82, 79,
	-37, 77, -92, 51, -93, -70, -72, -71, -168, -2,
	-88, -109, -91, -82, -96, -37, -37, -110, -37, 53,
	-37, -168, -168, -168, -169, 54, -82, -152, -153, -156,
	-155, -109, 56, -135, 51, 58, 59, 60, 67, 204,
	66, 55, -137, -137, 56, 106, 55, 54, 55, 54,
	55, 54, -51, 54, 80, -120, -109, -120, -109, -51,
	-120, -109, -55, -39, -169, -61, -169, -132, -132, -132,
	-141, -132, 160, -132, 160, -169, -169, -168, -32, 217,
	-37, 27, -92, 54, -169, -169, -169, 54, 109, -169,
	-86, -89, -109, -89, -89, -89, -118, -109, -86, 55,
	54, -132, -143, 189, 9, -136, 58, -136, 59, 59,
	-121, -160, -153, 53, 26, -80, 13, -136, 56, -61,
	-169, 58, 28, -72, 33, -2, -168, -109, -109, 54,
	55, -169, -169, -169, -54, -113, -155, -144, 125, 28,
	124, 204, -137, -137, 55, 55, -89, -168, -81, 14,
	16, -31, 90, 222, 9, -70, -2, 109, -109, -134,
	65, 28, 28, 55, -157, -158, 140, -37, -69, -169,
	220, 48, 223, -93, -169, -109, 58, -164, -169, 54,
	-109, 38, 221, 224, -162, -158, 33, 38, 142, 222,
	143, 223, -168, 224, -61, 139, -169, -169,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 459, 0, 234, 234, 234, 234, 234, 234, 0,
	528, 511, 0, 0, 0, 0, 220, 224, 225, 0,
	227, 228, 712, 712, 712, 712, 712, 0, 33, 34,
	710, 1, 3, 467, 0, 0, 238, 241, 236, 0,
	511, 0, 0, 0, 48, 0, 509, 0, 700, 0,
	701, 509, 529, 530, 533, 534, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 702, 703, 704, 705,
	706, 707, 708, 709, 0, 0, 512, 0, 507, 507,
	0, 507, 0, 195, 305, 537, 538, 700, 701, 0,
	0, 0, 0, 713, 713, 713, 713, 0, 713, 713,
	213, 215, 216, 217, 218, 713, 221, 222, 223, 226,
	229, 230, 231, 232, 233, 27, 471, 0, 0, 459,
	29, 0, 234, 239, 240, 244, 242, 243, 235, 0,
	252, 256, 0, 313, 0, 318, 320, -2, -2, 0,
	355, 356, 357, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 382, 383, 384, 385, 444, 445, 446, 447,
	448, 449, 450, 451, 322, 323, 441, 491, 0, 0,
	0, 0, 0, 0, 0, 432, 0, 406, 406, 406,
	406, 406, 406, 406, 406, 0, 0, 0, 0, 0,
	0, 263, 265, 266, 267, 286, 0, 288, 0, 0,
	40, 44, 0, 495, -2, -2, 0, 0, 535, 536,
	-2, 637, -2, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 0, 65, 0, 0, 0, 0, 713, 0,
	54, 0, 0, 713, 0, 0, 0, 0, 0, 0,
	194, 0, 196, 713, 713, 713, 713, 713, 713, 713,
	713, 205, 714, 715, 206, 207, 208, 713, 713, 210,
	211, 0, 219, 28, 711, 22, 0, 0, 468, 0,
	460, 461, 464, 467, 27, 241, 0, 246, 245, 237,
	0, 253, 0, 0, 0, 257, 0, 259, 260, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 342, 343, 344, 345, 346, 319, 0, 333,
	0, 0, 0, 375, 376, 377, 378, 379, 380, 0,
	248, 27, 0, 353, 0, 0, 0, 0, 0, 0,
	244, 0, 433, 0, 398, 0, 399, 400, 401, 402,
	403, 404, 405, 0, 248, 0, 0, 42, 0, 304,
	0, 0, 0, 0, 0, 0, 293, 0, 0, 296,
	0, 0, 0, 0, 287, 0, 0, 307, 670, 289,
	0, 291, 292, 42, 0, 0, 38, 39, 0, 45,
	0, 136, 502, 503, 504, 500, 155, 0, 119, 115,
	70, 71, 108, 73, 108, 108, 108, 108, 133, 133,
	133, 133, 99, 100, 101, 102, 103, 0, 0, 86,
	108, 108, 108, 90, 74, 75, 76, 77, 78, 79,
	80, 110, 110, 110, 112, 112, 155, 0, 531, 51,
	0, 57, 0, 62, 0, 171, 0, 190, 508, 713,
	0, 713, 306, 539, 540, 197, 198, 199, 200, 201,
	202, 203, 204, 209, 212, 214, 472, 0, 0, 0,
	0, 0, 463, 465, 466, 471, 30, 244, 0, 452,
	0, 0, 0, 247, 25, 314, 315, 317, 334, 0,
	336, 338, 258, 254, 0, 442, -2, 324, 325, 349,
	350, 351, 0, 0, 0, 0, 347, 329, 0, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 374, 417, 418, 0, 372, 373, 381, 0, 0,
	249, 250, 352, 0, 490, 27, 0, 0, 0, 0,
	0, 0, 439, 436, 0, 0, 407, 0, 0, 0,
	0, 0, 0, 303, 311, 492, 0, 441, 0, 264,
	282, 284, 0, 279, 294, 295, 297, 0, 299, 0,
	301, 302, 268, 269, 270, 0, 0, 0, 0, 290,
	311, 311, 41, 496, 497, 498, 0, 64, 156, 158,
	161, 162, 163, 66, 67, 0, 0, 0, 0, 150,
	151, 122, 120, 0, 117, 116, 72, 0, 133, 133,
	93, 94, 136, 0, 136, 136, 136, 0, 0, 87,
	88, 89, 81, 0, 82, 83, 84, 0, 85, 49,
	510, 0, 0, 713, 53, 0, 55, 56, 0, 712,
	0, 0, 523, 172, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 0, 189, 191, 713, 193, 0,
	469, 470, 0, 462, 23, 0, 505, 506, 453, 454,
	261, 335, 337, 339, 0, 248, 326, 347, 330, 0,
	327, 0, 0, 321, 386, 0, 0, 354, -2, 389,
	390, 0, 0, 0, 0, 459, 0, 437, 0, 0,
	397, 408, 409, 410, 411, 484, 0, 0, -2, 0,
	0, 459, 0, 0, 0, 0, 276, 283, 0, 0,
	277, 0, 278, 298, 300, 0, 0, 0, 0, 274,
	459, 37, 137, 0, 159, 0, 0, 146, 0, 148,
	149, 129, 0, 121, 69, 118, 0, 136, 136, 95,
	0, 96, 97, 98, 0, 106, 0, 0, 0, 0,
	532, 52, 58, 59, 0, 63, 164, 712, 0, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	712, 0, 0, 712, 524, 525, 526, 527, 0, 192,
	473, 0, 24, 311, 0, 255, 443, 0, 328, 0,
	348, 331, 387, 251, 0, 108, 108, 422, 108, 112,
	425, 108, 427, 108, 430, 0, 0, 0, 434, 396,
	440, 0, 31, 0, 484, 474, 486, 488, 0, 27,
	0, 480, 0, 467, 493, 312, 494, 442, 280, 0,
	285, 0, 0, 0, 288, 0, 467, 157, 160, 0,
	152, 108, 147, 131, 0, 123, 124, 125, 126, 127,
	128, 109, 91, 92, 134, 135, 133, 0, 133, 0,
	113, 0, 713, 0, 0, 165, 0, 166, 168, 169,
	170, 0, 455, 262, 388, 332, 391, 419, 133, 423,
	424, 426, 428, 429, 431, 393, 392, 0, 0, 0,
	438, 0, 32, 0, 489, -2, 0, 0, 0, 43,
	35, 0, 272, 0, 0, 0, 307, 275, 36, 531,
	0, 154, 138, 132, 0, 136, 107, 136, 0, 0,
	50, 60, 61, 0, 0, 457, 0, 420, 421, 412,
	395, 435, 0, 487, 0, -2, 0, 482, 481, 0,
	281, 308, 309, 310, 271, 145, 153, 143, 0, 140,
	142, 130, 104, 105, 111, 114, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 477, 27, 0, 273, 68,
	0, 139, 141, 54, 0, 185, 0, 458, 456, 394,
	0, 0, 0, 485, -2, 483, 144, 57, 184, 0,
	0, 413, 0, 416, 167, 186, 0, 414, 0, 0,
	0, 0, 0, 415, 0, 0, 187, 188,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 226,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:292
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:297
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:298
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:302
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:325
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:333
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:337
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:343
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:350
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:356
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:360
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:366
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:377
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:389
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:401
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:411
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:417
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:421
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:427
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:435
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:440
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:444
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			yyVAL.str = SessionStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.str = GlobalStr
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:470
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:475
		{
			yyVAL.statement = &DDL{Action: CreateDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}, TableSpec: &TableSpec{Options: yyDollar[5].str}}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:479
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:501
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:505
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:511
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:516
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:521
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:527
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:538
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:544
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:549
		{
			yyVAL.ddl = &DDL{Action: CreateTableStr, NewName: yyDollar[4].tableName, Table: yyDollar[6].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:556
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:568
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:572
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:578
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:589
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:599
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:762
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:767
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:771
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:776
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:780
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:788
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:792
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:798
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:806
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:810
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:815
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:825
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:838
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:846
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:850
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:858
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:862
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:867
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:871
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:876
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:885
		{
			yyVAL.str = ""
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:889
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:893
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:898
		{
			yyVAL.str = ""
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:902
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:907
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.colKeyOpt = colKey
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:928
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:932
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:938
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:944
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:948
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:952
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:956
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:976
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:987
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.str = yyDollar[1].str
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1011
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1031
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1035
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1039
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1043
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1056
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1066
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 170:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1071
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1076
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1080
		{
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1099
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1105
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1109
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 187:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1115
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1119
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1125
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1131
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1139
		{
			yyVAL.statement = &DDL{Action: DropDatabaseStr, Table: TableName{Qualifier: TableIdent{string(yyDollar[4].bytes)}}}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1143
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterTableStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1148
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropViewStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1167
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1173
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1177
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1181
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1186
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1190
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1194
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1198
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1202
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1206
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1210
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1222
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1230
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1234
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1242
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1246
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1250
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1268
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = SessionStr
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = GlobalStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.statement = &Begin{}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &Begin{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &Commit{}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.statement = &Rollback{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &OtherRead{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1324
		{
			yyVAL.statement = &OtherRead{}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &OtherRead{}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1341
		{
			setAllowComments(yylex, true)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1345
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1351
		{
			yyVAL.bytes2 = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1361
		{
			yyVAL.str = UnionStr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1365
		{
			yyVAL.str = UnionAllStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1369
		{
			yyVAL.str = UnionDistinctStr
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1374
		{
			yyVAL.str = ""
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1378
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1382
		{
			yyVAL.str = SQLCacheStr
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1387
		{
			yyVAL.str = ""
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1391
		{
			yyVAL.str = DistinctStr
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1396
		{
			yyVAL.str = ""
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1400
		{
			yyVAL.str = StraightJoinHint
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1405
		{
			yyVAL.selectExprs = nil
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1419
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1425
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1429
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1433
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1437
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1442
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1446
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1457
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1462
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1476
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1490
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1494
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1500
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1504
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1514
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1520
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1524
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1537
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1541
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1545
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1549
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1555
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1557
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1561
		{
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1563
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1567
		{
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1572
		{
			yyVAL.empty = struct{}{}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.empty = struct{}{}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1577
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1585
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = JoinStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = JoinStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = JoinStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = StraightJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = LeftJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = LeftJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1626
		{
			yyVAL.str = RightJoinStr
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1630
		{
			yyVAL.str = RightJoinStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1636
		{
			yyVAL.str = NaturalJoinStr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1640
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1650
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1664
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1669
		{
			yyVAL.indexHints = nil
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1673
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1677
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1681
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1686
		{
			yyVAL.expr = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1690
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1700
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1708
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1712
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1720
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1740
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1746
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1750
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1762
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1766
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1770
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1774
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1778
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1782
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1788
		{
			yyVAL.str = IsNullStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = IsNotNullStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.str = IsTrueStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = IsNotTrueStr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = IsFalseStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = IsNotFalseStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.str = EqualStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = LessThanStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = GreaterThanStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = LessEqualStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = GreaterEqualStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = NotEqualStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			yyVAL.expr = nil
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1847
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1861
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1877
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1887
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1963
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1967
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1979
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1993
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1997
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2001
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2019
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2023
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2027
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2037
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2041
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2045
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2049
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2053
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 394:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2057
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2061
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2065
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2069
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2083
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2101
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2111
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2143
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.str = BooleanModeStr
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2151
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2155
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.str = QueryExpansionStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2191
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2195
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = nil
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = string("")
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2253
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2259
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2282
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &NullVal{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2340
		{
			yyVAL.exprs = nil
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = nil
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2358
		{
			yyVAL.orderBy = nil
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2362
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2378
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2383
		{
			yyVAL.str = AscScr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.str = AscScr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.str = DescScr
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2396
		{
			yyVAL.limit = nil
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2400
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2404
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2408
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2413
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = ForUpdateStr
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = ShareModeStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2434
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2438
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2442
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2447
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2451
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2455
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2462
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2466
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2470
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2474
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2479
		{
			yyVAL.updateExprs = nil
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2483
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2489
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2499
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2515
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2535
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2541
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2545
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2551
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2555
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.bytes = []byte("charset")
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &Default{}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2586
		{
			yyVAL.byt = 0
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			yyVAL.byt = 1
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2591
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2593
		{
			yyVAL.empty = struct{}{}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2596
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.str = IgnoreStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2623
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2636
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2640
		{
			yyVAL.empty = struct{}{}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2643
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2653
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2666
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2881
		{
			decNesting(yylex)
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2886
		{
			forceEOF(yylex)
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2891
		{
			forceEOF(yylex)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			forceEOF(yylex)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
